
TestCan_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800a2d4  0800a2d4  0000b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4f8  0800a4f8  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4f8  0800a4f8  0000b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a500  0800a500  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a500  0800a500  0000b500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800a508  0800a508  0000b508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a510  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000377c  2000006c  0800a57c  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037e8  0800a57c  0000c7e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c47  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004425  00000000  00000000  0002dce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015e1  00000000  00000000  00033d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000078e0  00000000  00000000  00035329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e373  00000000  00000000  0003cc09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e3e2  00000000  00000000  0005af7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016935e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c4  00000000  00000000  001693a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00171468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a2bc 	.word	0x0800a2bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800a2bc 	.word	0x0800a2bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d009      	beq.n	80005dc <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <ITM_SendChar+0x2c>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <ITM_SendChar+0x2e>
 80005dc:	2300      	movs	r3, #0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d010      	beq.n	8000604 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e2:	e000      	b.n	80005e6 <ITM_SendChar+0x36>
    {
      __NOP();
 80005e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f4      	bne.n	80005e4 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

extern "C" int _write(int file, char *data, int len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, 100);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	b29a      	uxth	r2, r3
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	68b9      	ldr	r1, [r7, #8]
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <_write+0x24>)
 800062a:	f003 fc23 	bl	8003e74 <HAL_UART_Transmit>
	return len;
 800062e:	687b      	ldr	r3, [r7, #4]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000ec 	.word	0x200000ec

0800063c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000642:	f000 fe16 	bl	8001272 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000646:	f000 f8df 	bl	8000808 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800064a:	f000 f9df 	bl	8000a0c <_ZL12MX_GPIO_Initv>
	MX_FDCAN1_Init();
 800064e:	f000 f931 	bl	80008b4 <_ZL14MX_FDCAN1_Initv>
	MX_USART2_UART_Init();
 8000652:	f000 f97b 	bl	800094c <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */

	printf("Can Test\r\n");
 8000656:	4854      	ldr	r0, [pc, #336]	@ (80007a8 <main+0x16c>)
 8000658:	f009 f86c 	bl	8009734 <puts>

	can.setHandleFdcan(&hfdcan1);
 800065c:	4953      	ldr	r1, [pc, #332]	@ (80007ac <main+0x170>)
 800065e:	4854      	ldr	r0, [pc, #336]	@ (80007b0 <main+0x174>)
 8000660:	f008 fcd2 	bl	8009008 <_ZN15FdcanController14setHandleFdcanEP19FDCAN_HandleTypeDef>
	can.setHandleMutex(&mutexCanHandle);
 8000664:	4953      	ldr	r1, [pc, #332]	@ (80007b4 <main+0x178>)
 8000666:	4852      	ldr	r0, [pc, #328]	@ (80007b0 <main+0x174>)
 8000668:	f008 fcf9 	bl	800905e <_ZN15FdcanController14setHandleMutexEPPv>
	can.setHandleQueue(&queueCanFifo0Handle, FdcanController::Buffer::Fifo0);
 800066c:	2201      	movs	r2, #1
 800066e:	4952      	ldr	r1, [pc, #328]	@ (80007b8 <main+0x17c>)
 8000670:	484f      	ldr	r0, [pc, #316]	@ (80007b0 <main+0x174>)
 8000672:	f008 fcd7 	bl	8009024 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE>
	can.setHandleQueue(&queueCanFifo1Handle, FdcanController::Buffer::Fifo1);
 8000676:	2202      	movs	r2, #2
 8000678:	4950      	ldr	r1, [pc, #320]	@ (80007bc <main+0x180>)
 800067a:	484d      	ldr	r0, [pc, #308]	@ (80007b0 <main+0x174>)
 800067c:	f008 fcd2 	bl	8009024 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE>
	can.setHandleSem(&semCanHandle);
 8000680:	494f      	ldr	r1, [pc, #316]	@ (80007c0 <main+0x184>)
 8000682:	484b      	ldr	r0, [pc, #300]	@ (80007b0 <main+0x174>)
 8000684:	f008 fcf9 	bl	800907a <_ZN15FdcanController12setHandleSemEPPv>

	FDCAN_FilterTypeDef filterFifo0;
	filterFifo0.IdType = FDCAN_STANDARD_ID;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
	filterFifo0.FilterIndex = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
	filterFifo0.FilterType = FDCAN_FILTER_MASK;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
	filterFifo0.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
	filterFifo0.FilterID1 = 0x100;
 8000698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
	filterFifo0.FilterID2 = 0x700;
 800069e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (can.setFilter(&filterFifo0) != FdcanController::State::Ok)
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	4619      	mov	r1, r3
 80006aa:	4841      	ldr	r0, [pc, #260]	@ (80007b0 <main+0x174>)
 80006ac:	f008 fe43 	bl	8009336 <_ZN15FdcanController9setFilterEP19FDCAN_FilterTypeDef>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf14      	ite	ne
 80006b6:	2301      	movne	r3, #1
 80006b8:	2300      	moveq	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <main+0x8a>
	{
		printf("error\r\n");
 80006c0:	4840      	ldr	r0, [pc, #256]	@ (80007c4 <main+0x188>)
 80006c2:	f009 f837 	bl	8009734 <puts>
	}

	FDCAN_FilterTypeDef filterFifo1;
	filterFifo1.IdType = FDCAN_STANDARD_ID;
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
	filterFifo1.FilterIndex = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
	filterFifo1.FilterType = FDCAN_FILTER_MASK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60bb      	str	r3, [r7, #8]
	filterFifo1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
	filterFifo1.FilterID1 = 0x200;
 80006d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006da:	613b      	str	r3, [r7, #16]
	filterFifo1.FilterID2 = 0x700;
 80006dc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80006e0:	617b      	str	r3, [r7, #20]
	if (can.setFilter(&filterFifo1) != FdcanController::State::Ok)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4619      	mov	r1, r3
 80006e6:	4832      	ldr	r0, [pc, #200]	@ (80007b0 <main+0x174>)
 80006e8:	f008 fe25 	bl	8009336 <_ZN15FdcanController9setFilterEP19FDCAN_FilterTypeDef>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	bf14      	ite	ne
 80006f2:	2301      	movne	r3, #1
 80006f4:	2300      	moveq	r3, #0
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <main+0xc6>
	{
		printf("error\r\n");
 80006fc:	4831      	ldr	r0, [pc, #196]	@ (80007c4 <main+0x188>)
 80006fe:	f009 f819 	bl	8009734 <puts>
	}

	if (can.init() != FdcanController::State::Ok)
 8000702:	482b      	ldr	r0, [pc, #172]	@ (80007b0 <main+0x174>)
 8000704:	f008 fcc7 	bl	8009096 <_ZN15FdcanController4initEv>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <main+0xe2>
	{
		printf("error\r\n");
 8000718:	482a      	ldr	r0, [pc, #168]	@ (80007c4 <main+0x188>)
 800071a:	f009 f80b 	bl	8009734 <puts>
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800071e:	f004 fe57 	bl	80053d0 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of mutexCan */
	mutexCanHandle = osMutexNew(&mutexCan_attributes);
 8000722:	4829      	ldr	r0, [pc, #164]	@ (80007c8 <main+0x18c>)
 8000724:	f004 ff4b 	bl	80055be <osMutexNew>
 8000728:	4603      	mov	r3, r0
 800072a:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <main+0x178>)
 800072c:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of semCan */
	semCanHandle = osSemaphoreNew(1, 0, &semCan_attributes);
 800072e:	4a27      	ldr	r2, [pc, #156]	@ (80007cc <main+0x190>)
 8000730:	2100      	movs	r1, #0
 8000732:	2001      	movs	r0, #1
 8000734:	f005 f851 	bl	80057da <osSemaphoreNew>
 8000738:	4603      	mov	r3, r0
 800073a:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <main+0x184>)
 800073c:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of queueCan */
	queueCanFifo0Handle = osMessageQueueNew(16, sizeof(FdcanMsg),
 800073e:	4a24      	ldr	r2, [pc, #144]	@ (80007d0 <main+0x194>)
 8000740:	2154      	movs	r1, #84	@ 0x54
 8000742:	2010      	movs	r0, #16
 8000744:	f005 f968 	bl	8005a18 <osMessageQueueNew>
 8000748:	4603      	mov	r3, r0
 800074a:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <main+0x17c>)
 800074c:	6013      	str	r3, [r2, #0]
			&queueCanFifo0_attributes);
	queueCanFifo1Handle = osMessageQueueNew(16, sizeof(FdcanMsg),
 800074e:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <main+0x198>)
 8000750:	2154      	movs	r1, #84	@ 0x54
 8000752:	2010      	movs	r0, #16
 8000754:	f005 f960 	bl	8005a18 <osMessageQueueNew>
 8000758:	4603      	mov	r3, r0
 800075a:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <main+0x180>)
 800075c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of task0 */
	task0Handle = osThreadNew(startTask0, NULL, &task0_attributes);
 800075e:	4a1e      	ldr	r2, [pc, #120]	@ (80007d8 <main+0x19c>)
 8000760:	2100      	movs	r1, #0
 8000762:	481e      	ldr	r0, [pc, #120]	@ (80007dc <main+0x1a0>)
 8000764:	f004 fe7e 	bl	8005464 <osThreadNew>
 8000768:	4603      	mov	r3, r0
 800076a:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <main+0x1a4>)
 800076c:	6013      	str	r3, [r2, #0]

	/* creation of task1 */
	task1Handle = osThreadNew(startTask1, NULL, &task1_attributes);
 800076e:	4a1d      	ldr	r2, [pc, #116]	@ (80007e4 <main+0x1a8>)
 8000770:	2100      	movs	r1, #0
 8000772:	481d      	ldr	r0, [pc, #116]	@ (80007e8 <main+0x1ac>)
 8000774:	f004 fe76 	bl	8005464 <osThreadNew>
 8000778:	4603      	mov	r3, r0
 800077a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <main+0x1b0>)
 800077c:	6013      	str	r3, [r2, #0]

	/* creation of task2 */
	task2Handle = osThreadNew(startTask2, NULL, &task2_attributes);
 800077e:	4a1c      	ldr	r2, [pc, #112]	@ (80007f0 <main+0x1b4>)
 8000780:	2100      	movs	r1, #0
 8000782:	481c      	ldr	r0, [pc, #112]	@ (80007f4 <main+0x1b8>)
 8000784:	f004 fe6e 	bl	8005464 <osThreadNew>
 8000788:	4603      	mov	r3, r0
 800078a:	4a1b      	ldr	r2, [pc, #108]	@ (80007f8 <main+0x1bc>)
 800078c:	6013      	str	r3, [r2, #0]

	/* creation of task3 */
	task3Handle = osThreadNew(startTask3, NULL, &task3_attributes);
 800078e:	4a1b      	ldr	r2, [pc, #108]	@ (80007fc <main+0x1c0>)
 8000790:	2100      	movs	r1, #0
 8000792:	481b      	ldr	r0, [pc, #108]	@ (8000800 <main+0x1c4>)
 8000794:	f004 fe66 	bl	8005464 <osThreadNew>
 8000798:	4603      	mov	r3, r0
 800079a:	4a1a      	ldr	r2, [pc, #104]	@ (8000804 <main+0x1c8>)
 800079c:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800079e:	f004 fe3b 	bl	8005418 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80007a2:	bf00      	nop
 80007a4:	e7fd      	b.n	80007a2 <main+0x166>
 80007a6:	bf00      	nop
 80007a8:	0800a328 	.word	0x0800a328
 80007ac:	20000088 	.word	0x20000088
 80007b0:	200001a0 	.word	0x200001a0
 80007b4:	20000198 	.word	0x20000198
 80007b8:	20000190 	.word	0x20000190
 80007bc:	20000194 	.word	0x20000194
 80007c0:	2000019c 	.word	0x2000019c
 80007c4:	0800a334 	.word	0x0800a334
 80007c8:	0800a444 	.word	0x0800a444
 80007cc:	0800a454 	.word	0x0800a454
 80007d0:	0800a414 	.word	0x0800a414
 80007d4:	0800a42c 	.word	0x0800a42c
 80007d8:	0800a384 	.word	0x0800a384
 80007dc:	08000bb9 	.word	0x08000bb9
 80007e0:	20000180 	.word	0x20000180
 80007e4:	0800a3a8 	.word	0x0800a3a8
 80007e8:	08000c2d 	.word	0x08000c2d
 80007ec:	20000184 	.word	0x20000184
 80007f0:	0800a3cc 	.word	0x0800a3cc
 80007f4:	08000c5d 	.word	0x08000c5d
 80007f8:	20000188 	.word	0x20000188
 80007fc:	0800a3f0 	.word	0x0800a3f0
 8000800:	08000cd1 	.word	0x08000cd1
 8000804:	2000018c 	.word	0x2000018c

08000808 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	@ 0x50
 800080c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2238      	movs	r2, #56	@ 0x38
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f009 f86c 	bl	80098f4 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800082a:	2000      	movs	r0, #0
 800082c:	f001 ff24 	bl	8002678 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	2340      	movs	r3, #64	@ 0x40
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000842:	2302      	movs	r3, #2
 8000844:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000846:	2304      	movs	r3, #4
 8000848:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800084a:	2355      	movs	r3, #85	@ 0x55
 800084c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	4618      	mov	r0, r3
 8000860:	f001 ffbe 	bl	80027e0 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2301      	movne	r3, #1
 800086c:	2300      	moveq	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <_Z18SystemClock_Configv+0x70>
	{
		Error_Handler();
 8000874:	f000 fa56 	bl	8000d24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000878:	230f      	movs	r3, #15
 800087a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2303      	movs	r3, #3
 800087e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2104      	movs	r1, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fab7 	bl	8002e04 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf14      	ite	ne
 800089c:	2301      	movne	r3, #1
 800089e:	2300      	moveq	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <_Z18SystemClock_Configv+0xa2>
	{
		Error_Handler();
 80008a6:	f000 fa3d 	bl	8000d24 <Error_Handler>
	}
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	@ 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <_ZL14MX_FDCAN1_Initv>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 80008b8:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008ba:	4a23      	ldr	r2, [pc, #140]	@ (8000948 <_ZL14MX_FDCAN1_Initv+0x94>)
 80008bc:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	605a      	str	r2, [r3, #4]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008cc:	2204      	movs	r2, #4
 80008ce:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 283;
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008e4:	f240 121b 	movw	r2, #283	@ 0x11b
 80008e8:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 1;
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008fe:	2201      	movs	r2, #1
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000904:	2201      	movs	r2, #1
 8000906:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 800090a:	2201      	movs	r2, #1
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000910:	2201      	movs	r2, #1
 8000912:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.StdFiltersNbr = 2;
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000916:	2202      	movs	r2, #2
 8000918:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.ExtFiltersNbr = 0;
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000926:	4807      	ldr	r0, [pc, #28]	@ (8000944 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000928:	f000 fe7a 	bl	8001620 <HAL_FDCAN_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf14      	ite	ne
 8000932:	2301      	movne	r3, #1
 8000934:	2300      	moveq	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <_ZL14MX_FDCAN1_Initv+0x8c>
	{
		Error_Handler();
 800093c:	f000 f9f2 	bl	8000d24 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000088 	.word	0x20000088
 8000948:	40006400 	.word	0x40006400

0800094c <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000950:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000952:	4a2d      	ldr	r2, [pc, #180]	@ (8000a08 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000954:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000956:	4b2b      	ldr	r3, [pc, #172]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b29      	ldr	r3, [pc, #164]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b26      	ldr	r3, [pc, #152]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000994:	481b      	ldr	r0, [pc, #108]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000996:	f003 fa1d 	bl	8003dd4 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <_ZL19MX_USART2_UART_Initv+0x62>
	{
		Error_Handler();
 80009aa:	f000 f9bb 	bl	8000d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4814      	ldr	r0, [pc, #80]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009b2:	f004 fbfe 	bl	80051b2 <HAL_UARTEx_SetTxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
			!= HAL_OK)
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bf14      	ite	ne
 80009bc:	2301      	movne	r3, #1
 80009be:	2300      	moveq	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <_ZL19MX_USART2_UART_Initv+0x7e>
	{
		Error_Handler();
 80009c6:	f000 f9ad 	bl	8000d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80009ca:	2100      	movs	r1, #0
 80009cc:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009ce:	f004 fc2e 	bl	800522e <HAL_UARTEx_SetRxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
			!= HAL_OK)
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <_ZL19MX_USART2_UART_Initv+0x9a>
	{
		Error_Handler();
 80009e2:	f000 f99f 	bl	8000d24 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e6:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009e8:	f004 fbaa 	bl	8005140 <HAL_UARTEx_DisableFifoMode>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <_ZL19MX_USART2_UART_Initv+0xb4>
	{
		Error_Handler();
 80009fc:	f000 f992 	bl	8000d24 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000ec 	.word	0x200000ec
 8000a08:	40004400 	.word	0x40004400

08000a0c <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a2e      	ldr	r2, [pc, #184]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a22      	ldr	r2, [pc, #136]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8a:	f001 fdb9 	bl	8002600 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480f      	ldr	r0, [pc, #60]	@ (8000ae4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000aa6:	f001 fc29 	bl	80022fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000aaa:	2320      	movs	r3, #32
 8000aac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac4:	f001 fc1a 	bl	80022fc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2107      	movs	r1, #7
 8000acc:	2028      	movs	r0, #40	@ 0x28
 8000ace:	f000 fcbf 	bl	8001450 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ad2:	2028      	movs	r0, #40	@ 0x28
 8000ad4:	f000 fcd6 	bl	8001484 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	48000800 	.word	0x48000800

08000ae8 <HAL_FDCAN_TxBufferCompleteCallback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t BufferIndexes)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	if (can.updateInterruptTx(hfdcan) != FdcanController::State::Ok)
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	4808      	ldr	r0, [pc, #32]	@ (8000b18 <HAL_FDCAN_TxBufferCompleteCallback+0x30>)
 8000af6:	f008 fba9 	bl	800924c <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf14      	ite	ne
 8000b00:	2301      	movne	r3, #1
 8000b02:	2300      	moveq	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <HAL_FDCAN_TxBufferCompleteCallback+0x28>
	{
		printf("error\r\n");
 8000b0a:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <HAL_FDCAN_TxBufferCompleteCallback+0x34>)
 8000b0c:	f008 fe12 	bl	8009734 <puts>
	}
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200001a0 	.word	0x200001a0
 8000b1c:	0800a334 	.word	0x0800a334

08000b20 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	if (can.updateInterruptRx(hfdcan, RxFifo0ITs) != FdcanController::State::Ok)
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000b30:	f008 fbad 	bl	800928e <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	bf14      	ite	ne
 8000b3a:	2301      	movne	r3, #1
 8000b3c:	2300      	moveq	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <HAL_FDCAN_RxFifo0Callback+0x2a>
	{
		printf("error\r\n");
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000b46:	f008 fdf5 	bl	8009734 <puts>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001a0 	.word	0x200001a0
 8000b58:	0800a334 	.word	0x0800a334

08000b5c <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
	if (can.updateInterruptRx(hfdcan, RxFifo1ITs) != FdcanController::State::Ok)
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <HAL_FDCAN_RxFifo1Callback+0x34>)
 8000b6c:	f008 fb8f 	bl	800928e <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bf14      	ite	ne
 8000b76:	2301      	movne	r3, #1
 8000b78:	2300      	moveq	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_FDCAN_RxFifo1Callback+0x2a>
	{
		printf("error\r\n");
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <HAL_FDCAN_RxFifo1Callback+0x38>)
 8000b82:	f008 fdd7 	bl	8009734 <puts>
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200001a0 	.word	0x200001a0
 8000b94:	0800a334 	.word	0x0800a334

08000b98 <_Z11task_actionc>:

void task_action(char command)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(command);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fd03 	bl	80005b0 <ITM_SendChar>
	ITM_SendChar('\n');
 8000baa:	200a      	movs	r0, #10
 8000bac:	f7ff fd00 	bl	80005b0 <ITM_SendChar>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_Z10startTask0Pv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTask0 */
void startTask0(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0aa      	sub	sp, #168	@ 0xa8
 8000bbc:	af12      	add	r7, sp, #72	@ 0x48
 8000bbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	FdcanMsg msg;
	msg.txHeader.Identifier = 0x100;
 8000bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
	msg.txHeader.IdType = FDCAN_STANDARD_ID;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
	msg.txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	msg.txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	643b      	str	r3, [r7, #64]	@ 0x40
	msg.txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	647b      	str	r3, [r7, #68]	@ 0x44
	msg.txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
	msg.txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	msg.txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bde:	2300      	movs	r3, #0
 8000be0:	653b      	str	r3, [r7, #80]	@ 0x50
	msg.txHeader.MessageMarker = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	657b      	str	r3, [r7, #84]	@ 0x54

	memcpy(msg.data, "fifo0\0", 6);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	334c      	adds	r3, #76	@ 0x4c
 8000bec:	2206      	movs	r2, #6
 8000bee:	490d      	ldr	r1, [pc, #52]	@ (8000c24 <_Z10startTask0Pv+0x6c>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f008 ff0a 	bl	8009a0a <memcpy>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1e3);
 8000bf6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bfa:	f004 fcc5 	bl	8005588 <osDelay>
		task_action('1');
 8000bfe:	2031      	movs	r0, #49	@ 0x31
 8000c00:	f7ff ffca 	bl	8000b98 <_Z11task_actionc>
		can.send(msg);
 8000c04:	4668      	mov	r0, sp
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2248      	movs	r2, #72	@ 0x48
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f008 fefc 	bl	8009a0a <memcpy>
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c18:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <_Z10startTask0Pv+0x70>)
 8000c1a:	f008 fa81 	bl	8009120 <_ZN15FdcanController4sendE8FdcanMsg>
		osDelay(1e3);
 8000c1e:	bf00      	nop
 8000c20:	e7e9      	b.n	8000bf6 <_Z10startTask0Pv+0x3e>
 8000c22:	bf00      	nop
 8000c24:	0800a33c 	.word	0x0800a33c
 8000c28:	200001a0 	.word	0x200001a0

08000c2c <_Z10startTask1Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTask1 */
void startTask1(void *argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b098      	sub	sp, #96	@ 0x60
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTask1 */
	/* Infinite loop */
	for (;;)
	{
		FdcanMsg msg;
		can.receive(&msg, FdcanController::Buffer::Fifo0);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <_Z10startTask1Pv+0x28>)
 8000c3e:	f008 fad6 	bl	80091ee <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE>
		printf("fifo0 got: %s\r\n", reinterpret_cast<char*>(msg.data));
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	334c      	adds	r3, #76	@ 0x4c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <_Z10startTask1Pv+0x2c>)
 8000c4c:	f008 fd0a 	bl	8009664 <iprintf>
	}
 8000c50:	bf00      	nop
 8000c52:	e7ef      	b.n	8000c34 <_Z10startTask1Pv+0x8>
 8000c54:	200001a0 	.word	0x200001a0
 8000c58:	0800a344 	.word	0x0800a344

08000c5c <_Z10startTask2Pv>:
	/* USER CODE END startTask1 */
}

void startTask2(void *argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0aa      	sub	sp, #168	@ 0xa8
 8000c60:	af12      	add	r7, sp, #72	@ 0x48
 8000c62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTask1 */
	FdcanMsg msg;
	msg.txHeader.Identifier = 0x200;
 8000c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c68:	637b      	str	r3, [r7, #52]	@ 0x34
	msg.txHeader.IdType = FDCAN_STANDARD_ID;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
	msg.txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
	msg.txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000c72:	2308      	movs	r3, #8
 8000c74:	643b      	str	r3, [r7, #64]	@ 0x40
	msg.txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	647b      	str	r3, [r7, #68]	@ 0x44
	msg.txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
	msg.txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
	msg.txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c82:	2300      	movs	r3, #0
 8000c84:	653b      	str	r3, [r7, #80]	@ 0x50
	msg.txHeader.MessageMarker = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	657b      	str	r3, [r7, #84]	@ 0x54

	memcpy(msg.data, "fifo1\0", 6);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	334c      	adds	r3, #76	@ 0x4c
 8000c90:	2206      	movs	r2, #6
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <_Z10startTask2Pv+0x6c>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f008 feb8 	bl	8009a0a <memcpy>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1e3);
 8000c9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c9e:	f004 fc73 	bl	8005588 <osDelay>
		task_action('2');
 8000ca2:	2032      	movs	r0, #50	@ 0x32
 8000ca4:	f7ff ff78 	bl	8000b98 <_Z11task_actionc>
		can.send(msg);
 8000ca8:	4668      	mov	r0, sp
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	2248      	movs	r2, #72	@ 0x48
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f008 feaa 	bl	8009a0a <memcpy>
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cbc:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <_Z10startTask2Pv+0x70>)
 8000cbe:	f008 fa2f 	bl	8009120 <_ZN15FdcanController4sendE8FdcanMsg>
		osDelay(1e3);
 8000cc2:	bf00      	nop
 8000cc4:	e7e9      	b.n	8000c9a <_Z10startTask2Pv+0x3e>
 8000cc6:	bf00      	nop
 8000cc8:	0800a354 	.word	0x0800a354
 8000ccc:	200001a0 	.word	0x200001a0

08000cd0 <_Z10startTask3Pv>:
	}
	/* USER CODE END startTask1 */
}

void startTask3(void *argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b098      	sub	sp, #96	@ 0x60
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		FdcanMsg msg;
		can.receive(&msg, FdcanController::Buffer::Fifo1);
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2202      	movs	r2, #2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <_Z10startTask3Pv+0x28>)
 8000ce2:	f008 fa84 	bl	80091ee <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE>
		printf("fifo1 got: %s\r\n", reinterpret_cast<char*>(msg.data));
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	334c      	adds	r3, #76	@ 0x4c
 8000cec:	4619      	mov	r1, r3
 8000cee:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <_Z10startTask3Pv+0x2c>)
 8000cf0:	f008 fcb8 	bl	8009664 <iprintf>
	}
 8000cf4:	bf00      	nop
 8000cf6:	e7ef      	b.n	8000cd8 <_Z10startTask3Pv+0x8>
 8000cf8:	200001a0 	.word	0x200001a0
 8000cfc:	0800a35c 	.word	0x0800a35c

08000d00 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000d12:	f000 fac7 	bl	80012a4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40001000 	.word	0x40001000

08000d24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <Error_Handler+0x8>

08000d30 <_Z41__static_initialization_and_destruction_0ii>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d107      	bne.n	8000d50 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d102      	bne.n	8000d50 <_Z41__static_initialization_and_destruction_0ii+0x20>
FdcanController can;
 8000d4a:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d4c:	f008 f91c 	bl	8008f88 <_ZN15FdcanControllerC1Ev>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d102      	bne.n	8000d66 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d62:	f008 f931 	bl	8008fc8 <_ZN15FdcanControllerD1Ev>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001a0 	.word	0x200001a0

08000d74 <_GLOBAL__sub_I_hfdcan1>:
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff ffd7 	bl	8000d30 <_Z41__static_initialization_and_destruction_0ii>
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_GLOBAL__sub_D_hfdcan1>:
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff ffcf 	bl	8000d30 <_Z41__static_initialization_and_destruction_0ii>
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_MspInit+0x50>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <HAL_MspInit+0x50>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x50>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x50>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_MspInit+0x50>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_MspInit+0x50>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	210f      	movs	r1, #15
 8000dce:	f06f 0001 	mvn.w	r0, #1
 8000dd2:	f000 fb3d 	bl	8001450 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dd6:	f001 fcf3 	bl	80027c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09e      	sub	sp, #120	@ 0x78
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2254      	movs	r2, #84	@ 0x54
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f008 fd73 	bl	80098f4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a28      	ldr	r2, [pc, #160]	@ (8000eb4 <HAL_FDCAN_MspInit+0xcc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d149      	bne.n	8000eac <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fa39 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e34:	f7ff ff76 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <HAL_FDCAN_MspInit+0xd0>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb8 <HAL_FDCAN_MspInit+0xd0>)
 8000e3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e44:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_FDCAN_MspInit+0xd0>)
 8000e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <HAL_FDCAN_MspInit+0xd0>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	4a18      	ldr	r2, [pc, #96]	@ (8000eb8 <HAL_FDCAN_MspInit+0xd0>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <HAL_FDCAN_MspInit+0xd0>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e68:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e88:	f001 fa38 	bl	80022fc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2105      	movs	r1, #5
 8000e90:	2015      	movs	r0, #21
 8000e92:	f000 fadd 	bl	8001450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e96:	2015      	movs	r0, #21
 8000e98:	f000 faf4 	bl	8001484 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2106      	movs	r1, #6
 8000ea0:	2016      	movs	r0, #22
 8000ea2:	f000 fad5 	bl	8001450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ea6:	2016      	movs	r0, #22
 8000ea8:	f000 faec 	bl	8001484 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000eac:	bf00      	nop
 8000eae:	3778      	adds	r7, #120	@ 0x78
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40006400 	.word	0x40006400
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b09e      	sub	sp, #120	@ 0x78
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2254      	movs	r2, #84	@ 0x54
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f008 fd09 	bl	80098f4 <memset>
  if(huart->Instance==USART2)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a23      	ldr	r2, [pc, #140]	@ (8000f74 <HAL_UART_MspInit+0xb8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d13e      	bne.n	8000f6a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 f9d1 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f04:	f7ff ff0e 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_UART_MspInit+0xbc>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f78 <HAL_UART_MspInit+0xbc>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <HAL_UART_MspInit+0xbc>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_UART_MspInit+0xbc>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <HAL_UART_MspInit+0xbc>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_UART_MspInit+0xbc>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f38:	230c      	movs	r3, #12
 8000f3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f56:	f001 f9d1 	bl	80022fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	2026      	movs	r0, #38	@ 0x26
 8000f60:	f000 fa76 	bl	8001450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f64:	2026      	movs	r0, #38	@ 0x26
 8000f66:	f000 fa8d 	bl	8001484 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3778      	adds	r7, #120	@ 0x78
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40004400 	.word	0x40004400
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	@ 0x30
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <HAL_InitTick+0xc4>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f90:	4a2b      	ldr	r2, [pc, #172]	@ (8001040 <HAL_InitTick+0xc4>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f98:	4b29      	ldr	r3, [pc, #164]	@ (8001040 <HAL_InitTick+0xc4>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa4:	f107 020c 	add.w	r2, r7, #12
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 f8fe 	bl	80031b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb4:	f002 f8d0 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8000fb8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fbc:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <HAL_InitTick+0xc8>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9b      	lsrs	r3, r3, #18
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <HAL_InitTick+0xcc>)
 8000fca:	4a20      	ldr	r2, [pc, #128]	@ (800104c <HAL_InitTick+0xd0>)
 8000fcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <HAL_InitTick+0xcc>)
 8000fd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001048 <HAL_InitTick+0xcc>)
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <HAL_InitTick+0xcc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_InitTick+0xcc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000fe8:	4817      	ldr	r0, [pc, #92]	@ (8001048 <HAL_InitTick+0xcc>)
 8000fea:	f002 fba7 	bl	800373c <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d11b      	bne.n	8001034 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ffc:	4812      	ldr	r0, [pc, #72]	@ (8001048 <HAL_InitTick+0xcc>)
 8000ffe:	f002 fbff 	bl	8003800 <HAL_TIM_Base_Start_IT>
 8001002:	4603      	mov	r3, r0
 8001004:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001008:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800100c:	2b00      	cmp	r3, #0
 800100e:	d111      	bne.n	8001034 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001010:	2036      	movs	r0, #54	@ 0x36
 8001012:	f000 fa37 	bl	8001484 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d808      	bhi.n	800102e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	2036      	movs	r0, #54	@ 0x36
 8001022:	f000 fa15 	bl	8001450 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_InitTick+0xd4>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e002      	b.n	8001034 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001034:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001038:	4618      	mov	r0, r3
 800103a:	3730      	adds	r7, #48	@ 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	431bde83 	.word	0x431bde83
 8001048:	200001b8 	.word	0x200001b8
 800104c:	40001000 	.word	0x40001000
 8001050:	20000004 	.word	0x20000004

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <NMI_Handler+0x4>

0800105c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <MemManage_Handler+0x4>

0800106c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <UsageFault_Handler+0x4>

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <FDCAN1_IT0_IRQHandler+0x10>)
 8001092:	f000 fed3 	bl	8001e3c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000088 	.word	0x20000088

080010a0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <FDCAN1_IT1_IRQHandler+0x10>)
 80010a6:	f000 fec9 	bl	8001e3c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000088 	.word	0x20000088

080010b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <USART2_IRQHandler+0x10>)
 80010ba:	f002 ff69 	bl	8003f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000ec 	.word	0x200000ec

080010c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010d0:	f001 faae 	bl	8002630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <TIM6_DAC_IRQHandler+0x10>)
 80010de:	f002 fc07 	bl	80038f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001b8 	.word	0x200001b8

080010ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e00a      	b.n	8001114 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010fe:	f3af 8000 	nop.w
 8001102:	4601      	mov	r1, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	b2ca      	uxtb	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf0      	blt.n	80010fe <_read+0x12>
  }

  return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800114e:	605a      	str	r2, [r3, #4]
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f008 fbf6 	bl	80099b0 <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20020000 	.word	0x20020000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20000204 	.word	0x20000204
 80011f8:	200037e8 	.word	0x200037e8

080011fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001220:	480d      	ldr	r0, [pc, #52]	@ (8001258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001222:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001224:	f7ff ffea 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	480c      	ldr	r0, [pc, #48]	@ (800125c <LoopForever+0x6>)
  ldr r1, =_edata
 800122a:	490d      	ldr	r1, [pc, #52]	@ (8001260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <LoopForever+0xe>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001240:	4c0a      	ldr	r4, [pc, #40]	@ (800126c <LoopForever+0x16>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124e:	f008 fbb5 	bl	80099bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001252:	f7ff f9f3 	bl	800063c <main>

08001256 <LoopForever>:

LoopForever:
    b LoopForever
 8001256:	e7fe      	b.n	8001256 <LoopForever>
  ldr   r0, =_estack
 8001258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001264:	0800a510 	.word	0x0800a510
  ldr r2, =_sbss
 8001268:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800126c:	200037e8 	.word	0x200037e8

08001270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC1_2_IRQHandler>

08001272 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f8dc 	bl	800143a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001282:	200f      	movs	r0, #15
 8001284:	f7ff fe7a 	bl	8000f7c <HAL_InitTick>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	e001      	b.n	8001298 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001294:	f7ff fd7e 	bl	8000d94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001298:	79fb      	ldrb	r3, [r7, #7]

}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <HAL_IncTick+0x1c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <HAL_IncTick+0x20>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a03      	ldr	r2, [pc, #12]	@ (80012c0 <HAL_IncTick+0x1c>)
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	20000208 	.word	0x20000208
 80012c4:	20000008 	.word	0x20000008

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000208 	.word	0x20000208

080012e0 <__NVIC_SetPriorityGrouping>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4907      	ldr	r1, [pc, #28]	@ (800137c <__NVIC_EnableIRQ+0x38>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	@ (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff4c 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145e:	f7ff ff63 	bl	8001328 <__NVIC_GetPriorityGrouping>
 8001462:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f7ff ffb3 	bl	80013d4 <NVIC_EncodePriority>
 800146e:	4602      	mov	r2, r0
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff82 	bl	8001380 <__NVIC_SetPriority>
}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff56 	bl	8001344 <__NVIC_EnableIRQ>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d005      	beq.n	80014c4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2204      	movs	r2, #4
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e037      	b.n	8001534 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 020e 	bic.w	r2, r2, #14
 80014d2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014e2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001510:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00c      	beq.n	8001534 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001528:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001532:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d00d      	beq.n	8001586 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2204      	movs	r2, #4
 800156e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e047      	b.n	8001616 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 020e 	bic.w	r2, r2, #14
 8001594:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f003 021f 	and.w	r2, r3, #31
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
    }
  }
  return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e147      	b.n	80018c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fbce 	bl	8000de8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0210 	bic.w	r2, r2, #16
 800165a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800165c:	f7ff fe34 	bl	80012c8 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001662:	e012      	b.n	800168a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001664:	f7ff fe30 	bl	80012c8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b0a      	cmp	r3, #10
 8001670:	d90b      	bls.n	800168a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e11b      	b.n	80018c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b08      	cmp	r3, #8
 8001696:	d0e5      	beq.n	8001664 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a8:	f7ff fe0e 	bl	80012c8 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016ae:	e012      	b.n	80016d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016b0:	f7ff fe0a 	bl	80012c8 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b0a      	cmp	r3, #10
 80016bc:	d90b      	bls.n	80016d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0f5      	b.n	80018c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0e5      	beq.n	80016b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0202 	orr.w	r2, r2, #2
 80016f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a74      	ldr	r2, [pc, #464]	@ (80018cc <HAL_FDCAN_Init+0x2ac>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d103      	bne.n	8001706 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80016fe:	4a74      	ldr	r2, [pc, #464]	@ (80018d0 <HAL_FDCAN_Init+0x2b0>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7c1b      	ldrb	r3, [r3, #16]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699a      	ldr	r2, [r3, #24]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800171c:	619a      	str	r2, [r3, #24]
 800171e:	e007      	b.n	8001730 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800172e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7c5b      	ldrb	r3, [r3, #17]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699a      	ldr	r2, [r3, #24]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001746:	619a      	str	r2, [r3, #24]
 8001748:	e007      	b.n	800175a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001758:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7c9b      	ldrb	r3, [r3, #18]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699a      	ldr	r2, [r3, #24]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	e007      	b.n	8001784 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001782:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699a      	ldr	r2, [r3, #24]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80017a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0210 	bic.w	r2, r2, #16
 80017b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0204 	orr.w	r2, r2, #4
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	e02c      	b.n	800182e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d028      	beq.n	800182e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d01c      	beq.n	800181e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0210 	orr.w	r2, r2, #16
 8001802:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d110      	bne.n	800182e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0220 	orr.w	r2, r2, #32
 800181a:	619a      	str	r2, [r3, #24]
 800181c:	e007      	b.n	800182e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	3b01      	subs	r3, #1
 8001834:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	3b01      	subs	r3, #1
 800183c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800183e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001846:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	3b01      	subs	r3, #1
 8001850:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001856:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001858:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001862:	d115      	bne.n	8001890 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186e:	3b01      	subs	r3, #1
 8001870:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001872:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	3b01      	subs	r3, #1
 800187a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800187c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	3b01      	subs	r3, #1
 8001886:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800188c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800188e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fc40 	bl	800212c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40006400 	.word	0x40006400
 80018d0:	40006500 	.word	0x40006500

080018d4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018e4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d002      	beq.n	80018f2 <HAL_FDCAN_ConfigFilter+0x1e>
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d13d      	bne.n	800196e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d119      	bne.n	800192e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001906:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800190e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e01d      	b.n	800196a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	075a      	lsls	r2, r3, #29
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	079a      	lsls	r2, r3, #30
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3304      	adds	r3, #4
 8001962:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e006      	b.n	800197c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	f043 0202 	orr.w	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
  }
}
 800197c:	4618      	mov	r0, r3
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d110      	bne.n	80019be <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699a      	ldr	r2, [r3, #24]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e006      	b.n	80019cc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	f043 0204 	orr.w	r2, r3, #4
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d12c      	bne.n	8001a4a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e023      	b.n	8001a58 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 fbec 	bl	8002204 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	409a      	lsls	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e006      	b.n	8001a58 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4e:	f043 0208 	orr.w	r2, r3, #8
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
  }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b08b      	sub	sp, #44	@ 0x2c
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a78:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a7a:	7efb      	ldrb	r3, [r7, #27]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 80e8 	bne.w	8001c52 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b40      	cmp	r3, #64	@ 0x40
 8001a86:	d137      	bne.n	8001af8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0db      	b.n	8001c60 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab0:	0e1b      	lsrs	r3, r3, #24
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac2:	0a5b      	lsrs	r3, r3, #9
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af6:	e036      	b.n	8001b66 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0a3      	b.n	8001c60 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b20:	0e1b      	lsrs	r3, r3, #24
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d10a      	bne.n	8001b40 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e005      	b.n	8001b96 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e1b      	lsrs	r3, r3, #24
 8001bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0fda      	lsrs	r2, r3, #31
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	3304      	adds	r3, #4
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	e00a      	b.n	8001c22 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	441a      	add	r2, r3
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	440b      	add	r3, r1
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d3ec      	bcc.n	8001c0c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b40      	cmp	r3, #64	@ 0x40
 8001c36:	d105      	bne.n	8001c44 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001c42:	e004      	b.n	8001c4e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e006      	b.n	8001c60 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c56:	f043 0208 	orr.w	r2, r3, #8
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	372c      	adds	r7, #44	@ 0x2c
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	0800a47c 	.word	0x0800a47c

08001c70 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c82:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d003      	beq.n	8001c92 <HAL_FDCAN_ActivateNotification+0x22>
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	f040 80c8 	bne.w	8001e22 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d03b      	beq.n	8001d26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d031      	beq.n	8001d26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d027      	beq.n	8001d26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01d      	beq.n	8001d26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d013      	beq.n	8001d26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00c      	beq.n	8001d36 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d107      	bne.n	8001d36 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d13b      	bne.n	8001dc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d131      	bne.n	8001dc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d127      	bne.n	8001dc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d11d      	bne.n	8001dc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d113      	bne.n	8001dc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0202 	orr.w	r2, r2, #2
 8001dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e006      	b.n	8001e30 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e26:	f043 0202 	orr.w	r2, r3, #2
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
  }
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	@ 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e4a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e58:	4013      	ands	r3, r2
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e70:	4013      	ands	r3, r2
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e88:	4013      	ands	r3, r2
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e92:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001e96:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9e:	6a3a      	ldr	r2, [r7, #32]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eaa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001eae:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eca:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00b      	beq.n	8001eee <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2240      	movs	r2, #64	@ 0x40
 8001ee6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f900 	bl	80020ee <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d019      	beq.n	8001f2c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d014      	beq.n	8001f2c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f0a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8c2 	bl	80020b0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f38:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f8a2 	bl	8002086 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fde4 	bl	8000b20 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f64:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7fe fdf7 	bl	8000b5c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f885 	bl	800209c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d018      	beq.n	8001fce <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d013      	beq.n	8001fce <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2280      	movs	r2, #128	@ 0x80
 8001fc4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe fd8d 	bl	8000ae8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f86a 	bl	80020c6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800200e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f862 	bl	80020da <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00f      	beq.n	8002040 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002032:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002038:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800204e:	69f9      	ldr	r1, [r7, #28]
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f860 	bl	8002116 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f842 	bl	8002102 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800207e:	bf00      	nop
 8002080:	3730      	adds	r7, #48	@ 0x30
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002136:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2f      	ldr	r2, [pc, #188]	@ (80021fc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d103      	bne.n	800214a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002148:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d103      	bne.n	800215c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800215a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800216a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002172:	041a      	lsls	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002190:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002198:	061a      	lsls	r2, r3, #24
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e005      	b.n	80021de <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3304      	adds	r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3f3      	bcc.n	80021d2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	4000a400 	.word	0x4000a400
 80021fc:	40006800 	.word	0x40006800
 8002200:	40006c00 	.word	0x40006c00

08002204 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	@ 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002222:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800222a:	4313      	orrs	r3, r2
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e00a      	b.n	8002246 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002238:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800223e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002244:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002250:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002256:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800225c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	3304      	adds	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	3304      	adds	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e020      	b.n	80022da <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3303      	adds	r3, #3
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3302      	adds	r3, #2
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	440b      	add	r3, r1
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022b0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	440b      	add	r3, r1
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022be:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	440a      	add	r2, r1
 80022c6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022c8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3304      	adds	r3, #4
 80022d2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3304      	adds	r3, #4
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a06      	ldr	r2, [pc, #24]	@ (80022f8 <FDCAN_CopyMessageToRAM+0xf4>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	461a      	mov	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d3d6      	bcc.n	8002298 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80022ea:	bf00      	nop
 80022ec:	bf00      	nop
 80022ee:	3724      	adds	r7, #36	@ 0x24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	0800a47c 	.word	0x0800a47c

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800230a:	e15a      	b.n	80025c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 814c 	beq.w	80025bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d005      	beq.n	800233c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002338:	2b02      	cmp	r3, #2
 800233a:	d130      	bne.n	800239e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002372:	2201      	movs	r2, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0201 	and.w	r2, r3, #1
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d017      	beq.n	80023da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d123      	bne.n	800242e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0203 	and.w	r2, r3, #3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80a6 	beq.w	80025bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002470:	4b5b      	ldr	r3, [pc, #364]	@ (80025e0 <HAL_GPIO_Init+0x2e4>)
 8002472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002474:	4a5a      	ldr	r2, [pc, #360]	@ (80025e0 <HAL_GPIO_Init+0x2e4>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6613      	str	r3, [r2, #96]	@ 0x60
 800247c:	4b58      	ldr	r3, [pc, #352]	@ (80025e0 <HAL_GPIO_Init+0x2e4>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002488:	4a56      	ldr	r2, [pc, #344]	@ (80025e4 <HAL_GPIO_Init+0x2e8>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024b2:	d01f      	beq.n	80024f4 <HAL_GPIO_Init+0x1f8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a4c      	ldr	r2, [pc, #304]	@ (80025e8 <HAL_GPIO_Init+0x2ec>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d019      	beq.n	80024f0 <HAL_GPIO_Init+0x1f4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a4b      	ldr	r2, [pc, #300]	@ (80025ec <HAL_GPIO_Init+0x2f0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <HAL_GPIO_Init+0x1f0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a4a      	ldr	r2, [pc, #296]	@ (80025f0 <HAL_GPIO_Init+0x2f4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00d      	beq.n	80024e8 <HAL_GPIO_Init+0x1ec>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a49      	ldr	r2, [pc, #292]	@ (80025f4 <HAL_GPIO_Init+0x2f8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <HAL_GPIO_Init+0x1e8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a48      	ldr	r2, [pc, #288]	@ (80025f8 <HAL_GPIO_Init+0x2fc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_GPIO_Init+0x1e4>
 80024dc:	2305      	movs	r3, #5
 80024de:	e00a      	b.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024e0:	2306      	movs	r3, #6
 80024e2:	e008      	b.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024e4:	2304      	movs	r3, #4
 80024e6:	e006      	b.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024e8:	2303      	movs	r3, #3
 80024ea:	e004      	b.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024f4:	2300      	movs	r3, #0
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	f002 0203 	and.w	r2, r2, #3
 80024fc:	0092      	lsls	r2, r2, #2
 80024fe:	4093      	lsls	r3, r2
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002506:	4937      	ldr	r1, [pc, #220]	@ (80025e4 <HAL_GPIO_Init+0x2e8>)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002514:	4b39      	ldr	r3, [pc, #228]	@ (80025fc <HAL_GPIO_Init+0x300>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002538:	4a30      	ldr	r2, [pc, #192]	@ (80025fc <HAL_GPIO_Init+0x300>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800253e:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <HAL_GPIO_Init+0x300>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002562:	4a26      	ldr	r2, [pc, #152]	@ (80025fc <HAL_GPIO_Init+0x300>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002568:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <HAL_GPIO_Init+0x300>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800258c:	4a1b      	ldr	r2, [pc, #108]	@ (80025fc <HAL_GPIO_Init+0x300>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002592:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <HAL_GPIO_Init+0x300>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b6:	4a11      	ldr	r2, [pc, #68]	@ (80025fc <HAL_GPIO_Init+0x300>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f47f ae9d 	bne.w	800230c <HAL_GPIO_Init+0x10>
  }
}
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40010000 	.word	0x40010000
 80025e8:	48000400 	.word	0x48000400
 80025ec:	48000800 	.word	0x48000800
 80025f0:	48000c00 	.word	0x48000c00
 80025f4:	48001000 	.word	0x48001000
 80025f8:	48001400 	.word	0x48001400
 80025fc:	40010400 	.word	0x40010400

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800261c:	e002      	b.n	8002624 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800263a:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d006      	beq.n	8002654 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002646:	4a05      	ldr	r2, [pc, #20]	@ (800265c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f806 	bl	8002660 <HAL_GPIO_EXTI_Callback>
  }
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40010400 	.word	0x40010400

08002660 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d141      	bne.n	800270a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002686:	4b4b      	ldr	r3, [pc, #300]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002692:	d131      	bne.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002694:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800269a:	4a46      	ldr	r2, [pc, #280]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a4:	4b43      	ldr	r3, [pc, #268]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ac:	4a41      	ldr	r2, [pc, #260]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026b4:	4b40      	ldr	r3, [pc, #256]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2232      	movs	r2, #50	@ 0x32
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	4a3f      	ldr	r2, [pc, #252]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	0c9b      	lsrs	r3, r3, #18
 80026c6:	3301      	adds	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ca:	e002      	b.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d2:	4b38      	ldr	r3, [pc, #224]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026de:	d102      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f2      	bne.n	80026cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f2:	d158      	bne.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e057      	b.n	80027a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026f8:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026fe:	4a2d      	ldr	r2, [pc, #180]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002708:	e04d      	b.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002710:	d141      	bne.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002712:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271e:	d131      	bne.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002720:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002726:	4a23      	ldr	r2, [pc, #140]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002730:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002738:	4a1e      	ldr	r2, [pc, #120]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800273e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002740:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2232      	movs	r2, #50	@ 0x32
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	4a1c      	ldr	r2, [pc, #112]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	0c9b      	lsrs	r3, r3, #18
 8002752:	3301      	adds	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002756:	e002      	b.n	800275e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3b01      	subs	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800275e:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800276a:	d102      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f2      	bne.n	8002758 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277e:	d112      	bne.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e011      	b.n	80027a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800278a:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002790:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002794:	e007      	b.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40007000 	.word	0x40007000
 80027b8:	20000000 	.word	0x20000000
 80027bc:	431bde83 	.word	0x431bde83

080027c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ce:	6093      	str	r3, [r2, #8]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40007000 	.word	0x40007000

080027e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e2fe      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d075      	beq.n	80028ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fe:	4b97      	ldr	r3, [pc, #604]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002808:	4b94      	ldr	r3, [pc, #592]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d102      	bne.n	800281e <HAL_RCC_OscConfig+0x3e>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d002      	beq.n	8002824 <HAL_RCC_OscConfig+0x44>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d10b      	bne.n	800283c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	4b8d      	ldr	r3, [pc, #564]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05b      	beq.n	80028e8 <HAL_RCC_OscConfig+0x108>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d157      	bne.n	80028e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e2d9      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002844:	d106      	bne.n	8002854 <HAL_RCC_OscConfig+0x74>
 8002846:	4b85      	ldr	r3, [pc, #532]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a84      	ldr	r2, [pc, #528]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e01d      	b.n	8002890 <HAL_RCC_OscConfig+0xb0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x98>
 800285e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7e      	ldr	r2, [pc, #504]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0xb0>
 8002878:	4b78      	ldr	r3, [pc, #480]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a77      	ldr	r2, [pc, #476]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b75      	ldr	r3, [pc, #468]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a74      	ldr	r2, [pc, #464]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fd16 	bl	80012c8 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe fd12 	bl	80012c8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e29e      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0xc0>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fd02 	bl	80012c8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fe fcfe 	bl	80012c8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	@ 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e28a      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028da:	4b60      	ldr	r3, [pc, #384]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0xe8>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d075      	beq.n	80029e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f6:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002900:	4b56      	ldr	r3, [pc, #344]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d102      	bne.n	8002916 <HAL_RCC_OscConfig+0x136>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d002      	beq.n	800291c <HAL_RCC_OscConfig+0x13c>
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d11f      	bne.n	800295c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_OscConfig+0x154>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e25d      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b49      	ldr	r3, [pc, #292]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	4946      	ldr	r1, [pc, #280]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002948:	4b45      	ldr	r3, [pc, #276]	@ (8002a60 <HAL_RCC_OscConfig+0x280>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fb15 	bl	8000f7c <HAL_InitTick>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d043      	beq.n	80029e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e249      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d023      	beq.n	80029ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002964:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a3c      	ldr	r2, [pc, #240]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fcaa 	bl	80012c8 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7fe fca6 	bl	80012c8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e232      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298a:	4b34      	ldr	r3, [pc, #208]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b31      	ldr	r3, [pc, #196]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	061b      	lsls	r3, r3, #24
 80029a4:	492d      	ldr	r1, [pc, #180]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
 80029aa:	e01a      	b.n	80029e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ac:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80029b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fc86 	bl	80012c8 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c0:	f7fe fc82 	bl	80012c8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e20e      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d2:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1e0>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d041      	beq.n	8002a72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fc:	4a17      	ldr	r2, [pc, #92]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a06:	f7fe fc5f 	bl	80012c8 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0e:	f7fe fc5b 	bl	80012c8 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1e7      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a20:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ef      	beq.n	8002a0e <HAL_RCC_OscConfig+0x22e>
 8002a2e:	e020      	b.n	8002a72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a30:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a36:	4a09      	ldr	r2, [pc, #36]	@ (8002a5c <HAL_RCC_OscConfig+0x27c>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe fc42 	bl	80012c8 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a46:	e00d      	b.n	8002a64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fc3e 	bl	80012c8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d906      	bls.n	8002a64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1ca      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a64:	4b8c      	ldr	r3, [pc, #560]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ea      	bne.n	8002a48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80a6 	beq.w	8002bcc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a84:	4b84      	ldr	r3, [pc, #528]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2b4>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x2b6>
 8002a94:	2300      	movs	r3, #0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab6:	4b79      	ldr	r3, [pc, #484]	@ (8002c9c <HAL_RCC_OscConfig+0x4bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac2:	4b76      	ldr	r3, [pc, #472]	@ (8002c9c <HAL_RCC_OscConfig+0x4bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a75      	ldr	r2, [pc, #468]	@ (8002c9c <HAL_RCC_OscConfig+0x4bc>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fbfb 	bl	80012c8 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe fbf7 	bl	80012c8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e183      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c9c <HAL_RCC_OscConfig+0x4bc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d108      	bne.n	8002b0e <HAL_RCC_OscConfig+0x32e>
 8002afc:	4b66      	ldr	r3, [pc, #408]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	4a65      	ldr	r2, [pc, #404]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b0c:	e024      	b.n	8002b58 <HAL_RCC_OscConfig+0x378>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d110      	bne.n	8002b38 <HAL_RCC_OscConfig+0x358>
 8002b16:	4b60      	ldr	r3, [pc, #384]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b26:	4b5c      	ldr	r3, [pc, #368]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2c:	4a5a      	ldr	r2, [pc, #360]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b36:	e00f      	b.n	8002b58 <HAL_RCC_OscConfig+0x378>
 8002b38:	4b57      	ldr	r3, [pc, #348]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3e:	4a56      	ldr	r2, [pc, #344]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b48:	4b53      	ldr	r3, [pc, #332]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	4a52      	ldr	r2, [pc, #328]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b50:	f023 0304 	bic.w	r3, r3, #4
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d016      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe fbb2 	bl	80012c8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fbae 	bl	80012c8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e138      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7e:	4b46      	ldr	r3, [pc, #280]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ed      	beq.n	8002b68 <HAL_RCC_OscConfig+0x388>
 8002b8c:	e015      	b.n	8002bba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fb9b 	bl	80012c8 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fb97 	bl	80012c8 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e121      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bac:	4b3a      	ldr	r3, [pc, #232]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ed      	bne.n	8002b96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bba:	7ffb      	ldrb	r3, [r7, #31]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc0:	4b35      	ldr	r3, [pc, #212]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	4a34      	ldr	r2, [pc, #208]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d03c      	beq.n	8002c52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002be0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002be6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fb6a 	bl	80012c8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf8:	f7fe fb66 	bl	80012c8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0f2      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c0a:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ef      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x418>
 8002c18:	e01b      	b.n	8002c52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c20:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fb4d 	bl	80012c8 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c32:	f7fe fb49 	bl	80012c8 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0d5      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c44:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1ef      	bne.n	8002c32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80c9 	beq.w	8002dee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	f000 8083 	beq.w	8002d70 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d15e      	bne.n	8002d30 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fb23 	bl	80012c8 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c84:	e00c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fe fb1f 	bl	80012c8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d905      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0ab      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca0:	4b55      	ldr	r3, [pc, #340]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ec      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cac:	4b52      	ldr	r3, [pc, #328]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	4b52      	ldr	r3, [pc, #328]	@ (8002dfc <HAL_RCC_OscConfig+0x61c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6a11      	ldr	r1, [r2, #32]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	4311      	orrs	r1, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002cc6:	0212      	lsls	r2, r2, #8
 8002cc8:	4311      	orrs	r1, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cce:	0852      	lsrs	r2, r2, #1
 8002cd0:	3a01      	subs	r2, #1
 8002cd2:	0552      	lsls	r2, r2, #21
 8002cd4:	4311      	orrs	r1, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cda:	0852      	lsrs	r2, r2, #1
 8002cdc:	3a01      	subs	r2, #1
 8002cde:	0652      	lsls	r2, r2, #25
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ce6:	06d2      	lsls	r2, r2, #27
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	4943      	ldr	r1, [pc, #268]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b41      	ldr	r3, [pc, #260]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a40      	ldr	r2, [pc, #256]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a3d      	ldr	r2, [pc, #244]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fade 	bl	80012c8 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe fada 	bl	80012c8 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e066      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x530>
 8002d2e:	e05e      	b.n	8002dee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d30:	4b31      	ldr	r3, [pc, #196]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fac4 	bl	80012c8 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fe fac0 	bl	80012c8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e04c      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d56:	4b28      	ldr	r3, [pc, #160]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d62:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	4924      	ldr	r1, [pc, #144]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002d68:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <HAL_RCC_OscConfig+0x620>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]
 8002d6e:	e03e      	b.n	8002dee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e039      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_RCC_OscConfig+0x618>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d12c      	bne.n	8002dea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d123      	bne.n	8002dea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d11b      	bne.n	8002dea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d113      	bne.n	8002dea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	3b01      	subs	r3, #1
 8002de4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	019f800c 	.word	0x019f800c
 8002e00:	feeefffc 	.word	0xfeeefffc

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e11e      	b.n	800305a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b91      	ldr	r3, [pc, #580]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b8e      	ldr	r3, [pc, #568]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 020f 	bic.w	r2, r3, #15
 8002e32:	498c      	ldr	r1, [pc, #560]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b8a      	ldr	r3, [pc, #552]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e106      	b.n	800305a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d073      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d129      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e60:	4b81      	ldr	r3, [pc, #516]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0f4      	b.n	800305a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e70:	f000 f9d0 	bl	8003214 <RCC_GetSysClockFreqFromPLLSource>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4a7c      	ldr	r2, [pc, #496]	@ (800306c <HAL_RCC_ClockConfig+0x268>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d93f      	bls.n	8002efe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d033      	beq.n	8002efe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d12f      	bne.n	8002efe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e9e:	4b72      	ldr	r3, [pc, #456]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ea6:	4a70      	ldr	r2, [pc, #448]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e024      	b.n	8002efe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0c6      	b.n	800305a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ecc:	4b66      	ldr	r3, [pc, #408]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0be      	b.n	800305a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002edc:	f000 f8ce 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4a61      	ldr	r2, [pc, #388]	@ (800306c <HAL_RCC_ClockConfig+0x268>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d909      	bls.n	8002efe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eea:	4b5f      	ldr	r3, [pc, #380]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ef2:	4a5d      	ldr	r2, [pc, #372]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002efa:	2380      	movs	r3, #128	@ 0x80
 8002efc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b5a      	ldr	r3, [pc, #360]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4957      	ldr	r1, [pc, #348]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe f9da 	bl	80012c8 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe f9d6 	bl	80012c8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e095      	b.n	800305a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d023      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f58:	4b43      	ldr	r3, [pc, #268]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a42      	ldr	r2, [pc, #264]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f70:	4b3d      	ldr	r3, [pc, #244]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f78:	4a3b      	ldr	r2, [pc, #236]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b39      	ldr	r3, [pc, #228]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4936      	ldr	r1, [pc, #216]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b80      	cmp	r3, #128	@ 0x80
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f9a:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4a32      	ldr	r2, [pc, #200]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002fa0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fa4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d21d      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 020f 	bic.w	r2, r3, #15
 8002fbc:	4929      	ldr	r1, [pc, #164]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe f980 	bl	80012c8 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7fe f97c 	bl	80012c8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e03b      	b.n	800305a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1ed      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4917      	ldr	r1, [pc, #92]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301a:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	490f      	ldr	r1, [pc, #60]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800302e:	f000 f825 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <HAL_RCC_ClockConfig+0x264>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	490c      	ldr	r1, [pc, #48]	@ (8003070 <HAL_RCC_ClockConfig+0x26c>)
 8003040:	5ccb      	ldrb	r3, [r1, r3]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a0a      	ldr	r2, [pc, #40]	@ (8003074 <HAL_RCC_ClockConfig+0x270>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800304e:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <HAL_RCC_ClockConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd ff92 	bl	8000f7c <HAL_InitTick>
 8003058:	4603      	mov	r3, r0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40022000 	.word	0x40022000
 8003068:	40021000 	.word	0x40021000
 800306c:	04c4b400 	.word	0x04c4b400
 8003070:	0800a464 	.word	0x0800a464
 8003074:	20000000 	.word	0x20000000
 8003078:	20000004 	.word	0x20000004

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003082:	4b2c      	ldr	r3, [pc, #176]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b04      	cmp	r3, #4
 800308c:	d102      	bne.n	8003094 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800308e:	4b2a      	ldr	r3, [pc, #168]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	e047      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003094:	4b27      	ldr	r3, [pc, #156]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030a0:	4b26      	ldr	r3, [pc, #152]	@ (800313c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e03e      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d136      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030b2:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3301      	adds	r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d10c      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030d0:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	4a16      	ldr	r2, [pc, #88]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030da:	68d2      	ldr	r2, [r2, #12]
 80030dc:	0a12      	lsrs	r2, r2, #8
 80030de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	617b      	str	r3, [r7, #20]
      break;
 80030e8:	e00c      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ea:	4a13      	ldr	r2, [pc, #76]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f4:	68d2      	ldr	r2, [r2, #12]
 80030f6:	0a12      	lsrs	r2, r2, #8
 80030f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
      break;
 8003102:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	0e5b      	lsrs	r3, r3, #25
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e001      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003124:	693b      	ldr	r3, [r7, #16]
}
 8003126:	4618      	mov	r0, r3
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	00f42400 	.word	0x00f42400
 800313c:	016e3600 	.word	0x016e3600

08003140 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <HAL_RCC_GetHCLKFreq+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800315c:	f7ff fff0 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4904      	ldr	r1, [pc, #16]	@ (8003180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	0800a474 	.word	0x0800a474

08003184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003188:	f7ff ffda 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0adb      	lsrs	r3, r3, #11
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4904      	ldr	r1, [pc, #16]	@ (80031ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	0800a474 	.word	0x0800a474

080031b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	220f      	movs	r2, #15
 80031be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80031c0:	4b12      	ldr	r3, [pc, #72]	@ (800320c <HAL_RCC_GetClockConfig+0x5c>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0203 	and.w	r2, r3, #3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80031cc:	4b0f      	ldr	r3, [pc, #60]	@ (800320c <HAL_RCC_GetClockConfig+0x5c>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <HAL_RCC_GetClockConfig+0x5c>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_RCC_GetClockConfig+0x5c>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80031f2:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <HAL_RCC_GetClockConfig+0x60>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	601a      	str	r2, [r3, #0]
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	40022000 	.word	0x40022000

08003214 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800321a:	4b1e      	ldr	r3, [pc, #120]	@ (8003294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d10c      	bne.n	8003252 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	4a14      	ldr	r2, [pc, #80]	@ (8003294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003242:	68d2      	ldr	r2, [r2, #12]
 8003244:	0a12      	lsrs	r2, r2, #8
 8003246:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	617b      	str	r3, [r7, #20]
    break;
 8003250:	e00c      	b.n	800326c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003252:	4a12      	ldr	r2, [pc, #72]	@ (800329c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4a0e      	ldr	r2, [pc, #56]	@ (8003294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800325c:	68d2      	ldr	r2, [r2, #12]
 800325e:	0a12      	lsrs	r2, r2, #8
 8003260:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]
    break;
 800326a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800326c:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0e5b      	lsrs	r3, r3, #25
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	3301      	adds	r3, #1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003286:	687b      	ldr	r3, [r7, #4]
}
 8003288:	4618      	mov	r0, r3
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40021000 	.word	0x40021000
 8003298:	016e3600 	.word	0x016e3600
 800329c:	00f42400 	.word	0x00f42400

080032a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a8:	2300      	movs	r3, #0
 80032aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ac:	2300      	movs	r3, #0
 80032ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8098 	beq.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c2:	4b43      	ldr	r3, [pc, #268]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b40      	ldr	r3, [pc, #256]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d2:	4a3f      	ldr	r2, [pc, #252]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032da:	4b3d      	ldr	r3, [pc, #244]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ea:	4b3a      	ldr	r3, [pc, #232]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a39      	ldr	r2, [pc, #228]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032f6:	f7fd ffe7 	bl	80012c8 <HAL_GetTick>
 80032fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032fc:	e009      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fe:	f7fd ffe3 	bl	80012c8 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d902      	bls.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	74fb      	strb	r3, [r7, #19]
        break;
 8003310:	e005      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003312:	4b30      	ldr	r3, [pc, #192]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ef      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d159      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003324:	4b2a      	ldr	r3, [pc, #168]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01e      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	429a      	cmp	r2, r3
 800333e:	d019      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003340:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800334c:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003352:	4a1f      	ldr	r2, [pc, #124]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800335c:	4b1c      	ldr	r3, [pc, #112]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003362:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800336c:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fd ffa3 	bl	80012c8 <HAL_GetTick>
 8003382:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003384:	e00b      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fd ff9f 	bl	80012c8 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d902      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	74fb      	strb	r3, [r7, #19]
            break;
 800339c:	e006      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339e:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ec      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b2:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c0:	4903      	ldr	r1, [pc, #12]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033c8:	e008      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	74bb      	strb	r3, [r7, #18]
 80033ce:	e005      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033dc:	7c7b      	ldrb	r3, [r7, #17]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e2:	4ba7      	ldr	r3, [pc, #668]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	4aa6      	ldr	r2, [pc, #664]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033fa:	4ba1      	ldr	r3, [pc, #644]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003400:	f023 0203 	bic.w	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	499d      	ldr	r1, [pc, #628]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800341c:	4b98      	ldr	r3, [pc, #608]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	f023 020c 	bic.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4995      	ldr	r1, [pc, #596]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800343e:	4b90      	ldr	r3, [pc, #576]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003444:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	498c      	ldr	r1, [pc, #560]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003460:	4b87      	ldr	r3, [pc, #540]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003466:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	4984      	ldr	r1, [pc, #528]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003482:	4b7f      	ldr	r3, [pc, #508]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	497b      	ldr	r1, [pc, #492]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034a4:	4b76      	ldr	r3, [pc, #472]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	4973      	ldr	r1, [pc, #460]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	496a      	ldr	r1, [pc, #424]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034e8:	4b65      	ldr	r3, [pc, #404]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4962      	ldr	r1, [pc, #392]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800350a:	4b5d      	ldr	r3, [pc, #372]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	4959      	ldr	r1, [pc, #356]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800352c:	4b54      	ldr	r3, [pc, #336]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800352e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353a:	4951      	ldr	r1, [pc, #324]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354e:	4b4c      	ldr	r3, [pc, #304]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	4948      	ldr	r1, [pc, #288]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b43      	ldr	r3, [pc, #268]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	4940      	ldr	r1, [pc, #256]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003590:	4b3b      	ldr	r3, [pc, #236]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a3a      	ldr	r2, [pc, #232]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800359a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d015      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035a8:	4b35      	ldr	r3, [pc, #212]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	4932      	ldr	r1, [pc, #200]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c6:	d105      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	4924      	ldr	r1, [pc, #144]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003600:	4b1f      	ldr	r3, [pc, #124]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a1e      	ldr	r2, [pc, #120]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800360a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	4916      	ldr	r1, [pc, #88]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003638:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a10      	ldr	r2, [pc, #64]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003642:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d019      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	4908      	ldr	r1, [pc, #32]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800366e:	d109      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b03      	ldr	r3, [pc, #12]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a02      	ldr	r2, [pc, #8]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
 800367c:	e002      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003690:	4b29      	ldr	r3, [pc, #164]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	4926      	ldr	r1, [pc, #152]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ae:	d105      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036b0:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a20      	ldr	r2, [pc, #128]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d015      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80036c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d6:	4918      	ldr	r1, [pc, #96]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e6:	d105      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036e8:	4b13      	ldr	r3, [pc, #76]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a12      	ldr	r2, [pc, #72]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003700:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370e:	490a      	ldr	r1, [pc, #40]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800371e:	d105      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a04      	ldr	r2, [pc, #16]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800372a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800372c:	7cbb      	ldrb	r3, [r7, #18]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000

0800373c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e049      	b.n	80037e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f841 	bl	80037ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 fa30 	bl	8003be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d001      	beq.n	8003818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e054      	b.n	80038c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a26      	ldr	r2, [pc, #152]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d022      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003842:	d01d      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a22      	ldr	r2, [pc, #136]	@ (80038d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a21      	ldr	r2, [pc, #132]	@ (80038d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1f      	ldr	r2, [pc, #124]	@ (80038dc <HAL_TIM_Base_Start_IT+0xdc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1e      	ldr	r2, [pc, #120]	@ (80038e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1c      	ldr	r2, [pc, #112]	@ (80038e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1b      	ldr	r2, [pc, #108]	@ (80038e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d115      	bne.n	80038ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	4b19      	ldr	r3, [pc, #100]	@ (80038ec <HAL_TIM_Base_Start_IT+0xec>)
 8003888:	4013      	ands	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d015      	beq.n	80038be <HAL_TIM_Base_Start_IT+0xbe>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003898:	d011      	beq.n	80038be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	e008      	b.n	80038be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e000      	b.n	80038c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40013400 	.word	0x40013400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40015000 	.word	0x40015000
 80038ec:	00010007 	.word	0x00010007

080038f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d020      	beq.n	8003954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01b      	beq.n	8003954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0202 	mvn.w	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f931 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f923 	bl	8003b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f934 	bl	8003bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d020      	beq.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01b      	beq.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0204 	mvn.w	r2, #4
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f90b 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8fd 	bl	8003b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f90e 	bl	8003bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d020      	beq.n	80039ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0208 	mvn.w	r2, #8
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2204      	movs	r2, #4
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8e5 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8d7 	bl	8003b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8e8 	bl	8003bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0210 	mvn.w	r2, #16
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8bf 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8b1 	bl	8003b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f8c2 	bl	8003bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0201 	mvn.w	r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd f952 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00c      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f969 	bl	8003d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00c      	beq.n	8003aae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f961 	bl	8003d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f87c 	bl	8003bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00c      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f06f 0220 	mvn.w	r2, #32
 8003aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f929 	bl	8003d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00c      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f935 	bl	8003d84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00c      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f92d 	bl	8003d98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f925 	bl	8003dac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f91d 	bl	8003dc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8003d24 <TIM_Base_SetConfig+0x144>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d017      	beq.n	8003c28 <TIM_Base_SetConfig+0x48>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfe:	d013      	beq.n	8003c28 <TIM_Base_SetConfig+0x48>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a49      	ldr	r2, [pc, #292]	@ (8003d28 <TIM_Base_SetConfig+0x148>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00f      	beq.n	8003c28 <TIM_Base_SetConfig+0x48>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a48      	ldr	r2, [pc, #288]	@ (8003d2c <TIM_Base_SetConfig+0x14c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <TIM_Base_SetConfig+0x48>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a47      	ldr	r2, [pc, #284]	@ (8003d30 <TIM_Base_SetConfig+0x150>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_Base_SetConfig+0x48>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a46      	ldr	r2, [pc, #280]	@ (8003d34 <TIM_Base_SetConfig+0x154>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0x48>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a45      	ldr	r2, [pc, #276]	@ (8003d38 <TIM_Base_SetConfig+0x158>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a39      	ldr	r2, [pc, #228]	@ (8003d24 <TIM_Base_SetConfig+0x144>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d023      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c48:	d01f      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a36      	ldr	r2, [pc, #216]	@ (8003d28 <TIM_Base_SetConfig+0x148>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01b      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a35      	ldr	r2, [pc, #212]	@ (8003d2c <TIM_Base_SetConfig+0x14c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d017      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a34      	ldr	r2, [pc, #208]	@ (8003d30 <TIM_Base_SetConfig+0x150>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a33      	ldr	r2, [pc, #204]	@ (8003d34 <TIM_Base_SetConfig+0x154>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00f      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a33      	ldr	r2, [pc, #204]	@ (8003d3c <TIM_Base_SetConfig+0x15c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a32      	ldr	r2, [pc, #200]	@ (8003d40 <TIM_Base_SetConfig+0x160>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a31      	ldr	r2, [pc, #196]	@ (8003d44 <TIM_Base_SetConfig+0x164>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_Base_SetConfig+0xaa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2c      	ldr	r2, [pc, #176]	@ (8003d38 <TIM_Base_SetConfig+0x158>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d108      	bne.n	8003c9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a18      	ldr	r2, [pc, #96]	@ (8003d24 <TIM_Base_SetConfig+0x144>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <TIM_Base_SetConfig+0x110>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1a      	ldr	r2, [pc, #104]	@ (8003d34 <TIM_Base_SetConfig+0x154>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00f      	beq.n	8003cf0 <TIM_Base_SetConfig+0x110>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <TIM_Base_SetConfig+0x15c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_Base_SetConfig+0x110>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a19      	ldr	r2, [pc, #100]	@ (8003d40 <TIM_Base_SetConfig+0x160>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_Base_SetConfig+0x110>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a18      	ldr	r2, [pc, #96]	@ (8003d44 <TIM_Base_SetConfig+0x164>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0x110>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a13      	ldr	r2, [pc, #76]	@ (8003d38 <TIM_Base_SetConfig+0x158>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d103      	bne.n	8003cf8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d105      	bne.n	8003d16 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f023 0201 	bic.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	611a      	str	r2, [r3, #16]
  }
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40013400 	.word	0x40013400
 8003d38:	40015000 	.word	0x40015000
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800

08003d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e042      	b.n	8003e6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fd f85f 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2224      	movs	r2, #36	@ 0x24
 8003e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0201 	bic.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 ff14 	bl	8004c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fc15 	bl	8004654 <UART_SetConfig>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e01b      	b.n	8003e6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 ff93 	bl	8004d90 <UART_CheckIdleState>
 8003e6a:	4603      	mov	r3, r0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	@ 0x28
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d17b      	bne.n	8003f86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_UART_Transmit+0x26>
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e074      	b.n	8003f88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2221      	movs	r2, #33	@ 0x21
 8003eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eae:	f7fd fa0b 	bl	80012c8 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	88fa      	ldrh	r2, [r7, #6]
 8003ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ecc:	d108      	bne.n	8003ee0 <HAL_UART_Transmit+0x6c>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e003      	b.n	8003ee8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ee8:	e030      	b.n	8003f4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2180      	movs	r1, #128	@ 0x80
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fff5 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e03d      	b.n	8003f88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	3302      	adds	r3, #2
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	e007      	b.n	8003f3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	3301      	adds	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1c8      	bne.n	8003eea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2140      	movs	r1, #64	@ 0x40
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 ffbe 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e006      	b.n	8003f88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b0ba      	sub	sp, #232	@ 0xe8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003fba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003fc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11b      	bne.n	8004004 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d015      	beq.n	8004004 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8300 	beq.w	80045fa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
      }
      return;
 8004002:	e2fa      	b.n	80045fa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8123 	beq.w	8004254 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800400e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004012:	4b8d      	ldr	r3, [pc, #564]	@ (8004248 <HAL_UART_IRQHandler+0x2b8>)
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800401a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800401e:	4b8b      	ldr	r3, [pc, #556]	@ (800424c <HAL_UART_IRQHandler+0x2bc>)
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8116 	beq.w	8004254 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d011      	beq.n	8004058 <HAL_UART_IRQHandler+0xc8>
 8004034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2201      	movs	r2, #1
 8004046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d011      	beq.n	8004088 <HAL_UART_IRQHandler+0xf8>
 8004064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00b      	beq.n	8004088 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2202      	movs	r2, #2
 8004076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	f043 0204 	orr.w	r2, r3, #4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d011      	beq.n	80040b8 <HAL_UART_IRQHandler+0x128>
 8004094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00b      	beq.n	80040b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2204      	movs	r2, #4
 80040a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	f043 0202 	orr.w	r2, r3, #2
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d017      	beq.n	80040f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004248 <HAL_UART_IRQHandler+0x2b8>)
 80040d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2208      	movs	r2, #8
 80040e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ea:	f043 0208 	orr.w	r2, r3, #8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d012      	beq.n	8004126 <HAL_UART_IRQHandler+0x196>
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004104:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00c      	beq.n	8004126 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8266 	beq.w	80045fe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d013      	beq.n	8004166 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800413e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800414a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800414e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417a:	2b40      	cmp	r3, #64	@ 0x40
 800417c:	d005      	beq.n	800418a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800417e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004182:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004186:	2b00      	cmp	r3, #0
 8004188:	d054      	beq.n	8004234 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 ff17 	bl	8004fbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b40      	cmp	r3, #64	@ 0x40
 800419c:	d146      	bne.n	800422c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1d9      	bne.n	800419e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d017      	beq.n	8004224 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041fa:	4a15      	ldr	r2, [pc, #84]	@ (8004250 <HAL_UART_IRQHandler+0x2c0>)
 80041fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd f9a4 	bl	8001552 <HAL_DMA_Abort_IT>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d019      	beq.n	8004244 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800421e:	4610      	mov	r0, r2
 8004220:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004222:	e00f      	b.n	8004244 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f9ff 	bl	8004628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422a:	e00b      	b.n	8004244 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f9fb 	bl	8004628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004232:	e007      	b.n	8004244 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f9f7 	bl	8004628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004242:	e1dc      	b.n	80045fe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	bf00      	nop
    return;
 8004246:	e1da      	b.n	80045fe <HAL_UART_IRQHandler+0x66e>
 8004248:	10000001 	.word	0x10000001
 800424c:	04000120 	.word	0x04000120
 8004250:	0800508b 	.word	0x0800508b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004258:	2b01      	cmp	r3, #1
 800425a:	f040 8170 	bne.w	800453e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8169 	beq.w	800453e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8162 	beq.w	800453e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2210      	movs	r2, #16
 8004280:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428c:	2b40      	cmp	r3, #64	@ 0x40
 800428e:	f040 80d8 	bne.w	8004442 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80af 	beq.w	8004408 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042b4:	429a      	cmp	r2, r3
 80042b6:	f080 80a7 	bcs.w	8004408 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f040 8087 	bne.w	80043e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004306:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800430e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800431a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1da      	bne.n	80042d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3308      	adds	r3, #8
 8004328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800434a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800434e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e1      	bne.n	8004322 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800436e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e3      	bne.n	800435e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b4:	f023 0310 	bic.w	r3, r3, #16
 80043b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e4      	bne.n	80043a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fd f85d 	bl	80014a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f91b 	bl	800463c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004406:	e0fc      	b.n	8004602 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800440e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004412:	429a      	cmp	r2, r3
 8004414:	f040 80f5 	bne.w	8004602 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b20      	cmp	r3, #32
 8004428:	f040 80eb 	bne.w	8004602 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8fe 	bl	800463c <HAL_UARTEx_RxEventCallback>
      return;
 8004440:	e0df      	b.n	8004602 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800444e:	b29b      	uxth	r3, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80d1 	beq.w	8004606 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80cc 	beq.w	8004606 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800447c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004490:	647b      	str	r3, [r7, #68]	@ 0x44
 8004492:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004496:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800449e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e4      	bne.n	800446e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	623b      	str	r3, [r7, #32]
   return(result);
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e1      	bne.n	80044a4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	60fb      	str	r3, [r7, #12]
   return(result);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f023 0310 	bic.w	r3, r3, #16
 8004508:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	69b9      	ldr	r1, [r7, #24]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	617b      	str	r3, [r7, #20]
   return(result);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e4      	bne.n	80044f4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f880 	bl	800463c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800453c:	e063      	b.n	8004606 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00e      	beq.n	8004568 <HAL_UART_IRQHandler+0x5d8>
 800454a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800454e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800455e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fdcf 	bl	8005104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004566:	e051      	b.n	800460c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004570:	2b00      	cmp	r3, #0
 8004572:	d014      	beq.n	800459e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004584:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004590:	2b00      	cmp	r3, #0
 8004592:	d03a      	beq.n	800460a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
    }
    return;
 800459c:	e035      	b.n	800460a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_UART_IRQHandler+0x62e>
 80045aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fd79 	bl	80050ae <UART_EndTransmit_IT>
    return;
 80045bc:	e026      	b.n	800460c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_UART_IRQHandler+0x64e>
 80045ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fda8 	bl	800512c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045dc:	e016      	b.n	800460c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HAL_UART_IRQHandler+0x67c>
 80045ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	da0c      	bge.n	800460c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fd90 	bl	8005118 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045f8:	e008      	b.n	800460c <HAL_UART_IRQHandler+0x67c>
      return;
 80045fa:	bf00      	nop
 80045fc:	e006      	b.n	800460c <HAL_UART_IRQHandler+0x67c>
    return;
 80045fe:	bf00      	nop
 8004600:	e004      	b.n	800460c <HAL_UART_IRQHandler+0x67c>
      return;
 8004602:	bf00      	nop
 8004604:	e002      	b.n	800460c <HAL_UART_IRQHandler+0x67c>
      return;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <HAL_UART_IRQHandler+0x67c>
    return;
 800460a:	bf00      	nop
  }
}
 800460c:	37e8      	adds	r7, #232	@ 0xe8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop

08004614 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004658:	b08c      	sub	sp, #48	@ 0x30
 800465a:	af00      	add	r7, sp, #0
 800465c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	431a      	orrs	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	431a      	orrs	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	4313      	orrs	r3, r2
 800467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4baa      	ldr	r3, [pc, #680]	@ (800492c <UART_SetConfig+0x2d8>)
 8004684:	4013      	ands	r3, r2
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468c:	430b      	orrs	r3, r1
 800468e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a9f      	ldr	r2, [pc, #636]	@ (8004930 <UART_SetConfig+0x2dc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046bc:	4313      	orrs	r3, r2
 80046be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80046ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	f023 010f 	bic.w	r1, r3, #15
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a90      	ldr	r2, [pc, #576]	@ (8004934 <UART_SetConfig+0x2e0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d125      	bne.n	8004744 <UART_SetConfig+0xf0>
 80046f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004938 <UART_SetConfig+0x2e4>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b03      	cmp	r3, #3
 8004704:	d81a      	bhi.n	800473c <UART_SetConfig+0xe8>
 8004706:	a201      	add	r2, pc, #4	@ (adr r2, 800470c <UART_SetConfig+0xb8>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	0800471d 	.word	0x0800471d
 8004710:	0800472d 	.word	0x0800472d
 8004714:	08004725 	.word	0x08004725
 8004718:	08004735 	.word	0x08004735
 800471c:	2301      	movs	r3, #1
 800471e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004722:	e116      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004724:	2302      	movs	r3, #2
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800472a:	e112      	b.n	8004952 <UART_SetConfig+0x2fe>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004732:	e10e      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473a:	e10a      	b.n	8004952 <UART_SetConfig+0x2fe>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004742:	e106      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a7c      	ldr	r2, [pc, #496]	@ (800493c <UART_SetConfig+0x2e8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d138      	bne.n	80047c0 <UART_SetConfig+0x16c>
 800474e:	4b7a      	ldr	r3, [pc, #488]	@ (8004938 <UART_SetConfig+0x2e4>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b0c      	cmp	r3, #12
 800475a:	d82d      	bhi.n	80047b8 <UART_SetConfig+0x164>
 800475c:	a201      	add	r2, pc, #4	@ (adr r2, 8004764 <UART_SetConfig+0x110>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	08004799 	.word	0x08004799
 8004768:	080047b9 	.word	0x080047b9
 800476c:	080047b9 	.word	0x080047b9
 8004770:	080047b9 	.word	0x080047b9
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047b9 	.word	0x080047b9
 800477c:	080047b9 	.word	0x080047b9
 8004780:	080047b9 	.word	0x080047b9
 8004784:	080047a1 	.word	0x080047a1
 8004788:	080047b9 	.word	0x080047b9
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	2300      	movs	r3, #0
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800479e:	e0d8      	b.n	8004952 <UART_SetConfig+0x2fe>
 80047a0:	2302      	movs	r3, #2
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a6:	e0d4      	b.n	8004952 <UART_SetConfig+0x2fe>
 80047a8:	2304      	movs	r3, #4
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ae:	e0d0      	b.n	8004952 <UART_SetConfig+0x2fe>
 80047b0:	2308      	movs	r3, #8
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b6:	e0cc      	b.n	8004952 <UART_SetConfig+0x2fe>
 80047b8:	2310      	movs	r3, #16
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047be:	e0c8      	b.n	8004952 <UART_SetConfig+0x2fe>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004940 <UART_SetConfig+0x2ec>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d125      	bne.n	8004816 <UART_SetConfig+0x1c2>
 80047ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004938 <UART_SetConfig+0x2e4>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047d4:	2b30      	cmp	r3, #48	@ 0x30
 80047d6:	d016      	beq.n	8004806 <UART_SetConfig+0x1b2>
 80047d8:	2b30      	cmp	r3, #48	@ 0x30
 80047da:	d818      	bhi.n	800480e <UART_SetConfig+0x1ba>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d00a      	beq.n	80047f6 <UART_SetConfig+0x1a2>
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d814      	bhi.n	800480e <UART_SetConfig+0x1ba>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <UART_SetConfig+0x19a>
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d008      	beq.n	80047fe <UART_SetConfig+0x1aa>
 80047ec:	e00f      	b.n	800480e <UART_SetConfig+0x1ba>
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f4:	e0ad      	b.n	8004952 <UART_SetConfig+0x2fe>
 80047f6:	2302      	movs	r3, #2
 80047f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047fc:	e0a9      	b.n	8004952 <UART_SetConfig+0x2fe>
 80047fe:	2304      	movs	r3, #4
 8004800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004804:	e0a5      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004806:	2308      	movs	r3, #8
 8004808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480c:	e0a1      	b.n	8004952 <UART_SetConfig+0x2fe>
 800480e:	2310      	movs	r3, #16
 8004810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004814:	e09d      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a4a      	ldr	r2, [pc, #296]	@ (8004944 <UART_SetConfig+0x2f0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d125      	bne.n	800486c <UART_SetConfig+0x218>
 8004820:	4b45      	ldr	r3, [pc, #276]	@ (8004938 <UART_SetConfig+0x2e4>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004826:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800482a:	2bc0      	cmp	r3, #192	@ 0xc0
 800482c:	d016      	beq.n	800485c <UART_SetConfig+0x208>
 800482e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004830:	d818      	bhi.n	8004864 <UART_SetConfig+0x210>
 8004832:	2b80      	cmp	r3, #128	@ 0x80
 8004834:	d00a      	beq.n	800484c <UART_SetConfig+0x1f8>
 8004836:	2b80      	cmp	r3, #128	@ 0x80
 8004838:	d814      	bhi.n	8004864 <UART_SetConfig+0x210>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <UART_SetConfig+0x1f0>
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	d008      	beq.n	8004854 <UART_SetConfig+0x200>
 8004842:	e00f      	b.n	8004864 <UART_SetConfig+0x210>
 8004844:	2300      	movs	r3, #0
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484a:	e082      	b.n	8004952 <UART_SetConfig+0x2fe>
 800484c:	2302      	movs	r3, #2
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004852:	e07e      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004854:	2304      	movs	r3, #4
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485a:	e07a      	b.n	8004952 <UART_SetConfig+0x2fe>
 800485c:	2308      	movs	r3, #8
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004862:	e076      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004864:	2310      	movs	r3, #16
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486a:	e072      	b.n	8004952 <UART_SetConfig+0x2fe>
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a35      	ldr	r2, [pc, #212]	@ (8004948 <UART_SetConfig+0x2f4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d12a      	bne.n	80048cc <UART_SetConfig+0x278>
 8004876:	4b30      	ldr	r3, [pc, #192]	@ (8004938 <UART_SetConfig+0x2e4>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004884:	d01a      	beq.n	80048bc <UART_SetConfig+0x268>
 8004886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800488a:	d81b      	bhi.n	80048c4 <UART_SetConfig+0x270>
 800488c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004890:	d00c      	beq.n	80048ac <UART_SetConfig+0x258>
 8004892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004896:	d815      	bhi.n	80048c4 <UART_SetConfig+0x270>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <UART_SetConfig+0x250>
 800489c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048a0:	d008      	beq.n	80048b4 <UART_SetConfig+0x260>
 80048a2:	e00f      	b.n	80048c4 <UART_SetConfig+0x270>
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048aa:	e052      	b.n	8004952 <UART_SetConfig+0x2fe>
 80048ac:	2302      	movs	r3, #2
 80048ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b2:	e04e      	b.n	8004952 <UART_SetConfig+0x2fe>
 80048b4:	2304      	movs	r3, #4
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	e04a      	b.n	8004952 <UART_SetConfig+0x2fe>
 80048bc:	2308      	movs	r3, #8
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c2:	e046      	b.n	8004952 <UART_SetConfig+0x2fe>
 80048c4:	2310      	movs	r3, #16
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ca:	e042      	b.n	8004952 <UART_SetConfig+0x2fe>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a17      	ldr	r2, [pc, #92]	@ (8004930 <UART_SetConfig+0x2dc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d13a      	bne.n	800494c <UART_SetConfig+0x2f8>
 80048d6:	4b18      	ldr	r3, [pc, #96]	@ (8004938 <UART_SetConfig+0x2e4>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e4:	d01a      	beq.n	800491c <UART_SetConfig+0x2c8>
 80048e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048ea:	d81b      	bhi.n	8004924 <UART_SetConfig+0x2d0>
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f0:	d00c      	beq.n	800490c <UART_SetConfig+0x2b8>
 80048f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f6:	d815      	bhi.n	8004924 <UART_SetConfig+0x2d0>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <UART_SetConfig+0x2b0>
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004900:	d008      	beq.n	8004914 <UART_SetConfig+0x2c0>
 8004902:	e00f      	b.n	8004924 <UART_SetConfig+0x2d0>
 8004904:	2300      	movs	r3, #0
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490a:	e022      	b.n	8004952 <UART_SetConfig+0x2fe>
 800490c:	2302      	movs	r3, #2
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004912:	e01e      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004914:	2304      	movs	r3, #4
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491a:	e01a      	b.n	8004952 <UART_SetConfig+0x2fe>
 800491c:	2308      	movs	r3, #8
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004922:	e016      	b.n	8004952 <UART_SetConfig+0x2fe>
 8004924:	2310      	movs	r3, #16
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492a:	e012      	b.n	8004952 <UART_SetConfig+0x2fe>
 800492c:	cfff69f3 	.word	0xcfff69f3
 8004930:	40008000 	.word	0x40008000
 8004934:	40013800 	.word	0x40013800
 8004938:	40021000 	.word	0x40021000
 800493c:	40004400 	.word	0x40004400
 8004940:	40004800 	.word	0x40004800
 8004944:	40004c00 	.word	0x40004c00
 8004948:	40005000 	.word	0x40005000
 800494c:	2310      	movs	r3, #16
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4aae      	ldr	r2, [pc, #696]	@ (8004c10 <UART_SetConfig+0x5bc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	f040 8097 	bne.w	8004a8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800495e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004962:	2b08      	cmp	r3, #8
 8004964:	d823      	bhi.n	80049ae <UART_SetConfig+0x35a>
 8004966:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <UART_SetConfig+0x318>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004991 	.word	0x08004991
 8004970:	080049af 	.word	0x080049af
 8004974:	08004999 	.word	0x08004999
 8004978:	080049af 	.word	0x080049af
 800497c:	0800499f 	.word	0x0800499f
 8004980:	080049af 	.word	0x080049af
 8004984:	080049af 	.word	0x080049af
 8004988:	080049af 	.word	0x080049af
 800498c:	080049a7 	.word	0x080049a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004990:	f7fe fbe2 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8004994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004996:	e010      	b.n	80049ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004998:	4b9e      	ldr	r3, [pc, #632]	@ (8004c14 <UART_SetConfig+0x5c0>)
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800499c:	e00d      	b.n	80049ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499e:	f7fe fb6d 	bl	800307c <HAL_RCC_GetSysClockFreq>
 80049a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049a4:	e009      	b.n	80049ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049ac:	e005      	b.n	80049ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8130 	beq.w	8004c22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	4a94      	ldr	r2, [pc, #592]	@ (8004c18 <UART_SetConfig+0x5c4>)
 80049c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049cc:	461a      	mov	r2, r3
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d305      	bcc.n	80049f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d903      	bls.n	80049fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049f8:	e113      	b.n	8004c22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	2200      	movs	r2, #0
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	60fa      	str	r2, [r7, #12]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	4a84      	ldr	r2, [pc, #528]	@ (8004c18 <UART_SetConfig+0x5c4>)
 8004a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2200      	movs	r2, #0
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a1c:	f7fb fc50 	bl	80002c0 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	020b      	lsls	r3, r1, #8
 8004a32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a36:	0202      	lsls	r2, r0, #8
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	6849      	ldr	r1, [r1, #4]
 8004a3c:	0849      	lsrs	r1, r1, #1
 8004a3e:	2000      	movs	r0, #0
 8004a40:	460c      	mov	r4, r1
 8004a42:	4605      	mov	r5, r0
 8004a44:	eb12 0804 	adds.w	r8, r2, r4
 8004a48:	eb43 0905 	adc.w	r9, r3, r5
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	469a      	mov	sl, r3
 8004a54:	4693      	mov	fp, r2
 8004a56:	4652      	mov	r2, sl
 8004a58:	465b      	mov	r3, fp
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	f7fb fc2f 	bl	80002c0 <__aeabi_uldivmod>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4613      	mov	r3, r2
 8004a68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a70:	d308      	bcc.n	8004a84 <UART_SetConfig+0x430>
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a78:	d204      	bcs.n	8004a84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a3a      	ldr	r2, [r7, #32]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	e0ce      	b.n	8004c22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a8a:	e0ca      	b.n	8004c22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a94:	d166      	bne.n	8004b64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d827      	bhi.n	8004aee <UART_SetConfig+0x49a>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <UART_SetConfig+0x450>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ad9 	.word	0x08004ad9
 8004ab0:	08004aef 	.word	0x08004aef
 8004ab4:	08004adf 	.word	0x08004adf
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004aef 	.word	0x08004aef
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004ae7 	.word	0x08004ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac8:	f7fe fb46 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8004acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ace:	e014      	b.n	8004afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad0:	f7fe fb58 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 8004ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ad6:	e010      	b.n	8004afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8004c14 <UART_SetConfig+0x5c0>)
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004adc:	e00d      	b.n	8004afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ade:	f7fe facd 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ae4:	e009      	b.n	8004afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004aec:	e005      	b.n	8004afa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8090 	beq.w	8004c22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	4a44      	ldr	r2, [pc, #272]	@ (8004c18 <UART_SetConfig+0x5c4>)
 8004b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b14:	005a      	lsls	r2, r3, #1
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	441a      	add	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	d916      	bls.n	8004b5c <UART_SetConfig+0x508>
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b34:	d212      	bcs.n	8004b5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f023 030f 	bic.w	r3, r3, #15
 8004b3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	8bfb      	ldrh	r3, [r7, #30]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	8bfa      	ldrh	r2, [r7, #30]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	e062      	b.n	8004c22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b62:	e05e      	b.n	8004c22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d828      	bhi.n	8004bbe <UART_SetConfig+0x56a>
 8004b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <UART_SetConfig+0x520>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004ba1 	.word	0x08004ba1
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004bbf 	.word	0x08004bbf
 8004b84:	08004baf 	.word	0x08004baf
 8004b88:	08004bbf 	.word	0x08004bbf
 8004b8c:	08004bbf 	.word	0x08004bbf
 8004b90:	08004bbf 	.word	0x08004bbf
 8004b94:	08004bb7 	.word	0x08004bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b98:	f7fe fade 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8004b9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b9e:	e014      	b.n	8004bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba0:	f7fe faf0 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 8004ba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ba6:	e010      	b.n	8004bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <UART_SetConfig+0x5c0>)
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bac:	e00d      	b.n	8004bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bae:	f7fe fa65 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004bb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bb4:	e009      	b.n	8004bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bbc:	e005      	b.n	8004bca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d028      	beq.n	8004c22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	4a10      	ldr	r2, [pc, #64]	@ (8004c18 <UART_SetConfig+0x5c4>)
 8004bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	441a      	add	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2b0f      	cmp	r3, #15
 8004bf8:	d910      	bls.n	8004c1c <UART_SetConfig+0x5c8>
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c00:	d20c      	bcs.n	8004c1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	e009      	b.n	8004c22 <UART_SetConfig+0x5ce>
 8004c0e:	bf00      	nop
 8004c10:	40008000 	.word	0x40008000
 8004c14:	00f42400 	.word	0x00f42400
 8004c18:	0800a48c 	.word	0x0800a48c
      }
      else
      {
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3730      	adds	r7, #48	@ 0x30
 8004c46:	46bd      	mov	sp, r7
 8004c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01a      	beq.n	8004d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d4a:	d10a      	bne.n	8004d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
  }
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b098      	sub	sp, #96	@ 0x60
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da0:	f7fc fa92 	bl	80012c8 <HAL_GetTick>
 8004da4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d12f      	bne.n	8004e14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f88e 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d022      	beq.n	8004e14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e6      	bne.n	8004dce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e063      	b.n	8004edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d149      	bne.n	8004eb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f857 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d03c      	beq.n	8004eb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	623b      	str	r3, [r7, #32]
   return(result);
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e6      	bne.n	8004e3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3308      	adds	r3, #8
 8004e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e8e:	61fa      	str	r2, [r7, #28]
 8004e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	69b9      	ldr	r1, [r7, #24]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e012      	b.n	8004edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3758      	adds	r7, #88	@ 0x58
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef4:	e04f      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004efc:	d04b      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efe:	f7fc f9e3 	bl	80012c8 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e04e      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d037      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b80      	cmp	r3, #128	@ 0x80
 8004f2a:	d034      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b40      	cmp	r3, #64	@ 0x40
 8004f30:	d031      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d110      	bne.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2208      	movs	r2, #8
 8004f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f838 	bl	8004fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2208      	movs	r2, #8
 8004f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e029      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f70:	d111      	bne.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f81e 	bl	8004fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e00f      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d0a0      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b095      	sub	sp, #84	@ 0x54
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fe6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	61fb      	str	r3, [r7, #28]
   return(result);
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800501c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800501e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e3      	bne.n	8004ff8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d118      	bne.n	800506a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	60bb      	str	r3, [r7, #8]
   return(result);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f023 0310 	bic.w	r3, r3, #16
 800504c:	647b      	str	r3, [r7, #68]	@ 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6979      	ldr	r1, [r7, #20]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e6      	bne.n	8005038 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800507e:	bf00      	nop
 8005080:	3754      	adds	r7, #84	@ 0x54
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7ff fac1 	bl	8004628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b088      	sub	sp, #32
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6979      	ldr	r1, [r7, #20]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	613b      	str	r3, [r7, #16]
   return(result);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fa8c 	bl	8004614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050fc:	bf00      	nop
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_UARTEx_DisableFifoMode+0x16>
 8005152:	2302      	movs	r3, #2
 8005154:	e027      	b.n	80051a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2224      	movs	r2, #36	@ 0x24
 8005162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005184:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e02d      	b.n	8005226 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2224      	movs	r2, #36	@ 0x24
 80051d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f850 	bl	80052ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005242:	2302      	movs	r3, #2
 8005244:	e02d      	b.n	80052a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2224      	movs	r2, #36	@ 0x24
 8005252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f812 	bl	80052ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d108      	bne.n	80052ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052cc:	e031      	b.n	8005332 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052ce:	2308      	movs	r3, #8
 80052d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052d2:	2308      	movs	r3, #8
 80052d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	0e5b      	lsrs	r3, r3, #25
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	0f5b      	lsrs	r3, r3, #29
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	7b3a      	ldrb	r2, [r7, #12]
 80052fa:	4911      	ldr	r1, [pc, #68]	@ (8005340 <UARTEx_SetNbDataToProcess+0x94>)
 80052fc:	5c8a      	ldrb	r2, [r1, r2]
 80052fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005302:	7b3a      	ldrb	r2, [r7, #12]
 8005304:	490f      	ldr	r1, [pc, #60]	@ (8005344 <UARTEx_SetNbDataToProcess+0x98>)
 8005306:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005308:	fb93 f3f2 	sdiv	r3, r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	7b7a      	ldrb	r2, [r7, #13]
 8005318:	4909      	ldr	r1, [pc, #36]	@ (8005340 <UARTEx_SetNbDataToProcess+0x94>)
 800531a:	5c8a      	ldrb	r2, [r1, r2]
 800531c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005320:	7b7a      	ldrb	r2, [r7, #13]
 8005322:	4908      	ldr	r1, [pc, #32]	@ (8005344 <UARTEx_SetNbDataToProcess+0x98>)
 8005324:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005326:	fb93 f3f2 	sdiv	r3, r3, r2
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	0800a4a4 	.word	0x0800a4a4
 8005344:	0800a4ac 	.word	0x0800a4ac

08005348 <__NVIC_SetPriority>:
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	6039      	str	r1, [r7, #0]
 8005352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005358:	2b00      	cmp	r3, #0
 800535a:	db0a      	blt.n	8005372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	490c      	ldr	r1, [pc, #48]	@ (8005394 <__NVIC_SetPriority+0x4c>)
 8005362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005366:	0112      	lsls	r2, r2, #4
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	440b      	add	r3, r1
 800536c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005370:	e00a      	b.n	8005388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4908      	ldr	r1, [pc, #32]	@ (8005398 <__NVIC_SetPriority+0x50>)
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	3b04      	subs	r3, #4
 8005380:	0112      	lsls	r2, r2, #4
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	440b      	add	r3, r1
 8005386:	761a      	strb	r2, [r3, #24]
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	e000e100 	.word	0xe000e100
 8005398:	e000ed00 	.word	0xe000ed00

0800539c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80053a0:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <SysTick_Handler+0x1c>)
 80053a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80053a4:	f002 fc70 	bl	8007c88 <xTaskGetSchedulerState>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d001      	beq.n	80053b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80053ae:	f003 fb6b 	bl	8008a88 <xPortSysTickHandler>
  }
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	e000e010 	.word	0xe000e010

080053bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80053c0:	2100      	movs	r1, #0
 80053c2:	f06f 0004 	mvn.w	r0, #4
 80053c6:	f7ff ffbf 	bl	8005348 <__NVIC_SetPriority>
#endif
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d6:	f3ef 8305 	mrs	r3, IPSR
 80053da:	603b      	str	r3, [r7, #0]
  return(result);
 80053dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053e2:	f06f 0305 	mvn.w	r3, #5
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	e00c      	b.n	8005404 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <osKernelInitialize+0x44>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d105      	bne.n	80053fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053f2:	4b08      	ldr	r3, [pc, #32]	@ (8005414 <osKernelInitialize+0x44>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	e002      	b.n	8005404 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005404:	687b      	ldr	r3, [r7, #4]
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	2000020c 	.word	0x2000020c

08005418 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541e:	f3ef 8305 	mrs	r3, IPSR
 8005422:	603b      	str	r3, [r7, #0]
  return(result);
 8005424:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <osKernelStart+0x1a>
    stat = osErrorISR;
 800542a:	f06f 0305 	mvn.w	r3, #5
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	e010      	b.n	8005454 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005432:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <osKernelStart+0x48>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d109      	bne.n	800544e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800543a:	f7ff ffbf 	bl	80053bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800543e:	4b08      	ldr	r3, [pc, #32]	@ (8005460 <osKernelStart+0x48>)
 8005440:	2202      	movs	r2, #2
 8005442:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005444:	f001 ffc2 	bl	80073cc <vTaskStartScheduler>
      stat = osOK;
 8005448:	2300      	movs	r3, #0
 800544a:	607b      	str	r3, [r7, #4]
 800544c:	e002      	b.n	8005454 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005452:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005454:	687b      	ldr	r3, [r7, #4]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	2000020c 	.word	0x2000020c

08005464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	@ 0x38
 8005468:	af04      	add	r7, sp, #16
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005474:	f3ef 8305 	mrs	r3, IPSR
 8005478:	617b      	str	r3, [r7, #20]
  return(result);
 800547a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800547c:	2b00      	cmp	r3, #0
 800547e:	d17e      	bne.n	800557e <osThreadNew+0x11a>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d07b      	beq.n	800557e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005486:	2380      	movs	r3, #128	@ 0x80
 8005488:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800548a:	2318      	movs	r3, #24
 800548c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005496:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d045      	beq.n	800552a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <osThreadNew+0x48>
        name = attr->name;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <osThreadNew+0x6e>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b38      	cmp	r3, #56	@ 0x38
 80054c4:	d805      	bhi.n	80054d2 <osThreadNew+0x6e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <osThreadNew+0x72>
        return (NULL);
 80054d2:	2300      	movs	r3, #0
 80054d4:	e054      	b.n	8005580 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <osThreadNew+0xa8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b5b      	cmp	r3, #91	@ 0x5b
 80054f4:	d90a      	bls.n	800550c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <osThreadNew+0xa8>
        mem = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	e010      	b.n	800552e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10c      	bne.n	800552e <osThreadNew+0xca>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d108      	bne.n	800552e <osThreadNew+0xca>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <osThreadNew+0xca>
          mem = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e001      	b.n	800552e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d110      	bne.n	8005556 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800553c:	9202      	str	r2, [sp, #8]
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6a3a      	ldr	r2, [r7, #32]
 8005548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f001 fd62 	bl	8007014 <xTaskCreateStatic>
 8005550:	4603      	mov	r3, r0
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e013      	b.n	800557e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d110      	bne.n	800557e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	b29a      	uxth	r2, r3
 8005560:	f107 0310 	add.w	r3, r7, #16
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f001 fdb0 	bl	80070d4 <xTaskCreate>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d001      	beq.n	800557e <osThreadNew+0x11a>
            hTask = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800557e:	693b      	ldr	r3, [r7, #16]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3728      	adds	r7, #40	@ 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005590:	f3ef 8305 	mrs	r3, IPSR
 8005594:	60bb      	str	r3, [r7, #8]
  return(result);
 8005596:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <osDelay+0x1c>
    stat = osErrorISR;
 800559c:	f06f 0305 	mvn.w	r3, #5
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e007      	b.n	80055b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 fed6 	bl	8007360 <vTaskDelay>
    }
  }

  return (stat);
 80055b4:	68fb      	ldr	r3, [r7, #12]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80055be:	b580      	push	{r7, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ca:	f3ef 8305 	mrs	r3, IPSR
 80055ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80055d0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d174      	bne.n	80056c0 <osMutexNew+0x102>
    if (attr != NULL) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e001      	b.n	80055e8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <osMutexNew+0x3a>
      rmtx = 1U;
 80055f2:	2301      	movs	r3, #1
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e001      	b.n	80055fc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d15c      	bne.n	80056c0 <osMutexNew+0x102>
      mem = -1;
 8005606:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800560a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d015      	beq.n	800563e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d006      	beq.n	8005628 <osMutexNew+0x6a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005620:	d902      	bls.n	8005628 <osMutexNew+0x6a>
          mem = 1;
 8005622:	2301      	movs	r3, #1
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e00c      	b.n	8005642 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d108      	bne.n	8005642 <osMutexNew+0x84>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <osMutexNew+0x84>
            mem = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	e001      	b.n	8005642 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d112      	bne.n	800566e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	4619      	mov	r1, r3
 8005654:	2004      	movs	r0, #4
 8005656:	f000 fd70 	bl	800613a <xQueueCreateMutexStatic>
 800565a:	61f8      	str	r0, [r7, #28]
 800565c:	e016      	b.n	800568c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4619      	mov	r1, r3
 8005664:	2001      	movs	r0, #1
 8005666:	f000 fd68 	bl	800613a <xQueueCreateMutexStatic>
 800566a:	61f8      	str	r0, [r7, #28]
 800566c:	e00e      	b.n	800568c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800567a:	2004      	movs	r0, #4
 800567c:	f000 fd45 	bl	800610a <xQueueCreateMutex>
 8005680:	61f8      	str	r0, [r7, #28]
 8005682:	e003      	b.n	800568c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005684:	2001      	movs	r0, #1
 8005686:	f000 fd40 	bl	800610a <xQueueCreateMutex>
 800568a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <osMutexNew+0xee>
        if (attr != NULL) {
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <osMutexNew+0xe2>
          name = attr->name;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	e001      	b.n	80056a4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	69f8      	ldr	r0, [r7, #28]
 80056a8:	f001 fc2c 	bl	8006f04 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d006      	beq.n	80056c0 <osMutexNew+0x102>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80056c0:	69fb      	ldr	r3, [r7, #28]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e8:	f3ef 8305 	mrs	r3, IPSR
 80056ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80056f4:	f06f 0305 	mvn.w	r3, #5
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e02c      	b.n	8005756 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005702:	f06f 0303 	mvn.w	r3, #3
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	e025      	b.n	8005756 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d011      	beq.n	8005734 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6938      	ldr	r0, [r7, #16]
 8005714:	f000 fd61 	bl	80061da <xQueueTakeMutexRecursive>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d01b      	beq.n	8005756 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005724:	f06f 0301 	mvn.w	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e014      	b.n	8005756 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800572c:	f06f 0302 	mvn.w	r3, #2
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e010      	b.n	8005756 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6938      	ldr	r0, [r7, #16]
 8005738:	f001 f906 	bl	8006948 <xQueueSemaphoreTake>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d009      	beq.n	8005756 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005748:	f06f 0301 	mvn.w	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e002      	b.n	8005756 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005750:	f06f 0302 	mvn.w	r3, #2
 8005754:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005756:	697b      	ldr	r3, [r7, #20]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800577c:	f3ef 8305 	mrs	r3, IPSR
 8005780:	60bb      	str	r3, [r7, #8]
  return(result);
 8005782:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005788:	f06f 0305 	mvn.w	r3, #5
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e01f      	b.n	80057d0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d103      	bne.n	800579e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005796:	f06f 0303 	mvn.w	r3, #3
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e018      	b.n	80057d0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80057a4:	6938      	ldr	r0, [r7, #16]
 80057a6:	f000 fce3 	bl	8006170 <xQueueGiveMutexRecursive>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d00f      	beq.n	80057d0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80057b0:	f06f 0302 	mvn.w	r3, #2
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e00b      	b.n	80057d0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80057b8:	2300      	movs	r3, #0
 80057ba:	2200      	movs	r2, #0
 80057bc:	2100      	movs	r1, #0
 80057be:	6938      	ldr	r0, [r7, #16]
 80057c0:	f000 fdb0 	bl	8006324 <xQueueGenericSend>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d002      	beq.n	80057d0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80057ca:	f06f 0302 	mvn.w	r3, #2
 80057ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80057d0:	697b      	ldr	r3, [r7, #20]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08a      	sub	sp, #40	@ 0x28
 80057de:	af02      	add	r7, sp, #8
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ea:	f3ef 8305 	mrs	r3, IPSR
 80057ee:	613b      	str	r3, [r7, #16]
  return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d175      	bne.n	80058e2 <osSemaphoreNew+0x108>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d072      	beq.n	80058e2 <osSemaphoreNew+0x108>
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	429a      	cmp	r2, r3
 8005802:	d86e      	bhi.n	80058e2 <osSemaphoreNew+0x108>
    mem = -1;
 8005804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005808:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d015      	beq.n	800583c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <osSemaphoreNew+0x4c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b4f      	cmp	r3, #79	@ 0x4f
 800581e:	d902      	bls.n	8005826 <osSemaphoreNew+0x4c>
        mem = 1;
 8005820:	2301      	movs	r3, #1
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e00c      	b.n	8005840 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d108      	bne.n	8005840 <osSemaphoreNew+0x66>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <osSemaphoreNew+0x66>
          mem = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e001      	b.n	8005840 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005846:	d04c      	beq.n	80058e2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d128      	bne.n	80058a0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10a      	bne.n	800586a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2203      	movs	r2, #3
 800585a:	9200      	str	r2, [sp, #0]
 800585c:	2200      	movs	r2, #0
 800585e:	2100      	movs	r1, #0
 8005860:	2001      	movs	r0, #1
 8005862:	f000 fb5d 	bl	8005f20 <xQueueGenericCreateStatic>
 8005866:	61f8      	str	r0, [r7, #28]
 8005868:	e005      	b.n	8005876 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800586a:	2203      	movs	r2, #3
 800586c:	2100      	movs	r1, #0
 800586e:	2001      	movs	r0, #1
 8005870:	f000 fbd3 	bl	800601a <xQueueGenericCreate>
 8005874:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d022      	beq.n	80058c2 <osSemaphoreNew+0xe8>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01f      	beq.n	80058c2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005882:	2300      	movs	r3, #0
 8005884:	2200      	movs	r2, #0
 8005886:	2100      	movs	r1, #0
 8005888:	69f8      	ldr	r0, [r7, #28]
 800588a:	f000 fd4b 	bl	8006324 <xQueueGenericSend>
 800588e:	4603      	mov	r3, r0
 8005890:	2b01      	cmp	r3, #1
 8005892:	d016      	beq.n	80058c2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005894:	69f8      	ldr	r0, [r7, #28]
 8005896:	f001 f9e9 	bl	8006c6c <vQueueDelete>
            hSemaphore = NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	e010      	b.n	80058c2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d108      	bne.n	80058b8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fcca 	bl	8006248 <xQueueCreateCountingSemaphoreStatic>
 80058b4:	61f8      	str	r0, [r7, #28]
 80058b6:	e004      	b.n	80058c2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fcfd 	bl	80062ba <xQueueCreateCountingSemaphore>
 80058c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e001      	b.n	80058da <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80058da:	6979      	ldr	r1, [r7, #20]
 80058dc:	69f8      	ldr	r0, [r7, #28]
 80058de:	f001 fb11 	bl	8006f04 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80058e2:	69fb      	ldr	r3, [r7, #28]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005904:	f06f 0303 	mvn.w	r3, #3
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e039      	b.n	8005980 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800590c:	f3ef 8305 	mrs	r3, IPSR
 8005910:	60fb      	str	r3, [r7, #12]
  return(result);
 8005912:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005914:	2b00      	cmp	r3, #0
 8005916:	d022      	beq.n	800595e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800591e:	f06f 0303 	mvn.w	r3, #3
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e02c      	b.n	8005980 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005926:	2300      	movs	r3, #0
 8005928:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800592a:	f107 0308 	add.w	r3, r7, #8
 800592e:	461a      	mov	r2, r3
 8005930:	2100      	movs	r1, #0
 8005932:	6938      	ldr	r0, [r7, #16]
 8005934:	f001 f918 	bl	8006b68 <xQueueReceiveFromISR>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d003      	beq.n	8005946 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800593e:	f06f 0302 	mvn.w	r3, #2
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e01c      	b.n	8005980 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d019      	beq.n	8005980 <osSemaphoreAcquire+0x94>
 800594c:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <osSemaphoreAcquire+0xa0>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	e010      	b.n	8005980 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6938      	ldr	r0, [r7, #16]
 8005962:	f000 fff1 	bl	8006948 <xQueueSemaphoreTake>
 8005966:	4603      	mov	r3, r0
 8005968:	2b01      	cmp	r3, #1
 800596a:	d009      	beq.n	8005980 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005972:	f06f 0301 	mvn.w	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e002      	b.n	8005980 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800597a:	f06f 0302 	mvn.w	r3, #2
 800597e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005980:	697b      	ldr	r3, [r7, #20]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80059a6:	f06f 0303 	mvn.w	r3, #3
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e02c      	b.n	8005a08 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ae:	f3ef 8305 	mrs	r3, IPSR
 80059b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80059b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01a      	beq.n	80059f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80059be:	f107 0308 	add.w	r3, r7, #8
 80059c2:	4619      	mov	r1, r3
 80059c4:	6938      	ldr	r0, [r7, #16]
 80059c6:	f000 fe4d 	bl	8006664 <xQueueGiveFromISR>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d003      	beq.n	80059d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80059d0:	f06f 0302 	mvn.w	r3, #2
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e017      	b.n	8005a08 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d014      	beq.n	8005a08 <osSemaphoreRelease+0x78>
 80059de:	4b0d      	ldr	r3, [pc, #52]	@ (8005a14 <osSemaphoreRelease+0x84>)
 80059e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	e00b      	b.n	8005a08 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80059f0:	2300      	movs	r3, #0
 80059f2:	2200      	movs	r2, #0
 80059f4:	2100      	movs	r1, #0
 80059f6:	6938      	ldr	r0, [r7, #16]
 80059f8:	f000 fc94 	bl	8006324 <xQueueGenericSend>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d002      	beq.n	8005a08 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a02:	f06f 0302 	mvn.w	r3, #2
 8005a06:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a08:	697b      	ldr	r3, [r7, #20]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	@ 0x28
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a28:	f3ef 8305 	mrs	r3, IPSR
 8005a2c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d15f      	bne.n	8005af4 <osMessageQueueNew+0xdc>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d05c      	beq.n	8005af4 <osMessageQueueNew+0xdc>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d059      	beq.n	8005af4 <osMessageQueueNew+0xdc>
    mem = -1;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d029      	beq.n	8005aa0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <osMessageQueueNew+0x62>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a5a:	d90e      	bls.n	8005a7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <osMessageQueueNew+0x62>
        mem = 1;
 8005a74:	2301      	movs	r3, #1
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	e014      	b.n	8005aa4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d110      	bne.n	8005aa4 <osMessageQueueNew+0x8c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10c      	bne.n	8005aa4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d108      	bne.n	8005aa4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <osMessageQueueNew+0x8c>
          mem = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e001      	b.n	8005aa4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10b      	bne.n	8005ac2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	9100      	str	r1, [sp, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fa31 	bl	8005f20 <xQueueGenericCreateStatic>
 8005abe:	61f8      	str	r0, [r7, #28]
 8005ac0:	e008      	b.n	8005ad4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 faa4 	bl	800601a <xQueueGenericCreate>
 8005ad2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e001      	b.n	8005aec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	69f8      	ldr	r0, [r7, #28]
 8005af0:	f001 fa08 	bl	8006f04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005af4:	69fb      	ldr	r3, [r7, #28]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b18:	f3ef 8305 	mrs	r3, IPSR
 8005b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b1e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d028      	beq.n	8005b76 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <osMessageQueuePut+0x36>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <osMessageQueuePut+0x36>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b36:	f06f 0303 	mvn.w	r3, #3
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e038      	b.n	8005bb0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b42:	f107 0210 	add.w	r2, r7, #16
 8005b46:	2300      	movs	r3, #0
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	69b8      	ldr	r0, [r7, #24]
 8005b4c:	f000 fcec 	bl	8006528 <xQueueGenericSendFromISR>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d003      	beq.n	8005b5e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b56:	f06f 0302 	mvn.w	r3, #2
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	e028      	b.n	8005bb0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d025      	beq.n	8005bb0 <osMessageQueuePut+0xb0>
 8005b64:	4b15      	ldr	r3, [pc, #84]	@ (8005bbc <osMessageQueuePut+0xbc>)
 8005b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	e01c      	b.n	8005bb0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <osMessageQueuePut+0x82>
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b82:	f06f 0303 	mvn.w	r3, #3
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	e012      	b.n	8005bb0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	69b8      	ldr	r0, [r7, #24]
 8005b92:	f000 fbc7 	bl	8006324 <xQueueGenericSend>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d009      	beq.n	8005bb0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005ba2:	f06f 0301 	mvn.w	r3, #1
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	e002      	b.n	8005bb0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005baa:	f06f 0302 	mvn.w	r3, #2
 8005bae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005bb0:	69fb      	ldr	r3, [r7, #28]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd6:	f3ef 8305 	mrs	r3, IPSR
 8005bda:	617b      	str	r3, [r7, #20]
  return(result);
 8005bdc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d028      	beq.n	8005c34 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <osMessageQueueGet+0x34>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <osMessageQueueGet+0x34>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005bf4:	f06f 0303 	mvn.w	r3, #3
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e037      	b.n	8005c6c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	461a      	mov	r2, r3
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	69b8      	ldr	r0, [r7, #24]
 8005c0a:	f000 ffad 	bl	8006b68 <xQueueReceiveFromISR>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d003      	beq.n	8005c1c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005c14:	f06f 0302 	mvn.w	r3, #2
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	e027      	b.n	8005c6c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d024      	beq.n	8005c6c <osMessageQueueGet+0xac>
 8005c22:	4b15      	ldr	r3, [pc, #84]	@ (8005c78 <osMessageQueueGet+0xb8>)
 8005c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	e01b      	b.n	8005c6c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <osMessageQueueGet+0x80>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c40:	f06f 0303 	mvn.w	r3, #3
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	e011      	b.n	8005c6c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	69b8      	ldr	r0, [r7, #24]
 8005c4e:	f000 fd99 	bl	8006784 <xQueueReceive>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d009      	beq.n	8005c6c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c5e:	f06f 0301 	mvn.w	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e002      	b.n	8005c6c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c66:	f06f 0302 	mvn.w	r3, #2
 8005c6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c6c:	69fb      	ldr	r3, [r7, #28]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a07      	ldr	r2, [pc, #28]	@ (8005ca8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4a06      	ldr	r2, [pc, #24]	@ (8005cac <vApplicationGetIdleTaskMemory+0x30>)
 8005c92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2280      	movs	r2, #128	@ 0x80
 8005c98:	601a      	str	r2, [r3, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000210 	.word	0x20000210
 8005cac:	2000026c 	.word	0x2000026c

08005cb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a07      	ldr	r2, [pc, #28]	@ (8005cdc <vApplicationGetTimerTaskMemory+0x2c>)
 8005cc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4a06      	ldr	r2, [pc, #24]	@ (8005ce0 <vApplicationGetTimerTaskMemory+0x30>)
 8005cc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cce:	601a      	str	r2, [r3, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	2000046c 	.word	0x2000046c
 8005ce0:	200004c8 	.word	0x200004c8

08005ce4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f103 0208 	add.w	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f103 0208 	add.w	r2, r3, #8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f103 0208 	add.w	r2, r3, #8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
}
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d9c:	d103      	bne.n	8005da6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e00c      	b.n	8005dc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3308      	adds	r3, #8
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e002      	b.n	8005db4 <vListInsert+0x2e>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d2f6      	bcs.n	8005dae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6892      	ldr	r2, [r2, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6852      	ldr	r2, [r2, #4]
 8005e18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d103      	bne.n	8005e2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	1e5a      	subs	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e78:	f002 fd76 	bl	8008968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	441a      	add	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005eae:	fb01 f303 	mul.w	r3, r1, r3
 8005eb2:	441a      	add	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	22ff      	movs	r2, #255	@ 0xff
 8005ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	22ff      	movs	r2, #255	@ 0xff
 8005ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d114      	bne.n	8005ef8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01a      	beq.n	8005f0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3310      	adds	r3, #16
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fd04 	bl	80078e8 <xTaskRemoveFromEventList>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d012      	beq.n	8005f0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <xQueueGenericReset+0xd0>)
 8005ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	e009      	b.n	8005f0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3310      	adds	r3, #16
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fef1 	bl	8005ce4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3324      	adds	r3, #36	@ 0x24
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff feec 	bl	8005ce4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f0c:	f002 fd5e 	bl	80089cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f10:	2301      	movs	r3, #1
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	@ 0x38
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	e7fd      	b.n	8005f66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <xQueueGenericCreateStatic+0x56>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <xQueueGenericCreateStatic+0x5a>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <xQueueGenericCreateStatic+0x5c>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	623b      	str	r3, [r7, #32]
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	e7fd      	b.n	8005f94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <xQueueGenericCreateStatic+0x84>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <xQueueGenericCreateStatic+0x88>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <xQueueGenericCreateStatic+0x8a>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	61fb      	str	r3, [r7, #28]
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	e7fd      	b.n	8005fc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fc6:	2350      	movs	r3, #80	@ 0x50
 8005fc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b50      	cmp	r3, #80	@ 0x50
 8005fce:	d00b      	beq.n	8005fe8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	61bb      	str	r3, [r7, #24]
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fe8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00d      	beq.n	8006010 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ffc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f840 	bl	8006090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006012:	4618      	mov	r0, r3
 8006014:	3730      	adds	r7, #48	@ 0x30
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800601a:	b580      	push	{r7, lr}
 800601c:	b08a      	sub	sp, #40	@ 0x28
 800601e:	af02      	add	r7, sp, #8
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	4613      	mov	r3, r2
 8006026:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <xQueueGenericCreate+0x2c>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	613b      	str	r3, [r7, #16]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3350      	adds	r3, #80	@ 0x50
 8006054:	4618      	mov	r0, r3
 8006056:	f002 fda9 	bl	8008bac <pvPortMalloc>
 800605a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d011      	beq.n	8006086 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	3350      	adds	r3, #80	@ 0x50
 800606a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006074:	79fa      	ldrb	r2, [r7, #7]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f805 	bl	8006090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006086:	69bb      	ldr	r3, [r7, #24]
	}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060be:	2101      	movs	r1, #1
 80060c0:	69b8      	ldr	r0, [r7, #24]
 80060c2:	f7ff fec3 	bl	8005e4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80060f6:	2300      	movs	r3, #0
 80060f8:	2200      	movs	r2, #0
 80060fa:	2100      	movs	r1, #0
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f911 	bl	8006324 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	4603      	mov	r3, r0
 8006112:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006114:	2301      	movs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	461a      	mov	r2, r3
 8006120:	6939      	ldr	r1, [r7, #16]
 8006122:	6978      	ldr	r0, [r7, #20]
 8006124:	f7ff ff79 	bl	800601a <xQueueGenericCreate>
 8006128:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff ffd3 	bl	80060d6 <prvInitialiseMutex>

		return xNewQueue;
 8006130:	68fb      	ldr	r3, [r7, #12]
	}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800613a:	b580      	push	{r7, lr}
 800613c:	b088      	sub	sp, #32
 800613e:	af02      	add	r7, sp, #8
 8006140:	4603      	mov	r3, r0
 8006142:	6039      	str	r1, [r7, #0]
 8006144:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006146:	2301      	movs	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2200      	movs	r2, #0
 8006156:	6939      	ldr	r1, [r7, #16]
 8006158:	6978      	ldr	r0, [r7, #20]
 800615a:	f7ff fee1 	bl	8005f20 <xQueueGenericCreateStatic>
 800615e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff ffb8 	bl	80060d6 <prvInitialiseMutex>

		return xNewQueue;
 8006166:	68fb      	ldr	r3, [r7, #12]
	}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60fb      	str	r3, [r7, #12]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	689c      	ldr	r4, [r3, #8]
 800619e:	f001 fd63 	bl	8007c68 <xTaskGetCurrentTaskHandle>
 80061a2:	4603      	mov	r3, r0
 80061a4:	429c      	cmp	r4, r3
 80061a6:	d111      	bne.n	80061cc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	1e5a      	subs	r2, r3, #1
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80061ba:	2300      	movs	r3, #0
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	6938      	ldr	r0, [r7, #16]
 80061c2:	f000 f8af 	bl	8006324 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80061c6:	2301      	movs	r3, #1
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	e001      	b.n	80061d0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
	}
 80061d2:	4618      	mov	r0, r3
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd90      	pop	{r4, r7, pc}

080061da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80061da:	b590      	push	{r4, r7, lr}
 80061dc:	b087      	sub	sp, #28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	60fb      	str	r3, [r7, #12]
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	e7fd      	b.n	8006202 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	689c      	ldr	r4, [r3, #8]
 800620a:	f001 fd2d 	bl	8007c68 <xTaskGetCurrentTaskHandle>
 800620e:	4603      	mov	r3, r0
 8006210:	429c      	cmp	r4, r3
 8006212:	d107      	bne.n	8006224 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800621e:	2301      	movs	r3, #1
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	e00c      	b.n	800623e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6938      	ldr	r0, [r7, #16]
 8006228:	f000 fb8e 	bl	8006948 <xQueueSemaphoreTake>
 800622c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800623e:	697b      	ldr	r3, [r7, #20]
	}
 8006240:	4618      	mov	r0, r3
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	bd90      	pop	{r4, r7, pc}

08006248 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	@ 0x28
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10b      	bne.n	8006272 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	61bb      	str	r3, [r7, #24]
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	e7fd      	b.n	800626e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	429a      	cmp	r2, r3
 8006278:	d90b      	bls.n	8006292 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	617b      	str	r3, [r7, #20]
}
 800628c:	bf00      	nop
 800628e:	bf00      	nop
 8006290:	e7fd      	b.n	800628e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006292:	2302      	movs	r3, #2
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	2100      	movs	r1, #0
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fe3f 	bl	8005f20 <xQueueGenericCreateStatic>
 80062a2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80062b0:	69fb      	ldr	r3, [r7, #28]
	}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10b      	bne.n	80062e2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	613b      	str	r3, [r7, #16]
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	e7fd      	b.n	80062de <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d90b      	bls.n	8006302 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60fb      	str	r3, [r7, #12]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006302:	2202      	movs	r2, #2
 8006304:	2100      	movs	r1, #0
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fe87 	bl	800601a <xQueueGenericCreate>
 800630c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800631a:	697b      	ldr	r3, [r7, #20]
	}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08e      	sub	sp, #56	@ 0x38
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10b      	bne.n	8006358 <xQueueGenericSend+0x34>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <xQueueGenericSend+0x42>
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <xQueueGenericSend+0x46>
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <xQueueGenericSend+0x48>
 800636a:	2300      	movs	r3, #0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <xQueueGenericSend+0x64>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d103      	bne.n	8006396 <xQueueGenericSend+0x72>
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <xQueueGenericSend+0x76>
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <xQueueGenericSend+0x78>
 800639a:	2300      	movs	r3, #0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <xQueueGenericSend+0x94>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	623b      	str	r3, [r7, #32]
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	e7fd      	b.n	80063b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063b8:	f001 fc66 	bl	8007c88 <xTaskGetSchedulerState>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d102      	bne.n	80063c8 <xQueueGenericSend+0xa4>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <xQueueGenericSend+0xa8>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <xQueueGenericSend+0xaa>
 80063cc:	2300      	movs	r3, #0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <xQueueGenericSend+0xc6>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	61fb      	str	r3, [r7, #28]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ea:	f002 fabd 	bl	8008968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d302      	bcc.n	8006400 <xQueueGenericSend+0xdc>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d129      	bne.n	8006454 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006406:	f000 fc6d 	bl	8006ce4 <prvCopyDataToQueue>
 800640a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	d010      	beq.n	8006436 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	3324      	adds	r3, #36	@ 0x24
 8006418:	4618      	mov	r0, r3
 800641a:	f001 fa65 	bl	80078e8 <xTaskRemoveFromEventList>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d013      	beq.n	800644c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006424:	4b3f      	ldr	r3, [pc, #252]	@ (8006524 <xQueueGenericSend+0x200>)
 8006426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	e00a      	b.n	800644c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800643c:	4b39      	ldr	r3, [pc, #228]	@ (8006524 <xQueueGenericSend+0x200>)
 800643e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800644c:	f002 fabe 	bl	80089cc <vPortExitCritical>
				return pdPASS;
 8006450:	2301      	movs	r3, #1
 8006452:	e063      	b.n	800651c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800645a:	f002 fab7 	bl	80089cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800645e:	2300      	movs	r3, #0
 8006460:	e05c      	b.n	800651c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006468:	f107 0314 	add.w	r3, r7, #20
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fa9f 	bl	80079b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006472:	2301      	movs	r3, #1
 8006474:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006476:	f002 faa9 	bl	80089cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800647a:	f001 f80f 	bl	800749c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800647e:	f002 fa73 	bl	8008968 <vPortEnterCritical>
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006488:	b25b      	sxtb	r3, r3
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800648e:	d103      	bne.n	8006498 <xQueueGenericSend+0x174>
 8006490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064a4:	d103      	bne.n	80064ae <xQueueGenericSend+0x18a>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064ae:	f002 fa8d 	bl	80089cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b2:	1d3a      	adds	r2, r7, #4
 80064b4:	f107 0314 	add.w	r3, r7, #20
 80064b8:	4611      	mov	r1, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fa8e 	bl	80079dc <xTaskCheckForTimeOut>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d124      	bne.n	8006510 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064c8:	f000 fd04 	bl	8006ed4 <prvIsQueueFull>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d018      	beq.n	8006504 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	3310      	adds	r3, #16
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	4611      	mov	r1, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 f9b2 	bl	8007844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e2:	f000 fc8f 	bl	8006e04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064e6:	f000 ffe7 	bl	80074b8 <xTaskResumeAll>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f47f af7c 	bne.w	80063ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80064f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006524 <xQueueGenericSend+0x200>)
 80064f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	e772      	b.n	80063ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006504:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006506:	f000 fc7d 	bl	8006e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800650a:	f000 ffd5 	bl	80074b8 <xTaskResumeAll>
 800650e:	e76c      	b.n	80063ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006512:	f000 fc77 	bl	8006e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006516:	f000 ffcf 	bl	80074b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800651a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800651c:	4618      	mov	r0, r3
 800651e:	3738      	adds	r7, #56	@ 0x38
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b090      	sub	sp, #64	@ 0x40
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006552:	bf00      	nop
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <xQueueGenericSendFromISR+0x3e>
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <xQueueGenericSendFromISR+0x42>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <xQueueGenericSendFromISR+0x44>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10b      	bne.n	8006588 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	e7fd      	b.n	8006584 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d103      	bne.n	8006596 <xQueueGenericSendFromISR+0x6e>
 800658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <xQueueGenericSendFromISR+0x72>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <xQueueGenericSendFromISR+0x74>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	623b      	str	r3, [r7, #32]
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	e7fd      	b.n	80065b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065b8:	f002 fab6 	bl	8008b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065bc:	f3ef 8211 	mrs	r2, BASEPRI
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61fa      	str	r2, [r7, #28]
 80065d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d302      	bcc.n	80065ea <xQueueGenericSendFromISR+0xc2>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d12f      	bne.n	800664a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006600:	f000 fb70 	bl	8006ce4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006604:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800660c:	d112      	bne.n	8006634 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	2b00      	cmp	r3, #0
 8006614:	d016      	beq.n	8006644 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	3324      	adds	r3, #36	@ 0x24
 800661a:	4618      	mov	r0, r3
 800661c:	f001 f964 	bl	80078e8 <xTaskRemoveFromEventList>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00e      	beq.n	8006644 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e007      	b.n	8006644 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006634:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006638:	3301      	adds	r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	b25a      	sxtb	r2, r3
 800663e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006644:	2301      	movs	r3, #1
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006648:	e001      	b.n	800664e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800664e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006650:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006658:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800665a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800665c:	4618      	mov	r0, r3
 800665e:	3740      	adds	r7, #64	@ 0x40
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08e      	sub	sp, #56	@ 0x38
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10b      	bne.n	8006690 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	623b      	str	r3, [r7, #32]
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	e7fd      	b.n	800668c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	61fb      	str	r3, [r7, #28]
}
 80066aa:	bf00      	nop
 80066ac:	bf00      	nop
 80066ae:	e7fd      	b.n	80066ac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <xQueueGiveFromISR+0x5c>
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <xQueueGiveFromISR+0x60>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <xQueueGiveFromISR+0x62>
 80066c4:	2300      	movs	r3, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	61bb      	str	r3, [r7, #24]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066e2:	f002 fa21 	bl	8008b28 <vPortValidateInterruptPriority>
	__asm volatile
 80066e6:	f3ef 8211 	mrs	r2, BASEPRI
 80066ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	617a      	str	r2, [r7, #20]
 80066fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80066fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006700:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006706:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800670e:	429a      	cmp	r2, r3
 8006710:	d22b      	bcs.n	800676a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006714:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006722:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006724:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800672c:	d112      	bne.n	8006754 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	d016      	beq.n	8006764 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006738:	3324      	adds	r3, #36	@ 0x24
 800673a:	4618      	mov	r0, r3
 800673c:	f001 f8d4 	bl	80078e8 <xTaskRemoveFromEventList>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00e      	beq.n	8006764 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2201      	movs	r2, #1
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	e007      	b.n	8006764 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006758:	3301      	adds	r3, #1
 800675a:	b2db      	uxtb	r3, r3
 800675c:	b25a      	sxtb	r2, r3
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006764:	2301      	movs	r3, #1
 8006766:	637b      	str	r3, [r7, #52]	@ 0x34
 8006768:	e001      	b.n	800676e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800676a:	2300      	movs	r3, #0
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
 800676e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006770:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f383 8811 	msr	BASEPRI, r3
}
 8006778:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800677a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800677c:	4618      	mov	r0, r3
 800677e:	3738      	adds	r7, #56	@ 0x38
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08c      	sub	sp, #48	@ 0x30
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006790:	2300      	movs	r3, #0
 8006792:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10b      	bne.n	80067b6 <xQueueReceive+0x32>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	623b      	str	r3, [r7, #32]
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	e7fd      	b.n	80067b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <xQueueReceive+0x40>
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <xQueueReceive+0x44>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <xQueueReceive+0x46>
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <xQueueReceive+0x62>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	61fb      	str	r3, [r7, #28]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067e6:	f001 fa4f 	bl	8007c88 <xTaskGetSchedulerState>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <xQueueReceive+0x72>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <xQueueReceive+0x76>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <xQueueReceive+0x78>
 80067fa:	2300      	movs	r3, #0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10b      	bne.n	8006818 <xQueueReceive+0x94>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	61bb      	str	r3, [r7, #24]
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	e7fd      	b.n	8006814 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006818:	f002 f8a6 	bl	8008968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006820:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01f      	beq.n	8006868 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800682c:	f000 fac4 	bl	8006db8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	1e5a      	subs	r2, r3, #1
 8006834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006836:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00f      	beq.n	8006860 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	3310      	adds	r3, #16
 8006844:	4618      	mov	r0, r3
 8006846:	f001 f84f 	bl	80078e8 <xTaskRemoveFromEventList>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006850:	4b3c      	ldr	r3, [pc, #240]	@ (8006944 <xQueueReceive+0x1c0>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006860:	f002 f8b4 	bl	80089cc <vPortExitCritical>
				return pdPASS;
 8006864:	2301      	movs	r3, #1
 8006866:	e069      	b.n	800693c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800686e:	f002 f8ad 	bl	80089cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006872:	2300      	movs	r3, #0
 8006874:	e062      	b.n	800693c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800687c:	f107 0310 	add.w	r3, r7, #16
 8006880:	4618      	mov	r0, r3
 8006882:	f001 f895 	bl	80079b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006886:	2301      	movs	r3, #1
 8006888:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800688a:	f002 f89f 	bl	80089cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800688e:	f000 fe05 	bl	800749c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006892:	f002 f869 	bl	8008968 <vPortEnterCritical>
 8006896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800689c:	b25b      	sxtb	r3, r3
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a2:	d103      	bne.n	80068ac <xQueueReceive+0x128>
 80068a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068b8:	d103      	bne.n	80068c2 <xQueueReceive+0x13e>
 80068ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068c2:	f002 f883 	bl	80089cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068c6:	1d3a      	adds	r2, r7, #4
 80068c8:	f107 0310 	add.w	r3, r7, #16
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 f884 	bl	80079dc <xTaskCheckForTimeOut>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d123      	bne.n	8006922 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068dc:	f000 fae4 	bl	8006ea8 <prvIsQueueEmpty>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d017      	beq.n	8006916 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	3324      	adds	r3, #36	@ 0x24
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	4611      	mov	r1, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 ffa8 	bl	8007844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068f6:	f000 fa85 	bl	8006e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068fa:	f000 fddd 	bl	80074b8 <xTaskResumeAll>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d189      	bne.n	8006818 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006904:	4b0f      	ldr	r3, [pc, #60]	@ (8006944 <xQueueReceive+0x1c0>)
 8006906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	e780      	b.n	8006818 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006918:	f000 fa74 	bl	8006e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800691c:	f000 fdcc 	bl	80074b8 <xTaskResumeAll>
 8006920:	e77a      	b.n	8006818 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006924:	f000 fa6e 	bl	8006e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006928:	f000 fdc6 	bl	80074b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800692c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800692e:	f000 fabb 	bl	8006ea8 <prvIsQueueEmpty>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	f43f af6f 	beq.w	8006818 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800693a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800693c:	4618      	mov	r0, r3
 800693e:	3730      	adds	r7, #48	@ 0x30
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	e000ed04 	.word	0xe000ed04

08006948 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08e      	sub	sp, #56	@ 0x38
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10b      	bne.n	800697c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	623b      	str	r3, [r7, #32]
}
 8006976:	bf00      	nop
 8006978:	bf00      	nop
 800697a:	e7fd      	b.n	8006978 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800697c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	61fb      	str	r3, [r7, #28]
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699c:	f001 f974 	bl	8007c88 <xTaskGetSchedulerState>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <xQueueSemaphoreTake+0x64>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <xQueueSemaphoreTake+0x68>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <xQueueSemaphoreTake+0x6a>
 80069b0:	2300      	movs	r3, #0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10b      	bne.n	80069ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	61bb      	str	r3, [r7, #24]
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	e7fd      	b.n	80069ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ce:	f001 ffcb 	bl	8008968 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d024      	beq.n	8006a28 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	1e5a      	subs	r2, r3, #1
 80069e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80069ee:	f001 fac5 	bl	8007f7c <pvTaskIncrementMutexHeldCount>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00f      	beq.n	8006a20 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a02:	3310      	adds	r3, #16
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 ff6f 	bl	80078e8 <xTaskRemoveFromEventList>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a10:	4b54      	ldr	r3, [pc, #336]	@ (8006b64 <xQueueSemaphoreTake+0x21c>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a20:	f001 ffd4 	bl	80089cc <vPortExitCritical>
				return pdPASS;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e098      	b.n	8006b5a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d112      	bne.n	8006a54 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	617b      	str	r3, [r7, #20]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a4c:	f001 ffbe 	bl	80089cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a50:	2300      	movs	r3, #0
 8006a52:	e082      	b.n	8006b5a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a5a:	f107 030c 	add.w	r3, r7, #12
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 ffa6 	bl	80079b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a68:	f001 ffb0 	bl	80089cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a6c:	f000 fd16 	bl	800749c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a70:	f001 ff7a 	bl	8008968 <vPortEnterCritical>
 8006a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a80:	d103      	bne.n	8006a8a <xQueueSemaphoreTake+0x142>
 8006a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a90:	b25b      	sxtb	r3, r3
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a96:	d103      	bne.n	8006aa0 <xQueueSemaphoreTake+0x158>
 8006a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aa0:	f001 ff94 	bl	80089cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aa4:	463a      	mov	r2, r7
 8006aa6:	f107 030c 	add.w	r3, r7, #12
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 ff95 	bl	80079dc <xTaskCheckForTimeOut>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d132      	bne.n	8006b1e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ab8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006aba:	f000 f9f5 	bl	8006ea8 <prvIsQueueEmpty>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d026      	beq.n	8006b12 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006acc:	f001 ff4c 	bl	8008968 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 f8f5 	bl	8007cc4 <xTaskPriorityInherit>
 8006ada:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006adc:	f001 ff76 	bl	80089cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae2:	3324      	adds	r3, #36	@ 0x24
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 feab 	bl	8007844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006af0:	f000 f988 	bl	8006e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006af4:	f000 fce0 	bl	80074b8 <xTaskResumeAll>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f47f af67 	bne.w	80069ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b00:	4b18      	ldr	r3, [pc, #96]	@ (8006b64 <xQueueSemaphoreTake+0x21c>)
 8006b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	e75d      	b.n	80069ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b14:	f000 f976 	bl	8006e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b18:	f000 fcce 	bl	80074b8 <xTaskResumeAll>
 8006b1c:	e757      	b.n	80069ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b20:	f000 f970 	bl	8006e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b24:	f000 fcc8 	bl	80074b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b2a:	f000 f9bd 	bl	8006ea8 <prvIsQueueEmpty>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f43f af4c 	beq.w	80069ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00d      	beq.n	8006b58 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006b3c:	f001 ff14 	bl	8008968 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b42:	f000 f8b7 	bl	8006cb4 <prvGetDisinheritPriorityAfterTimeout>
 8006b46:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 f990 	bl	8007e74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b54:	f001 ff3a 	bl	80089cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3738      	adds	r7, #56	@ 0x38
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08e      	sub	sp, #56	@ 0x38
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10b      	bne.n	8006b96 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	623b      	str	r3, [r7, #32]
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <xQueueReceiveFromISR+0x3c>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <xQueueReceiveFromISR+0x40>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <xQueueReceiveFromISR+0x42>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	61fb      	str	r3, [r7, #28]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bc6:	f001 ffaf 	bl	8008b28 <vPortValidateInterruptPriority>
	__asm volatile
 8006bca:	f3ef 8211 	mrs	r2, BASEPRI
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	61ba      	str	r2, [r7, #24]
 8006be0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006be2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d02f      	beq.n	8006c52 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c00:	f000 f8da 	bl	8006db8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	1e5a      	subs	r2, r3, #1
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c14:	d112      	bne.n	8006c3c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d016      	beq.n	8006c4c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	3310      	adds	r3, #16
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fe60 	bl	80078e8 <xTaskRemoveFromEventList>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00e      	beq.n	8006c4c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e007      	b.n	8006c4c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c40:	3301      	adds	r3, #1
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	b25a      	sxtb	r2, r3
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c50:	e001      	b.n	8006c56 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f383 8811 	msr	BASEPRI, r3
}
 8006c60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3738      	adds	r7, #56	@ 0x38
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10b      	bne.n	8006c96 <vQueueDelete+0x2a>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	60bb      	str	r3, [r7, #8]
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f95e 	bl	8006f58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f002 f84e 	bl	8008d48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d006      	beq.n	8006cd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e001      	b.n	8006cd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
	}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d14d      	bne.n	8006da6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 f840 	bl	8007d94 <xTaskPriorityDisinherit>
 8006d14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	609a      	str	r2, [r3, #8]
 8006d1c:	e043      	b.n	8006da6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d119      	bne.n	8006d58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6858      	ldr	r0, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	f002 fe6b 	bl	8009a0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	441a      	add	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d32b      	bcc.n	8006da6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	605a      	str	r2, [r3, #4]
 8006d56:	e026      	b.n	8006da6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68d8      	ldr	r0, [r3, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	461a      	mov	r2, r3
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	f002 fe51 	bl	8009a0a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	425b      	negs	r3, r3
 8006d72:	441a      	add	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d207      	bcs.n	8006d94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	441a      	add	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d105      	bne.n	8006da6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dae:	697b      	ldr	r3, [r7, #20]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d018      	beq.n	8006dfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	441a      	add	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d303      	bcc.n	8006dec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68d9      	ldr	r1, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	461a      	mov	r2, r3
 8006df6:	6838      	ldr	r0, [r7, #0]
 8006df8:	f002 fe07 	bl	8009a0a <memcpy>
	}
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e0c:	f001 fdac 	bl	8008968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e18:	e011      	b.n	8006e3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d012      	beq.n	8006e48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3324      	adds	r3, #36	@ 0x24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fd5e 	bl	80078e8 <xTaskRemoveFromEventList>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e32:	f000 fe37 	bl	8007aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dce9      	bgt.n	8006e1a <prvUnlockQueue+0x16>
 8006e46:	e000      	b.n	8006e4a <prvUnlockQueue+0x46>
					break;
 8006e48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	22ff      	movs	r2, #255	@ 0xff
 8006e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e52:	f001 fdbb 	bl	80089cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e56:	f001 fd87 	bl	8008968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e62:	e011      	b.n	8006e88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d012      	beq.n	8006e92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3310      	adds	r3, #16
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fd39 	bl	80078e8 <xTaskRemoveFromEventList>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e7c:	f000 fe12 	bl	8007aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dce9      	bgt.n	8006e64 <prvUnlockQueue+0x60>
 8006e90:	e000      	b.n	8006e94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	22ff      	movs	r2, #255	@ 0xff
 8006e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006e9c:	f001 fd96 	bl	80089cc <vPortExitCritical>
}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eb0:	f001 fd5a 	bl	8008968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	e001      	b.n	8006ec6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ec6:	f001 fd81 	bl	80089cc <vPortExitCritical>

	return xReturn;
 8006eca:	68fb      	ldr	r3, [r7, #12]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006edc:	f001 fd44 	bl	8008968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d102      	bne.n	8006ef2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	e001      	b.n	8006ef6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ef6:	f001 fd69 	bl	80089cc <vPortExitCritical>

	return xReturn;
 8006efa:	68fb      	ldr	r3, [r7, #12]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e014      	b.n	8006f3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f14:	4a0f      	ldr	r2, [pc, #60]	@ (8006f54 <vQueueAddToRegistry+0x50>)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10b      	bne.n	8006f38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f20:	490c      	ldr	r1, [pc, #48]	@ (8006f54 <vQueueAddToRegistry+0x50>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f54 <vQueueAddToRegistry+0x50>)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	4413      	add	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f36:	e006      	b.n	8006f46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b07      	cmp	r3, #7
 8006f42:	d9e7      	bls.n	8006f14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	200008c8 	.word	0x200008c8

08006f58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e016      	b.n	8006f94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006f66:	4a10      	ldr	r2, [pc, #64]	@ (8006fa8 <vQueueUnregisterQueue+0x50>)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d10b      	bne.n	8006f8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006f76:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa8 <vQueueUnregisterQueue+0x50>)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006f80:	4a09      	ldr	r2, [pc, #36]	@ (8006fa8 <vQueueUnregisterQueue+0x50>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	4413      	add	r3, r2
 8006f88:	2200      	movs	r2, #0
 8006f8a:	605a      	str	r2, [r3, #4]
				break;
 8006f8c:	e006      	b.n	8006f9c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3301      	adds	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b07      	cmp	r3, #7
 8006f98:	d9e5      	bls.n	8006f66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	200008c8 	.word	0x200008c8

08006fac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fbc:	f001 fcd4 	bl	8008968 <vPortEnterCritical>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fc6:	b25b      	sxtb	r3, r3
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fcc:	d103      	bne.n	8006fd6 <vQueueWaitForMessageRestricted+0x2a>
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fdc:	b25b      	sxtb	r3, r3
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fe2:	d103      	bne.n	8006fec <vQueueWaitForMessageRestricted+0x40>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fec:	f001 fcee 	bl	80089cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	3324      	adds	r3, #36	@ 0x24
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fc45 	bl	8007890 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007006:	6978      	ldr	r0, [r7, #20]
 8007008:	f7ff fefc 	bl	8006e04 <prvUnlockQueue>
	}
 800700c:	bf00      	nop
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08e      	sub	sp, #56	@ 0x38
 8007018:	af04      	add	r7, sp, #16
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	623b      	str	r3, [r7, #32]
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	e7fd      	b.n	800703c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10b      	bne.n	800705e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	61fb      	str	r3, [r7, #28]
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	e7fd      	b.n	800705a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800705e:	235c      	movs	r3, #92	@ 0x5c
 8007060:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b5c      	cmp	r3, #92	@ 0x5c
 8007066:	d00b      	beq.n	8007080 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	61bb      	str	r3, [r7, #24]
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007080:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01e      	beq.n	80070c6 <xTaskCreateStatic+0xb2>
 8007088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01b      	beq.n	80070c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007096:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	2202      	movs	r2, #2
 800709c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070a0:	2300      	movs	r3, #0
 80070a2:	9303      	str	r3, [sp, #12]
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	9302      	str	r3, [sp, #8]
 80070a8:	f107 0314 	add.w	r3, r7, #20
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	68b9      	ldr	r1, [r7, #8]
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f850 	bl	800715e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070c0:	f000 f8de 	bl	8007280 <prvAddNewTaskToReadyList>
 80070c4:	e001      	b.n	80070ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070ca:	697b      	ldr	r3, [r7, #20]
	}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3728      	adds	r7, #40	@ 0x28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08c      	sub	sp, #48	@ 0x30
 80070d8:	af04      	add	r7, sp, #16
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	4613      	mov	r3, r2
 80070e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070e4:	88fb      	ldrh	r3, [r7, #6]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fd5f 	bl	8008bac <pvPortMalloc>
 80070ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00e      	beq.n	8007114 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070f6:	205c      	movs	r0, #92	@ 0x5c
 80070f8:	f001 fd58 	bl	8008bac <pvPortMalloc>
 80070fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	631a      	str	r2, [r3, #48]	@ 0x30
 800710a:	e005      	b.n	8007118 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800710c:	6978      	ldr	r0, [r7, #20]
 800710e:	f001 fe1b 	bl	8008d48 <vPortFree>
 8007112:	e001      	b.n	8007118 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d017      	beq.n	800714e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007126:	88fa      	ldrh	r2, [r7, #6]
 8007128:	2300      	movs	r3, #0
 800712a:	9303      	str	r3, [sp, #12]
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	9302      	str	r3, [sp, #8]
 8007130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f80e 	bl	800715e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007142:	69f8      	ldr	r0, [r7, #28]
 8007144:	f000 f89c 	bl	8007280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007148:	2301      	movs	r3, #1
 800714a:	61bb      	str	r3, [r7, #24]
 800714c:	e002      	b.n	8007154 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800714e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007152:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007154:	69bb      	ldr	r3, [r7, #24]
	}
 8007156:	4618      	mov	r0, r3
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b088      	sub	sp, #32
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
 800716a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	461a      	mov	r2, r3
 8007176:	21a5      	movs	r1, #165	@ 0xa5
 8007178:	f002 fbbc 	bl	80098f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007186:	3b01      	subs	r3, #1
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	f023 0307 	bic.w	r3, r3, #7
 8007194:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	617b      	str	r3, [r7, #20]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d01f      	beq.n	80071fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
 80071c2:	e012      	b.n	80071ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	4413      	add	r3, r2
 80071ca:	7819      	ldrb	r1, [r3, #0]
 80071cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	3334      	adds	r3, #52	@ 0x34
 80071d4:	460a      	mov	r2, r1
 80071d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	3301      	adds	r3, #1
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b0f      	cmp	r3, #15
 80071ee:	d9e9      	bls.n	80071c4 <prvInitialiseNewTask+0x66>
 80071f0:	e000      	b.n	80071f4 <prvInitialiseNewTask+0x96>
			{
				break;
 80071f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071fc:	e003      	b.n	8007206 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	2b37      	cmp	r3, #55	@ 0x37
 800720a:	d901      	bls.n	8007210 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800720c:	2337      	movs	r3, #55	@ 0x37
 800720e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007214:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800721a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	2200      	movs	r2, #0
 8007220:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	3304      	adds	r3, #4
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fd7c 	bl	8005d24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800722c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722e:	3318      	adds	r3, #24
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fd77 	bl	8005d24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800723a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800724a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	2200      	movs	r2, #0
 8007250:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	68f9      	ldr	r1, [r7, #12]
 800725e:	69b8      	ldr	r0, [r7, #24]
 8007260:	f001 fa4e 	bl	8008700 <pxPortInitialiseStack>
 8007264:	4602      	mov	r2, r0
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800726a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007276:	bf00      	nop
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007288:	f001 fb6e 	bl	8008968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800728c:	4b2d      	ldr	r3, [pc, #180]	@ (8007344 <prvAddNewTaskToReadyList+0xc4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3301      	adds	r3, #1
 8007292:	4a2c      	ldr	r2, [pc, #176]	@ (8007344 <prvAddNewTaskToReadyList+0xc4>)
 8007294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007296:	4b2c      	ldr	r3, [pc, #176]	@ (8007348 <prvAddNewTaskToReadyList+0xc8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d109      	bne.n	80072b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800729e:	4a2a      	ldr	r2, [pc, #168]	@ (8007348 <prvAddNewTaskToReadyList+0xc8>)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072a4:	4b27      	ldr	r3, [pc, #156]	@ (8007344 <prvAddNewTaskToReadyList+0xc4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d110      	bne.n	80072ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072ac:	f000 fc1e 	bl	8007aec <prvInitialiseTaskLists>
 80072b0:	e00d      	b.n	80072ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072b2:	4b26      	ldr	r3, [pc, #152]	@ (800734c <prvAddNewTaskToReadyList+0xcc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072ba:	4b23      	ldr	r3, [pc, #140]	@ (8007348 <prvAddNewTaskToReadyList+0xc8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d802      	bhi.n	80072ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007348 <prvAddNewTaskToReadyList+0xc8>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072ce:	4b20      	ldr	r3, [pc, #128]	@ (8007350 <prvAddNewTaskToReadyList+0xd0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3301      	adds	r3, #1
 80072d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007350 <prvAddNewTaskToReadyList+0xd0>)
 80072d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007350 <prvAddNewTaskToReadyList+0xd0>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007354 <prvAddNewTaskToReadyList+0xd4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d903      	bls.n	80072f4 <prvAddNewTaskToReadyList+0x74>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	4a18      	ldr	r2, [pc, #96]	@ (8007354 <prvAddNewTaskToReadyList+0xd4>)
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4a15      	ldr	r2, [pc, #84]	@ (8007358 <prvAddNewTaskToReadyList+0xd8>)
 8007302:	441a      	add	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f7fe fd17 	bl	8005d3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007310:	f001 fb5c 	bl	80089cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007314:	4b0d      	ldr	r3, [pc, #52]	@ (800734c <prvAddNewTaskToReadyList+0xcc>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00e      	beq.n	800733a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800731c:	4b0a      	ldr	r3, [pc, #40]	@ (8007348 <prvAddNewTaskToReadyList+0xc8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	429a      	cmp	r2, r3
 8007328:	d207      	bcs.n	800733a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800732a:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <prvAddNewTaskToReadyList+0xdc>)
 800732c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000ddc 	.word	0x20000ddc
 8007348:	20000908 	.word	0x20000908
 800734c:	20000de8 	.word	0x20000de8
 8007350:	20000df8 	.word	0x20000df8
 8007354:	20000de4 	.word	0x20000de4
 8007358:	2000090c 	.word	0x2000090c
 800735c:	e000ed04 	.word	0xe000ed04

08007360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007372:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <vTaskDelay+0x64>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <vTaskDelay+0x32>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	60bb      	str	r3, [r7, #8]
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	e7fd      	b.n	800738e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007392:	f000 f883 	bl	800749c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007396:	2100      	movs	r1, #0
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fe03 	bl	8007fa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800739e:	f000 f88b 	bl	80074b8 <xTaskResumeAll>
 80073a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d107      	bne.n	80073ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80073aa:	4b07      	ldr	r3, [pc, #28]	@ (80073c8 <vTaskDelay+0x68>)
 80073ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000e04 	.word	0x20000e04
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	@ 0x28
 80073d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073da:	463a      	mov	r2, r7
 80073dc:	1d39      	adds	r1, r7, #4
 80073de:	f107 0308 	add.w	r3, r7, #8
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fc4a 	bl	8005c7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	9202      	str	r2, [sp, #8]
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	2300      	movs	r3, #0
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	460a      	mov	r2, r1
 80073fa:	4922      	ldr	r1, [pc, #136]	@ (8007484 <vTaskStartScheduler+0xb8>)
 80073fc:	4822      	ldr	r0, [pc, #136]	@ (8007488 <vTaskStartScheduler+0xbc>)
 80073fe:	f7ff fe09 	bl	8007014 <xTaskCreateStatic>
 8007402:	4603      	mov	r3, r0
 8007404:	4a21      	ldr	r2, [pc, #132]	@ (800748c <vTaskStartScheduler+0xc0>)
 8007406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007408:	4b20      	ldr	r3, [pc, #128]	@ (800748c <vTaskStartScheduler+0xc0>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007410:	2301      	movs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e001      	b.n	800741a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d102      	bne.n	8007426 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007420:	f000 fe14 	bl	800804c <xTimerCreateTimerTask>
 8007424:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d116      	bne.n	800745a <vTaskStartScheduler+0x8e>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	613b      	str	r3, [r7, #16]
}
 800743e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007440:	4b13      	ldr	r3, [pc, #76]	@ (8007490 <vTaskStartScheduler+0xc4>)
 8007442:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007446:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007448:	4b12      	ldr	r3, [pc, #72]	@ (8007494 <vTaskStartScheduler+0xc8>)
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800744e:	4b12      	ldr	r3, [pc, #72]	@ (8007498 <vTaskStartScheduler+0xcc>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007454:	f001 f9e4 	bl	8008820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007458:	e00f      	b.n	800747a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007460:	d10b      	bne.n	800747a <vTaskStartScheduler+0xae>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	60fb      	str	r3, [r7, #12]
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	e7fd      	b.n	8007476 <vTaskStartScheduler+0xaa>
}
 800747a:	bf00      	nop
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	0800a36c 	.word	0x0800a36c
 8007488:	08007abd 	.word	0x08007abd
 800748c:	20000e00 	.word	0x20000e00
 8007490:	20000dfc 	.word	0x20000dfc
 8007494:	20000de8 	.word	0x20000de8
 8007498:	20000de0 	.word	0x20000de0

0800749c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074a0:	4b04      	ldr	r3, [pc, #16]	@ (80074b4 <vTaskSuspendAll+0x18>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	4a03      	ldr	r2, [pc, #12]	@ (80074b4 <vTaskSuspendAll+0x18>)
 80074a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074aa:	bf00      	nop
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20000e04 	.word	0x20000e04

080074b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074c6:	4b42      	ldr	r3, [pc, #264]	@ (80075d0 <xTaskResumeAll+0x118>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10b      	bne.n	80074e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	603b      	str	r3, [r7, #0]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074e6:	f001 fa3f 	bl	8008968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074ea:	4b39      	ldr	r3, [pc, #228]	@ (80075d0 <xTaskResumeAll+0x118>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	4a37      	ldr	r2, [pc, #220]	@ (80075d0 <xTaskResumeAll+0x118>)
 80074f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074f4:	4b36      	ldr	r3, [pc, #216]	@ (80075d0 <xTaskResumeAll+0x118>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d162      	bne.n	80075c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074fc:	4b35      	ldr	r3, [pc, #212]	@ (80075d4 <xTaskResumeAll+0x11c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d05e      	beq.n	80075c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007504:	e02f      	b.n	8007566 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007506:	4b34      	ldr	r3, [pc, #208]	@ (80075d8 <xTaskResumeAll+0x120>)
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3318      	adds	r3, #24
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe fc70 	bl	8005df8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3304      	adds	r3, #4
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fc6b 	bl	8005df8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007526:	4b2d      	ldr	r3, [pc, #180]	@ (80075dc <xTaskResumeAll+0x124>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d903      	bls.n	8007536 <xTaskResumeAll+0x7e>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	4a2a      	ldr	r2, [pc, #168]	@ (80075dc <xTaskResumeAll+0x124>)
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4a27      	ldr	r2, [pc, #156]	@ (80075e0 <xTaskResumeAll+0x128>)
 8007544:	441a      	add	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3304      	adds	r3, #4
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f7fe fbf6 	bl	8005d3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007556:	4b23      	ldr	r3, [pc, #140]	@ (80075e4 <xTaskResumeAll+0x12c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	429a      	cmp	r2, r3
 800755e:	d302      	bcc.n	8007566 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007560:	4b21      	ldr	r3, [pc, #132]	@ (80075e8 <xTaskResumeAll+0x130>)
 8007562:	2201      	movs	r2, #1
 8007564:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007566:	4b1c      	ldr	r3, [pc, #112]	@ (80075d8 <xTaskResumeAll+0x120>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1cb      	bne.n	8007506 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007574:	f000 fb58 	bl	8007c28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007578:	4b1c      	ldr	r3, [pc, #112]	@ (80075ec <xTaskResumeAll+0x134>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d010      	beq.n	80075a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007584:	f000 f846 	bl	8007614 <xTaskIncrementTick>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800758e:	4b16      	ldr	r3, [pc, #88]	@ (80075e8 <xTaskResumeAll+0x130>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3b01      	subs	r3, #1
 8007598:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f1      	bne.n	8007584 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80075a0:	4b12      	ldr	r3, [pc, #72]	@ (80075ec <xTaskResumeAll+0x134>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075a6:	4b10      	ldr	r3, [pc, #64]	@ (80075e8 <xTaskResumeAll+0x130>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075ae:	2301      	movs	r3, #1
 80075b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075b2:	4b0f      	ldr	r3, [pc, #60]	@ (80075f0 <xTaskResumeAll+0x138>)
 80075b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075c2:	f001 fa03 	bl	80089cc <vPortExitCritical>

	return xAlreadyYielded;
 80075c6:	68bb      	ldr	r3, [r7, #8]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20000e04 	.word	0x20000e04
 80075d4:	20000ddc 	.word	0x20000ddc
 80075d8:	20000d9c 	.word	0x20000d9c
 80075dc:	20000de4 	.word	0x20000de4
 80075e0:	2000090c 	.word	0x2000090c
 80075e4:	20000908 	.word	0x20000908
 80075e8:	20000df0 	.word	0x20000df0
 80075ec:	20000dec 	.word	0x20000dec
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075fa:	4b05      	ldr	r3, [pc, #20]	@ (8007610 <xTaskGetTickCount+0x1c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007600:	687b      	ldr	r3, [r7, #4]
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000de0 	.word	0x20000de0

08007614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800761e:	4b4f      	ldr	r3, [pc, #316]	@ (800775c <xTaskIncrementTick+0x148>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f040 8090 	bne.w	8007748 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007628:	4b4d      	ldr	r3, [pc, #308]	@ (8007760 <xTaskIncrementTick+0x14c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007630:	4a4b      	ldr	r2, [pc, #300]	@ (8007760 <xTaskIncrementTick+0x14c>)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d121      	bne.n	8007680 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800763c:	4b49      	ldr	r3, [pc, #292]	@ (8007764 <xTaskIncrementTick+0x150>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00b      	beq.n	800765e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	603b      	str	r3, [r7, #0]
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	e7fd      	b.n	800765a <xTaskIncrementTick+0x46>
 800765e:	4b41      	ldr	r3, [pc, #260]	@ (8007764 <xTaskIncrementTick+0x150>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	4b40      	ldr	r3, [pc, #256]	@ (8007768 <xTaskIncrementTick+0x154>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a3e      	ldr	r2, [pc, #248]	@ (8007764 <xTaskIncrementTick+0x150>)
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	4a3e      	ldr	r2, [pc, #248]	@ (8007768 <xTaskIncrementTick+0x154>)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	4b3e      	ldr	r3, [pc, #248]	@ (800776c <xTaskIncrementTick+0x158>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	4a3c      	ldr	r2, [pc, #240]	@ (800776c <xTaskIncrementTick+0x158>)
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	f000 fad4 	bl	8007c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007680:	4b3b      	ldr	r3, [pc, #236]	@ (8007770 <xTaskIncrementTick+0x15c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	429a      	cmp	r2, r3
 8007688:	d349      	bcc.n	800771e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800768a:	4b36      	ldr	r3, [pc, #216]	@ (8007764 <xTaskIncrementTick+0x150>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007694:	4b36      	ldr	r3, [pc, #216]	@ (8007770 <xTaskIncrementTick+0x15c>)
 8007696:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800769a:	601a      	str	r2, [r3, #0]
					break;
 800769c:	e03f      	b.n	800771e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800769e:	4b31      	ldr	r3, [pc, #196]	@ (8007764 <xTaskIncrementTick+0x150>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d203      	bcs.n	80076be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007770 <xTaskIncrementTick+0x15c>)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076bc:	e02f      	b.n	800771e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fb98 	bl	8005df8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	3318      	adds	r3, #24
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fb8f 	bl	8005df8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076de:	4b25      	ldr	r3, [pc, #148]	@ (8007774 <xTaskIncrementTick+0x160>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d903      	bls.n	80076ee <xTaskIncrementTick+0xda>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ea:	4a22      	ldr	r2, [pc, #136]	@ (8007774 <xTaskIncrementTick+0x160>)
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007778 <xTaskIncrementTick+0x164>)
 80076fc:	441a      	add	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	3304      	adds	r3, #4
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f7fe fb1a 	bl	8005d3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770e:	4b1b      	ldr	r3, [pc, #108]	@ (800777c <xTaskIncrementTick+0x168>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007714:	429a      	cmp	r2, r3
 8007716:	d3b8      	bcc.n	800768a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800771c:	e7b5      	b.n	800768a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800771e:	4b17      	ldr	r3, [pc, #92]	@ (800777c <xTaskIncrementTick+0x168>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007724:	4914      	ldr	r1, [pc, #80]	@ (8007778 <xTaskIncrementTick+0x164>)
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	440b      	add	r3, r1
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d901      	bls.n	800773a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007736:	2301      	movs	r3, #1
 8007738:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800773a:	4b11      	ldr	r3, [pc, #68]	@ (8007780 <xTaskIncrementTick+0x16c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007742:	2301      	movs	r3, #1
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	e004      	b.n	8007752 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007748:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <xTaskIncrementTick+0x170>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3301      	adds	r3, #1
 800774e:	4a0d      	ldr	r2, [pc, #52]	@ (8007784 <xTaskIncrementTick+0x170>)
 8007750:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007752:	697b      	ldr	r3, [r7, #20]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000e04 	.word	0x20000e04
 8007760:	20000de0 	.word	0x20000de0
 8007764:	20000d94 	.word	0x20000d94
 8007768:	20000d98 	.word	0x20000d98
 800776c:	20000df4 	.word	0x20000df4
 8007770:	20000dfc 	.word	0x20000dfc
 8007774:	20000de4 	.word	0x20000de4
 8007778:	2000090c 	.word	0x2000090c
 800777c:	20000908 	.word	0x20000908
 8007780:	20000df0 	.word	0x20000df0
 8007784:	20000dec 	.word	0x20000dec

08007788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800778e:	4b28      	ldr	r3, [pc, #160]	@ (8007830 <vTaskSwitchContext+0xa8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007796:	4b27      	ldr	r3, [pc, #156]	@ (8007834 <vTaskSwitchContext+0xac>)
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800779c:	e042      	b.n	8007824 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800779e:	4b25      	ldr	r3, [pc, #148]	@ (8007834 <vTaskSwitchContext+0xac>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a4:	4b24      	ldr	r3, [pc, #144]	@ (8007838 <vTaskSwitchContext+0xb0>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	e011      	b.n	80077d0 <vTaskSwitchContext+0x48>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <vTaskSwitchContext+0x42>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	607b      	str	r3, [r7, #4]
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	e7fd      	b.n	80077c6 <vTaskSwitchContext+0x3e>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	491a      	ldr	r1, [pc, #104]	@ (800783c <vTaskSwitchContext+0xb4>)
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0e3      	beq.n	80077ac <vTaskSwitchContext+0x24>
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4a13      	ldr	r2, [pc, #76]	@ (800783c <vTaskSwitchContext+0xb4>)
 80077f0:	4413      	add	r3, r2
 80077f2:	60bb      	str	r3, [r7, #8]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	605a      	str	r2, [r3, #4]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	3308      	adds	r3, #8
 8007806:	429a      	cmp	r2, r3
 8007808:	d104      	bne.n	8007814 <vTaskSwitchContext+0x8c>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	605a      	str	r2, [r3, #4]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	4a09      	ldr	r2, [pc, #36]	@ (8007840 <vTaskSwitchContext+0xb8>)
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	4a06      	ldr	r2, [pc, #24]	@ (8007838 <vTaskSwitchContext+0xb0>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6013      	str	r3, [r2, #0]
}
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	20000e04 	.word	0x20000e04
 8007834:	20000df0 	.word	0x20000df0
 8007838:	20000de4 	.word	0x20000de4
 800783c:	2000090c 	.word	0x2000090c
 8007840:	20000908 	.word	0x20000908

08007844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10b      	bne.n	800786c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	60fb      	str	r3, [r7, #12]
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	e7fd      	b.n	8007868 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800786c:	4b07      	ldr	r3, [pc, #28]	@ (800788c <vTaskPlaceOnEventList+0x48>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3318      	adds	r3, #24
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fe fa86 	bl	8005d86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800787a:	2101      	movs	r1, #1
 800787c:	6838      	ldr	r0, [r7, #0]
 800787e:	f000 fb91 	bl	8007fa4 <prvAddCurrentTaskToDelayedList>
}
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000908 	.word	0x20000908

08007890 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10b      	bne.n	80078ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	617b      	str	r3, [r7, #20]
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	e7fd      	b.n	80078b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078ba:	4b0a      	ldr	r3, [pc, #40]	@ (80078e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3318      	adds	r3, #24
 80078c0:	4619      	mov	r1, r3
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7fe fa3b 	bl	8005d3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80078ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	68b8      	ldr	r0, [r7, #8]
 80078d8:	f000 fb64 	bl	8007fa4 <prvAddCurrentTaskToDelayedList>
	}
 80078dc:	bf00      	nop
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20000908 	.word	0x20000908

080078e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	3318      	adds	r3, #24
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fa6c 	bl	8005df8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007920:	4b1d      	ldr	r3, [pc, #116]	@ (8007998 <xTaskRemoveFromEventList+0xb0>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d11d      	bne.n	8007964 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3304      	adds	r3, #4
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe fa63 	bl	8005df8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007936:	4b19      	ldr	r3, [pc, #100]	@ (800799c <xTaskRemoveFromEventList+0xb4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	429a      	cmp	r2, r3
 800793c:	d903      	bls.n	8007946 <xTaskRemoveFromEventList+0x5e>
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007942:	4a16      	ldr	r2, [pc, #88]	@ (800799c <xTaskRemoveFromEventList+0xb4>)
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4a13      	ldr	r2, [pc, #76]	@ (80079a0 <xTaskRemoveFromEventList+0xb8>)
 8007954:	441a      	add	r2, r3
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	3304      	adds	r3, #4
 800795a:	4619      	mov	r1, r3
 800795c:	4610      	mov	r0, r2
 800795e:	f7fe f9ee 	bl	8005d3e <vListInsertEnd>
 8007962:	e005      	b.n	8007970 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	3318      	adds	r3, #24
 8007968:	4619      	mov	r1, r3
 800796a:	480e      	ldr	r0, [pc, #56]	@ (80079a4 <xTaskRemoveFromEventList+0xbc>)
 800796c:	f7fe f9e7 	bl	8005d3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007974:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <xTaskRemoveFromEventList+0xc0>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797a:	429a      	cmp	r2, r3
 800797c:	d905      	bls.n	800798a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800797e:	2301      	movs	r3, #1
 8007980:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007982:	4b0a      	ldr	r3, [pc, #40]	@ (80079ac <xTaskRemoveFromEventList+0xc4>)
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	e001      	b.n	800798e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800798e:	697b      	ldr	r3, [r7, #20]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20000e04 	.word	0x20000e04
 800799c:	20000de4 	.word	0x20000de4
 80079a0:	2000090c 	.word	0x2000090c
 80079a4:	20000d9c 	.word	0x20000d9c
 80079a8:	20000908 	.word	0x20000908
 80079ac:	20000df0 	.word	0x20000df0

080079b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079b8:	4b06      	ldr	r3, [pc, #24]	@ (80079d4 <vTaskInternalSetTimeOutState+0x24>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079c0:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <vTaskInternalSetTimeOutState+0x28>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	605a      	str	r2, [r3, #4]
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	20000df4 	.word	0x20000df4
 80079d8:	20000de0 	.word	0x20000de0

080079dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10b      	bne.n	8007a04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	613b      	str	r3, [r7, #16]
}
 80079fe:	bf00      	nop
 8007a00:	bf00      	nop
 8007a02:	e7fd      	b.n	8007a00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10b      	bne.n	8007a22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	60fb      	str	r3, [r7, #12]
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	e7fd      	b.n	8007a1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a22:	f000 ffa1 	bl	8008968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a26:	4b1d      	ldr	r3, [pc, #116]	@ (8007a9c <xTaskCheckForTimeOut+0xc0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a3e:	d102      	bne.n	8007a46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e023      	b.n	8007a8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	4b15      	ldr	r3, [pc, #84]	@ (8007aa0 <xTaskCheckForTimeOut+0xc4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d007      	beq.n	8007a62 <xTaskCheckForTimeOut+0x86>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d302      	bcc.n	8007a62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e015      	b.n	8007a8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d20b      	bcs.n	8007a84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff ff99 	bl	80079b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	61fb      	str	r3, [r7, #28]
 8007a82:	e004      	b.n	8007a8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a8e:	f000 ff9d 	bl	80089cc <vPortExitCritical>

	return xReturn;
 8007a92:	69fb      	ldr	r3, [r7, #28]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20000de0 	.word	0x20000de0
 8007aa0:	20000df4 	.word	0x20000df4

08007aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007aa8:	4b03      	ldr	r3, [pc, #12]	@ (8007ab8 <vTaskMissedYield+0x14>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	20000df0 	.word	0x20000df0

08007abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ac4:	f000 f852 	bl	8007b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ac8:	4b06      	ldr	r3, [pc, #24]	@ (8007ae4 <prvIdleTask+0x28>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d9f9      	bls.n	8007ac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ad0:	4b05      	ldr	r3, [pc, #20]	@ (8007ae8 <prvIdleTask+0x2c>)
 8007ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ae0:	e7f0      	b.n	8007ac4 <prvIdleTask+0x8>
 8007ae2:	bf00      	nop
 8007ae4:	2000090c 	.word	0x2000090c
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
 8007af6:	e00c      	b.n	8007b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4a12      	ldr	r2, [pc, #72]	@ (8007b4c <prvInitialiseTaskLists+0x60>)
 8007b04:	4413      	add	r3, r2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe f8ec 	bl	8005ce4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	607b      	str	r3, [r7, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b37      	cmp	r3, #55	@ 0x37
 8007b16:	d9ef      	bls.n	8007af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b18:	480d      	ldr	r0, [pc, #52]	@ (8007b50 <prvInitialiseTaskLists+0x64>)
 8007b1a:	f7fe f8e3 	bl	8005ce4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b1e:	480d      	ldr	r0, [pc, #52]	@ (8007b54 <prvInitialiseTaskLists+0x68>)
 8007b20:	f7fe f8e0 	bl	8005ce4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b24:	480c      	ldr	r0, [pc, #48]	@ (8007b58 <prvInitialiseTaskLists+0x6c>)
 8007b26:	f7fe f8dd 	bl	8005ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b2a:	480c      	ldr	r0, [pc, #48]	@ (8007b5c <prvInitialiseTaskLists+0x70>)
 8007b2c:	f7fe f8da 	bl	8005ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b30:	480b      	ldr	r0, [pc, #44]	@ (8007b60 <prvInitialiseTaskLists+0x74>)
 8007b32:	f7fe f8d7 	bl	8005ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b36:	4b0b      	ldr	r3, [pc, #44]	@ (8007b64 <prvInitialiseTaskLists+0x78>)
 8007b38:	4a05      	ldr	r2, [pc, #20]	@ (8007b50 <prvInitialiseTaskLists+0x64>)
 8007b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <prvInitialiseTaskLists+0x7c>)
 8007b3e:	4a05      	ldr	r2, [pc, #20]	@ (8007b54 <prvInitialiseTaskLists+0x68>)
 8007b40:	601a      	str	r2, [r3, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	2000090c 	.word	0x2000090c
 8007b50:	20000d6c 	.word	0x20000d6c
 8007b54:	20000d80 	.word	0x20000d80
 8007b58:	20000d9c 	.word	0x20000d9c
 8007b5c:	20000db0 	.word	0x20000db0
 8007b60:	20000dc8 	.word	0x20000dc8
 8007b64:	20000d94 	.word	0x20000d94
 8007b68:	20000d98 	.word	0x20000d98

08007b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b72:	e019      	b.n	8007ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b74:	f000 fef8 	bl	8008968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b78:	4b10      	ldr	r3, [pc, #64]	@ (8007bbc <prvCheckTasksWaitingTermination+0x50>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe f937 	bl	8005df8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <prvCheckTasksWaitingTermination+0x54>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	4a0b      	ldr	r2, [pc, #44]	@ (8007bc0 <prvCheckTasksWaitingTermination+0x54>)
 8007b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b94:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc4 <prvCheckTasksWaitingTermination+0x58>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8007bc4 <prvCheckTasksWaitingTermination+0x58>)
 8007b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b9e:	f000 ff15 	bl	80089cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f810 	bl	8007bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ba8:	4b06      	ldr	r3, [pc, #24]	@ (8007bc4 <prvCheckTasksWaitingTermination+0x58>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e1      	bne.n	8007b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20000db0 	.word	0x20000db0
 8007bc0:	20000ddc 	.word	0x20000ddc
 8007bc4:	20000dc4 	.word	0x20000dc4

08007bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d108      	bne.n	8007bec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 f8b2 	bl	8008d48 <vPortFree>
				vPortFree( pxTCB );
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 f8af 	bl	8008d48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bea:	e019      	b.n	8007c20 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d103      	bne.n	8007bfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 f8a6 	bl	8008d48 <vPortFree>
	}
 8007bfc:	e010      	b.n	8007c20 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d00b      	beq.n	8007c20 <prvDeleteTCB+0x58>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	60fb      	str	r3, [r7, #12]
}
 8007c1a:	bf00      	nop
 8007c1c:	bf00      	nop
 8007c1e:	e7fd      	b.n	8007c1c <prvDeleteTCB+0x54>
	}
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c60 <prvResetNextTaskUnblockTime+0x38>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d104      	bne.n	8007c42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c38:	4b0a      	ldr	r3, [pc, #40]	@ (8007c64 <prvResetNextTaskUnblockTime+0x3c>)
 8007c3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c40:	e008      	b.n	8007c54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c42:	4b07      	ldr	r3, [pc, #28]	@ (8007c60 <prvResetNextTaskUnblockTime+0x38>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	4a04      	ldr	r2, [pc, #16]	@ (8007c64 <prvResetNextTaskUnblockTime+0x3c>)
 8007c52:	6013      	str	r3, [r2, #0]
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	20000d94 	.word	0x20000d94
 8007c64:	20000dfc 	.word	0x20000dfc

08007c68 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007c6e:	4b05      	ldr	r3, [pc, #20]	@ (8007c84 <xTaskGetCurrentTaskHandle+0x1c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007c74:	687b      	ldr	r3, [r7, #4]
	}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20000908 	.word	0x20000908

08007c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <xTaskGetSchedulerState+0x34>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d102      	bne.n	8007c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c96:	2301      	movs	r3, #1
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	e008      	b.n	8007cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c9c:	4b08      	ldr	r3, [pc, #32]	@ (8007cc0 <xTaskGetSchedulerState+0x38>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d102      	bne.n	8007caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	e001      	b.n	8007cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007caa:	2300      	movs	r3, #0
 8007cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cae:	687b      	ldr	r3, [r7, #4]
	}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	20000de8 	.word	0x20000de8
 8007cc0:	20000e04 	.word	0x20000e04

08007cc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d051      	beq.n	8007d7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cde:	4b2a      	ldr	r3, [pc, #168]	@ (8007d88 <xTaskPriorityInherit+0xc4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d241      	bcs.n	8007d6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	db06      	blt.n	8007cfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf0:	4b25      	ldr	r3, [pc, #148]	@ (8007d88 <xTaskPriorityInherit+0xc4>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6959      	ldr	r1, [r3, #20]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007d8c <xTaskPriorityInherit+0xc8>)
 8007d10:	4413      	add	r3, r2
 8007d12:	4299      	cmp	r1, r3
 8007d14:	d122      	bne.n	8007d5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe f86c 	bl	8005df8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d20:	4b19      	ldr	r3, [pc, #100]	@ (8007d88 <xTaskPriorityInherit+0xc4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2e:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <xTaskPriorityInherit+0xcc>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d903      	bls.n	8007d3e <xTaskPriorityInherit+0x7a>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	4a15      	ldr	r2, [pc, #84]	@ (8007d90 <xTaskPriorityInherit+0xcc>)
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4a10      	ldr	r2, [pc, #64]	@ (8007d8c <xTaskPriorityInherit+0xc8>)
 8007d4c:	441a      	add	r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7fd fff2 	bl	8005d3e <vListInsertEnd>
 8007d5a:	e004      	b.n	8007d66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d88 <xTaskPriorityInherit+0xc4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d66:	2301      	movs	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e008      	b.n	8007d7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d70:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <xTaskPriorityInherit+0xc4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d201      	bcs.n	8007d7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
	}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000908 	.word	0x20000908
 8007d8c:	2000090c 	.word	0x2000090c
 8007d90:	20000de4 	.word	0x20000de4

08007d94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007da0:	2300      	movs	r3, #0
 8007da2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d058      	beq.n	8007e5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007daa:	4b2f      	ldr	r3, [pc, #188]	@ (8007e68 <xTaskPriorityDisinherit+0xd4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d00b      	beq.n	8007dcc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	60fb      	str	r3, [r7, #12]
}
 8007dc6:	bf00      	nop
 8007dc8:	bf00      	nop
 8007dca:	e7fd      	b.n	8007dc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10b      	bne.n	8007dec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	60bb      	str	r3, [r7, #8]
}
 8007de6:	bf00      	nop
 8007de8:	bf00      	nop
 8007dea:	e7fd      	b.n	8007de8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df0:	1e5a      	subs	r2, r3, #1
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d02c      	beq.n	8007e5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d128      	bne.n	8007e5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fd fff2 	bl	8005df8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e6c <xTaskPriorityDisinherit+0xd8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d903      	bls.n	8007e3c <xTaskPriorityDisinherit+0xa8>
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e38:	4a0c      	ldr	r2, [pc, #48]	@ (8007e6c <xTaskPriorityDisinherit+0xd8>)
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4a09      	ldr	r2, [pc, #36]	@ (8007e70 <xTaskPriorityDisinherit+0xdc>)
 8007e4a:	441a      	add	r2, r3
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f7fd ff73 	bl	8005d3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e5c:	697b      	ldr	r3, [r7, #20]
	}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000908 	.word	0x20000908
 8007e6c:	20000de4 	.word	0x20000de4
 8007e70:	2000090c 	.word	0x2000090c

08007e74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e82:	2301      	movs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d06c      	beq.n	8007f66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	60fb      	str	r3, [r7, #12]
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d902      	bls.n	8007ebc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	e002      	b.n	8007ec2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d04c      	beq.n	8007f66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d147      	bne.n	8007f66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ed6:	4b26      	ldr	r3, [pc, #152]	@ (8007f70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d10b      	bne.n	8007ef8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60bb      	str	r3, [r7, #8]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007efc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	69fa      	ldr	r2, [r7, #28]
 8007f02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db04      	blt.n	8007f16 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	6959      	ldr	r1, [r3, #20]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4a13      	ldr	r2, [pc, #76]	@ (8007f74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007f26:	4413      	add	r3, r2
 8007f28:	4299      	cmp	r1, r3
 8007f2a:	d11c      	bne.n	8007f66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fd ff61 	bl	8005df8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d903      	bls.n	8007f4a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	4a0c      	ldr	r2, [pc, #48]	@ (8007f78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4a07      	ldr	r2, [pc, #28]	@ (8007f74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007f58:	441a      	add	r2, r3
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	4619      	mov	r1, r3
 8007f60:	4610      	mov	r0, r2
 8007f62:	f7fd feec 	bl	8005d3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f66:	bf00      	nop
 8007f68:	3720      	adds	r7, #32
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000908 	.word	0x20000908
 8007f74:	2000090c 	.word	0x2000090c
 8007f78:	20000de4 	.word	0x20000de4

08007f7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f80:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d004      	beq.n	8007f92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f88:	4b05      	ldr	r3, [pc, #20]	@ (8007fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f8e:	3201      	adds	r2, #1
 8007f90:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007f92:	4b03      	ldr	r3, [pc, #12]	@ (8007fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f94:	681b      	ldr	r3, [r3, #0]
	}
 8007f96:	4618      	mov	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	20000908 	.word	0x20000908

08007fa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fae:	4b21      	ldr	r3, [pc, #132]	@ (8008034 <prvAddCurrentTaskToDelayedList+0x90>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fb4:	4b20      	ldr	r3, [pc, #128]	@ (8008038 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fd ff1c 	bl	8005df8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fc6:	d10a      	bne.n	8007fde <prvAddCurrentTaskToDelayedList+0x3a>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fce:	4b1a      	ldr	r3, [pc, #104]	@ (8008038 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4819      	ldr	r0, [pc, #100]	@ (800803c <prvAddCurrentTaskToDelayedList+0x98>)
 8007fd8:	f7fd feb1 	bl	8005d3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fdc:	e026      	b.n	800802c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fe6:	4b14      	ldr	r3, [pc, #80]	@ (8008038 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d209      	bcs.n	800800a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ff6:	4b12      	ldr	r3, [pc, #72]	@ (8008040 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8008038 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3304      	adds	r3, #4
 8008000:	4619      	mov	r1, r3
 8008002:	4610      	mov	r0, r2
 8008004:	f7fd febf 	bl	8005d86 <vListInsert>
}
 8008008:	e010      	b.n	800802c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800800a:	4b0e      	ldr	r3, [pc, #56]	@ (8008044 <prvAddCurrentTaskToDelayedList+0xa0>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4b0a      	ldr	r3, [pc, #40]	@ (8008038 <prvAddCurrentTaskToDelayedList+0x94>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fd feb5 	bl	8005d86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800801c:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <prvAddCurrentTaskToDelayedList+0xa4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	429a      	cmp	r2, r3
 8008024:	d202      	bcs.n	800802c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008026:	4a08      	ldr	r2, [pc, #32]	@ (8008048 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	6013      	str	r3, [r2, #0]
}
 800802c:	bf00      	nop
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	20000de0 	.word	0x20000de0
 8008038:	20000908 	.word	0x20000908
 800803c:	20000dc8 	.word	0x20000dc8
 8008040:	20000d98 	.word	0x20000d98
 8008044:	20000d94 	.word	0x20000d94
 8008048:	20000dfc 	.word	0x20000dfc

0800804c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08a      	sub	sp, #40	@ 0x28
 8008050:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008056:	f000 fb13 	bl	8008680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800805a:	4b1d      	ldr	r3, [pc, #116]	@ (80080d0 <xTimerCreateTimerTask+0x84>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d021      	beq.n	80080a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800806a:	1d3a      	adds	r2, r7, #4
 800806c:	f107 0108 	add.w	r1, r7, #8
 8008070:	f107 030c 	add.w	r3, r7, #12
 8008074:	4618      	mov	r0, r3
 8008076:	f7fd fe1b 	bl	8005cb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	9202      	str	r2, [sp, #8]
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	2302      	movs	r3, #2
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	2300      	movs	r3, #0
 800808a:	460a      	mov	r2, r1
 800808c:	4911      	ldr	r1, [pc, #68]	@ (80080d4 <xTimerCreateTimerTask+0x88>)
 800808e:	4812      	ldr	r0, [pc, #72]	@ (80080d8 <xTimerCreateTimerTask+0x8c>)
 8008090:	f7fe ffc0 	bl	8007014 <xTaskCreateStatic>
 8008094:	4603      	mov	r3, r0
 8008096:	4a11      	ldr	r2, [pc, #68]	@ (80080dc <xTimerCreateTimerTask+0x90>)
 8008098:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800809a:	4b10      	ldr	r3, [pc, #64]	@ (80080dc <xTimerCreateTimerTask+0x90>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080a2:	2301      	movs	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	613b      	str	r3, [r7, #16]
}
 80080be:	bf00      	nop
 80080c0:	bf00      	nop
 80080c2:	e7fd      	b.n	80080c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80080c4:	697b      	ldr	r3, [r7, #20]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000e38 	.word	0x20000e38
 80080d4:	0800a374 	.word	0x0800a374
 80080d8:	08008219 	.word	0x08008219
 80080dc:	20000e3c 	.word	0x20000e3c

080080e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	@ 0x28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10b      	bne.n	8008110 <xTimerGenericCommand+0x30>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	623b      	str	r3, [r7, #32]
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	e7fd      	b.n	800810c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008110:	4b19      	ldr	r3, [pc, #100]	@ (8008178 <xTimerGenericCommand+0x98>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d02a      	beq.n	800816e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b05      	cmp	r3, #5
 8008128:	dc18      	bgt.n	800815c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800812a:	f7ff fdad 	bl	8007c88 <xTaskGetSchedulerState>
 800812e:	4603      	mov	r3, r0
 8008130:	2b02      	cmp	r3, #2
 8008132:	d109      	bne.n	8008148 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008134:	4b10      	ldr	r3, [pc, #64]	@ (8008178 <xTimerGenericCommand+0x98>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	f107 0110 	add.w	r1, r7, #16
 800813c:	2300      	movs	r3, #0
 800813e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008140:	f7fe f8f0 	bl	8006324 <xQueueGenericSend>
 8008144:	6278      	str	r0, [r7, #36]	@ 0x24
 8008146:	e012      	b.n	800816e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008148:	4b0b      	ldr	r3, [pc, #44]	@ (8008178 <xTimerGenericCommand+0x98>)
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	f107 0110 	add.w	r1, r7, #16
 8008150:	2300      	movs	r3, #0
 8008152:	2200      	movs	r2, #0
 8008154:	f7fe f8e6 	bl	8006324 <xQueueGenericSend>
 8008158:	6278      	str	r0, [r7, #36]	@ 0x24
 800815a:	e008      	b.n	800816e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800815c:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <xTimerGenericCommand+0x98>)
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	f107 0110 	add.w	r1, r7, #16
 8008164:	2300      	movs	r3, #0
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	f7fe f9de 	bl	8006528 <xQueueGenericSendFromISR>
 800816c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008170:	4618      	mov	r0, r3
 8008172:	3728      	adds	r7, #40	@ 0x28
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000e38 	.word	0x20000e38

0800817c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af02      	add	r7, sp, #8
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008186:	4b23      	ldr	r3, [pc, #140]	@ (8008214 <prvProcessExpiredTimer+0x98>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3304      	adds	r3, #4
 8008194:	4618      	mov	r0, r3
 8008196:	f7fd fe2f 	bl	8005df8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d023      	beq.n	80081f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	699a      	ldr	r2, [r3, #24]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	18d1      	adds	r1, r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	6978      	ldr	r0, [r7, #20]
 80081b6:	f000 f8d5 	bl	8008364 <prvInsertTimerInActiveList>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d020      	beq.n	8008202 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081c0:	2300      	movs	r3, #0
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	2300      	movs	r3, #0
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	2100      	movs	r1, #0
 80081ca:	6978      	ldr	r0, [r7, #20]
 80081cc:	f7ff ff88 	bl	80080e0 <xTimerGenericCommand>
 80081d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d114      	bne.n	8008202 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	60fb      	str	r3, [r7, #12]
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	e7fd      	b.n	80081ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f6:	f023 0301 	bic.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	6978      	ldr	r0, [r7, #20]
 8008208:	4798      	blx	r3
}
 800820a:	bf00      	nop
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000e30 	.word	0x20000e30

08008218 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008220:	f107 0308 	add.w	r3, r7, #8
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f859 	bl	80082dc <prvGetNextExpireTime>
 800822a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 f805 	bl	8008240 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008236:	f000 f8d7 	bl	80083e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800823a:	bf00      	nop
 800823c:	e7f0      	b.n	8008220 <prvTimerTask+0x8>
	...

08008240 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800824a:	f7ff f927 	bl	800749c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800824e:	f107 0308 	add.w	r3, r7, #8
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f866 	bl	8008324 <prvSampleTimeNow>
 8008258:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d130      	bne.n	80082c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <prvProcessTimerOrBlockTask+0x3c>
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	429a      	cmp	r2, r3
 800826c:	d806      	bhi.n	800827c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800826e:	f7ff f923 	bl	80074b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff ff81 	bl	800817c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800827a:	e024      	b.n	80082c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d008      	beq.n	8008294 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008282:	4b13      	ldr	r3, [pc, #76]	@ (80082d0 <prvProcessTimerOrBlockTask+0x90>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <prvProcessTimerOrBlockTask+0x50>
 800828c:	2301      	movs	r3, #1
 800828e:	e000      	b.n	8008292 <prvProcessTimerOrBlockTask+0x52>
 8008290:	2300      	movs	r3, #0
 8008292:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008294:	4b0f      	ldr	r3, [pc, #60]	@ (80082d4 <prvProcessTimerOrBlockTask+0x94>)
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4619      	mov	r1, r3
 80082a2:	f7fe fe83 	bl	8006fac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082a6:	f7ff f907 	bl	80074b8 <xTaskResumeAll>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10a      	bne.n	80082c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082b0:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <prvProcessTimerOrBlockTask+0x98>)
 80082b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	f3bf 8f6f 	isb	sy
}
 80082c0:	e001      	b.n	80082c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082c2:	f7ff f8f9 	bl	80074b8 <xTaskResumeAll>
}
 80082c6:	bf00      	nop
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20000e34 	.word	0x20000e34
 80082d4:	20000e38 	.word	0x20000e38
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008320 <prvGetNextExpireTime+0x44>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <prvGetNextExpireTime+0x16>
 80082ee:	2201      	movs	r2, #1
 80082f0:	e000      	b.n	80082f4 <prvGetNextExpireTime+0x18>
 80082f2:	2200      	movs	r2, #0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d105      	bne.n	800830c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008300:	4b07      	ldr	r3, [pc, #28]	@ (8008320 <prvGetNextExpireTime+0x44>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	e001      	b.n	8008310 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008310:	68fb      	ldr	r3, [r7, #12]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	20000e30 	.word	0x20000e30

08008324 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800832c:	f7ff f962 	bl	80075f4 <xTaskGetTickCount>
 8008330:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008332:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <prvSampleTimeNow+0x3c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	429a      	cmp	r2, r3
 800833a:	d205      	bcs.n	8008348 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800833c:	f000 f93a 	bl	80085b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e002      	b.n	800834e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800834e:	4a04      	ldr	r2, [pc, #16]	@ (8008360 <prvSampleTimeNow+0x3c>)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008354:	68fb      	ldr	r3, [r7, #12]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20000e40 	.word	0x20000e40

08008364 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d812      	bhi.n	80083b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	429a      	cmp	r2, r3
 8008396:	d302      	bcc.n	800839e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008398:	2301      	movs	r3, #1
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e01b      	b.n	80083d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800839e:	4b10      	ldr	r3, [pc, #64]	@ (80083e0 <prvInsertTimerInActiveList+0x7c>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3304      	adds	r3, #4
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f7fd fcec 	bl	8005d86 <vListInsert>
 80083ae:	e012      	b.n	80083d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d206      	bcs.n	80083c6 <prvInsertTimerInActiveList+0x62>
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	e007      	b.n	80083d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083c6:	4b07      	ldr	r3, [pc, #28]	@ (80083e4 <prvInsertTimerInActiveList+0x80>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3304      	adds	r3, #4
 80083ce:	4619      	mov	r1, r3
 80083d0:	4610      	mov	r0, r2
 80083d2:	f7fd fcd8 	bl	8005d86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083d6:	697b      	ldr	r3, [r7, #20]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000e34 	.word	0x20000e34
 80083e4:	20000e30 	.word	0x20000e30

080083e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	@ 0x38
 80083ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083ee:	e0ce      	b.n	800858e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	da19      	bge.n	800842a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083f6:	1d3b      	adds	r3, r7, #4
 80083f8:	3304      	adds	r3, #4
 80083fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10b      	bne.n	800841a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	61fb      	str	r3, [r7, #28]
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	e7fd      	b.n	8008416 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800841a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008420:	6850      	ldr	r0, [r2, #4]
 8008422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008424:	6892      	ldr	r2, [r2, #8]
 8008426:	4611      	mov	r1, r2
 8008428:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f2c0 80ae 	blt.w	800858e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d004      	beq.n	8008448 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	3304      	adds	r3, #4
 8008442:	4618      	mov	r0, r3
 8008444:	f7fd fcd8 	bl	8005df8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008448:	463b      	mov	r3, r7
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff ff6a 	bl	8008324 <prvSampleTimeNow>
 8008450:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b09      	cmp	r3, #9
 8008456:	f200 8097 	bhi.w	8008588 <prvProcessReceivedCommands+0x1a0>
 800845a:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <prvProcessReceivedCommands+0x78>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008489 	.word	0x08008489
 8008464:	08008489 	.word	0x08008489
 8008468:	08008489 	.word	0x08008489
 800846c:	080084ff 	.word	0x080084ff
 8008470:	08008513 	.word	0x08008513
 8008474:	0800855f 	.word	0x0800855f
 8008478:	08008489 	.word	0x08008489
 800847c:	08008489 	.word	0x08008489
 8008480:	080084ff 	.word	0x080084ff
 8008484:	08008513 	.word	0x08008513
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800848e:	f043 0301 	orr.w	r3, r3, #1
 8008492:	b2da      	uxtb	r2, r3
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	18d1      	adds	r1, r2, r3
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a8:	f7ff ff5c 	bl	8008364 <prvInsertTimerInActiveList>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d06c      	beq.n	800858c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d061      	beq.n	800858c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	441a      	add	r2, r3
 80084d0:	2300      	movs	r3, #0
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084da:	f7ff fe01 	bl	80080e0 <xTimerGenericCommand>
 80084de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d152      	bne.n	800858c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	61bb      	str	r3, [r7, #24]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008504:	f023 0301 	bic.w	r3, r3, #1
 8008508:	b2da      	uxtb	r2, r3
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008510:	e03d      	b.n	800858e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	b2da      	uxtb	r2, r3
 800851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008520:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008528:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10b      	bne.n	800854a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	617b      	str	r3, [r7, #20]
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	e7fd      	b.n	8008546 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800854a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008550:	18d1      	adds	r1, r2, r3
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008558:	f7ff ff04 	bl	8008364 <prvInsertTimerInActiveList>
					break;
 800855c:	e017      	b.n	800858e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d103      	bne.n	8008574 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800856c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800856e:	f000 fbeb 	bl	8008d48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008572:	e00c      	b.n	800858e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008576:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800857a:	f023 0301 	bic.w	r3, r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008586:	e002      	b.n	800858e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008588:	bf00      	nop
 800858a:	e000      	b.n	800858e <prvProcessReceivedCommands+0x1a6>
					break;
 800858c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800858e:	4b08      	ldr	r3, [pc, #32]	@ (80085b0 <prvProcessReceivedCommands+0x1c8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	1d39      	adds	r1, r7, #4
 8008594:	2200      	movs	r2, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe f8f4 	bl	8006784 <xQueueReceive>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f47f af26 	bne.w	80083f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	3730      	adds	r7, #48	@ 0x30
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000e38 	.word	0x20000e38

080085b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085ba:	e049      	b.n	8008650 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085bc:	4b2e      	ldr	r3, [pc, #184]	@ (8008678 <prvSwitchTimerLists+0xc4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008678 <prvSwitchTimerLists+0xc4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fd fc0f 	bl	8005df8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d02f      	beq.n	8008650 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	4413      	add	r3, r2
 80085f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d90e      	bls.n	8008620 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800860e:	4b1a      	ldr	r3, [pc, #104]	@ (8008678 <prvSwitchTimerLists+0xc4>)
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fd fbb4 	bl	8005d86 <vListInsert>
 800861e:	e017      	b.n	8008650 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008620:	2300      	movs	r3, #0
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	2100      	movs	r1, #0
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff fd58 	bl	80080e0 <xTimerGenericCommand>
 8008630:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10b      	bne.n	8008650 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	603b      	str	r3, [r7, #0]
}
 800864a:	bf00      	nop
 800864c:	bf00      	nop
 800864e:	e7fd      	b.n	800864c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008650:	4b09      	ldr	r3, [pc, #36]	@ (8008678 <prvSwitchTimerLists+0xc4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1b0      	bne.n	80085bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800865a:	4b07      	ldr	r3, [pc, #28]	@ (8008678 <prvSwitchTimerLists+0xc4>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008660:	4b06      	ldr	r3, [pc, #24]	@ (800867c <prvSwitchTimerLists+0xc8>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a04      	ldr	r2, [pc, #16]	@ (8008678 <prvSwitchTimerLists+0xc4>)
 8008666:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008668:	4a04      	ldr	r2, [pc, #16]	@ (800867c <prvSwitchTimerLists+0xc8>)
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	6013      	str	r3, [r2, #0]
}
 800866e:	bf00      	nop
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000e30 	.word	0x20000e30
 800867c:	20000e34 	.word	0x20000e34

08008680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008686:	f000 f96f 	bl	8008968 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800868a:	4b15      	ldr	r3, [pc, #84]	@ (80086e0 <prvCheckForValidListAndQueue+0x60>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d120      	bne.n	80086d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008692:	4814      	ldr	r0, [pc, #80]	@ (80086e4 <prvCheckForValidListAndQueue+0x64>)
 8008694:	f7fd fb26 	bl	8005ce4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008698:	4813      	ldr	r0, [pc, #76]	@ (80086e8 <prvCheckForValidListAndQueue+0x68>)
 800869a:	f7fd fb23 	bl	8005ce4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800869e:	4b13      	ldr	r3, [pc, #76]	@ (80086ec <prvCheckForValidListAndQueue+0x6c>)
 80086a0:	4a10      	ldr	r2, [pc, #64]	@ (80086e4 <prvCheckForValidListAndQueue+0x64>)
 80086a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086a4:	4b12      	ldr	r3, [pc, #72]	@ (80086f0 <prvCheckForValidListAndQueue+0x70>)
 80086a6:	4a10      	ldr	r2, [pc, #64]	@ (80086e8 <prvCheckForValidListAndQueue+0x68>)
 80086a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086aa:	2300      	movs	r3, #0
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	4b11      	ldr	r3, [pc, #68]	@ (80086f4 <prvCheckForValidListAndQueue+0x74>)
 80086b0:	4a11      	ldr	r2, [pc, #68]	@ (80086f8 <prvCheckForValidListAndQueue+0x78>)
 80086b2:	2110      	movs	r1, #16
 80086b4:	200a      	movs	r0, #10
 80086b6:	f7fd fc33 	bl	8005f20 <xQueueGenericCreateStatic>
 80086ba:	4603      	mov	r3, r0
 80086bc:	4a08      	ldr	r2, [pc, #32]	@ (80086e0 <prvCheckForValidListAndQueue+0x60>)
 80086be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086c0:	4b07      	ldr	r3, [pc, #28]	@ (80086e0 <prvCheckForValidListAndQueue+0x60>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d005      	beq.n	80086d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086c8:	4b05      	ldr	r3, [pc, #20]	@ (80086e0 <prvCheckForValidListAndQueue+0x60>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	490b      	ldr	r1, [pc, #44]	@ (80086fc <prvCheckForValidListAndQueue+0x7c>)
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fc18 	bl	8006f04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086d4:	f000 f97a 	bl	80089cc <vPortExitCritical>
}
 80086d8:	bf00      	nop
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20000e38 	.word	0x20000e38
 80086e4:	20000e08 	.word	0x20000e08
 80086e8:	20000e1c 	.word	0x20000e1c
 80086ec:	20000e30 	.word	0x20000e30
 80086f0:	20000e34 	.word	0x20000e34
 80086f4:	20000ee4 	.word	0x20000ee4
 80086f8:	20000e44 	.word	0x20000e44
 80086fc:	0800a37c 	.word	0x0800a37c

08008700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3b04      	subs	r3, #4
 8008710:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3b04      	subs	r3, #4
 800871e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f023 0201 	bic.w	r2, r3, #1
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3b04      	subs	r3, #4
 800872e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008730:	4a0c      	ldr	r2, [pc, #48]	@ (8008764 <pxPortInitialiseStack+0x64>)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3b14      	subs	r3, #20
 800873a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3b04      	subs	r3, #4
 8008746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f06f 0202 	mvn.w	r2, #2
 800874e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3b20      	subs	r3, #32
 8008754:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008756:	68fb      	ldr	r3, [r7, #12]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	08008769 	.word	0x08008769

08008768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008772:	4b13      	ldr	r3, [pc, #76]	@ (80087c0 <prvTaskExitError+0x58>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800877a:	d00b      	beq.n	8008794 <prvTaskExitError+0x2c>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60fb      	str	r3, [r7, #12]
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <prvTaskExitError+0x28>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	60bb      	str	r3, [r7, #8]
}
 80087a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087a8:	bf00      	nop
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d0fc      	beq.n	80087aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	2000000c 	.word	0x2000000c
	...

080087d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087d0:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <pxCurrentTCBConst2>)
 80087d2:	6819      	ldr	r1, [r3, #0]
 80087d4:	6808      	ldr	r0, [r1, #0]
 80087d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	f380 8809 	msr	PSP, r0
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f04f 0000 	mov.w	r0, #0
 80087e6:	f380 8811 	msr	BASEPRI, r0
 80087ea:	4770      	bx	lr
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst2>:
 80087f0:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087f8:	4808      	ldr	r0, [pc, #32]	@ (800881c <prvPortStartFirstTask+0x24>)
 80087fa:	6800      	ldr	r0, [r0, #0]
 80087fc:	6800      	ldr	r0, [r0, #0]
 80087fe:	f380 8808 	msr	MSP, r0
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f380 8814 	msr	CONTROL, r0
 800880a:	b662      	cpsie	i
 800880c:	b661      	cpsie	f
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	df00      	svc	0
 8008818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800881a:	bf00      	nop
 800881c:	e000ed08 	.word	0xe000ed08

08008820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008826:	4b47      	ldr	r3, [pc, #284]	@ (8008944 <xPortStartScheduler+0x124>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a47      	ldr	r2, [pc, #284]	@ (8008948 <xPortStartScheduler+0x128>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d10b      	bne.n	8008848 <xPortStartScheduler+0x28>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	613b      	str	r3, [r7, #16]
}
 8008842:	bf00      	nop
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008848:	4b3e      	ldr	r3, [pc, #248]	@ (8008944 <xPortStartScheduler+0x124>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a3f      	ldr	r2, [pc, #252]	@ (800894c <xPortStartScheduler+0x12c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d10b      	bne.n	800886a <xPortStartScheduler+0x4a>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	60fb      	str	r3, [r7, #12]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800886a:	4b39      	ldr	r3, [pc, #228]	@ (8008950 <xPortStartScheduler+0x130>)
 800886c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b2db      	uxtb	r3, r3
 8008874:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	22ff      	movs	r2, #255	@ 0xff
 800887a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4b31      	ldr	r3, [pc, #196]	@ (8008954 <xPortStartScheduler+0x134>)
 8008890:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008892:	4b31      	ldr	r3, [pc, #196]	@ (8008958 <xPortStartScheduler+0x138>)
 8008894:	2207      	movs	r2, #7
 8008896:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008898:	e009      	b.n	80088ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800889a:	4b2f      	ldr	r3, [pc, #188]	@ (8008958 <xPortStartScheduler+0x138>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3b01      	subs	r3, #1
 80088a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008958 <xPortStartScheduler+0x138>)
 80088a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b6:	2b80      	cmp	r3, #128	@ 0x80
 80088b8:	d0ef      	beq.n	800889a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088ba:	4b27      	ldr	r3, [pc, #156]	@ (8008958 <xPortStartScheduler+0x138>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f1c3 0307 	rsb	r3, r3, #7
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d00b      	beq.n	80088de <xPortStartScheduler+0xbe>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	60bb      	str	r3, [r7, #8]
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088de:	4b1e      	ldr	r3, [pc, #120]	@ (8008958 <xPortStartScheduler+0x138>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	021b      	lsls	r3, r3, #8
 80088e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008958 <xPortStartScheduler+0x138>)
 80088e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008958 <xPortStartScheduler+0x138>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088f0:	4a19      	ldr	r2, [pc, #100]	@ (8008958 <xPortStartScheduler+0x138>)
 80088f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088fc:	4b17      	ldr	r3, [pc, #92]	@ (800895c <xPortStartScheduler+0x13c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a16      	ldr	r2, [pc, #88]	@ (800895c <xPortStartScheduler+0x13c>)
 8008902:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008908:	4b14      	ldr	r3, [pc, #80]	@ (800895c <xPortStartScheduler+0x13c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a13      	ldr	r2, [pc, #76]	@ (800895c <xPortStartScheduler+0x13c>)
 800890e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008914:	f000 f8da 	bl	8008acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008918:	4b11      	ldr	r3, [pc, #68]	@ (8008960 <xPortStartScheduler+0x140>)
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800891e:	f000 f8f9 	bl	8008b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008922:	4b10      	ldr	r3, [pc, #64]	@ (8008964 <xPortStartScheduler+0x144>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a0f      	ldr	r2, [pc, #60]	@ (8008964 <xPortStartScheduler+0x144>)
 8008928:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800892c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800892e:	f7ff ff63 	bl	80087f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008932:	f7fe ff29 	bl	8007788 <vTaskSwitchContext>
	prvTaskExitError();
 8008936:	f7ff ff17 	bl	8008768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	e000ed00 	.word	0xe000ed00
 8008948:	410fc271 	.word	0x410fc271
 800894c:	410fc270 	.word	0x410fc270
 8008950:	e000e400 	.word	0xe000e400
 8008954:	20000f34 	.word	0x20000f34
 8008958:	20000f38 	.word	0x20000f38
 800895c:	e000ed20 	.word	0xe000ed20
 8008960:	2000000c 	.word	0x2000000c
 8008964:	e000ef34 	.word	0xe000ef34

08008968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	607b      	str	r3, [r7, #4]
}
 8008980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008982:	4b10      	ldr	r3, [pc, #64]	@ (80089c4 <vPortEnterCritical+0x5c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3301      	adds	r3, #1
 8008988:	4a0e      	ldr	r2, [pc, #56]	@ (80089c4 <vPortEnterCritical+0x5c>)
 800898a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800898c:	4b0d      	ldr	r3, [pc, #52]	@ (80089c4 <vPortEnterCritical+0x5c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d110      	bne.n	80089b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008994:	4b0c      	ldr	r3, [pc, #48]	@ (80089c8 <vPortEnterCritical+0x60>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00b      	beq.n	80089b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	603b      	str	r3, [r7, #0]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <vPortEnterCritical+0x4a>
	}
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	2000000c 	.word	0x2000000c
 80089c8:	e000ed04 	.word	0xe000ed04

080089cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089d2:	4b12      	ldr	r3, [pc, #72]	@ (8008a1c <vPortExitCritical+0x50>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10b      	bne.n	80089f2 <vPortExitCritical+0x26>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	607b      	str	r3, [r7, #4]
}
 80089ec:	bf00      	nop
 80089ee:	bf00      	nop
 80089f0:	e7fd      	b.n	80089ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089f2:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <vPortExitCritical+0x50>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	4a08      	ldr	r2, [pc, #32]	@ (8008a1c <vPortExitCritical+0x50>)
 80089fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <vPortExitCritical+0x50>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <vPortExitCritical+0x44>
 8008a04:	2300      	movs	r3, #0
 8008a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	f383 8811 	msr	BASEPRI, r3
}
 8008a0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	2000000c 	.word	0x2000000c

08008a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a20:	f3ef 8009 	mrs	r0, PSP
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	4b15      	ldr	r3, [pc, #84]	@ (8008a80 <pxCurrentTCBConst>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	f01e 0f10 	tst.w	lr, #16
 8008a30:	bf08      	it	eq
 8008a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	6010      	str	r0, [r2, #0]
 8008a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a44:	f380 8811 	msr	BASEPRI, r0
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f7fe fe9a 	bl	8007788 <vTaskSwitchContext>
 8008a54:	f04f 0000 	mov.w	r0, #0
 8008a58:	f380 8811 	msr	BASEPRI, r0
 8008a5c:	bc09      	pop	{r0, r3}
 8008a5e:	6819      	ldr	r1, [r3, #0]
 8008a60:	6808      	ldr	r0, [r1, #0]
 8008a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a66:	f01e 0f10 	tst.w	lr, #16
 8008a6a:	bf08      	it	eq
 8008a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a70:	f380 8809 	msr	PSP, r0
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	f3af 8000 	nop.w

08008a80 <pxCurrentTCBConst>:
 8008a80:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
}
 8008aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008aa2:	f7fe fdb7 	bl	8007614 <xTaskIncrementTick>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008aac:	4b06      	ldr	r3, [pc, #24]	@ (8008ac8 <xPortSysTickHandler+0x40>)
 8008aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f383 8811 	msr	BASEPRI, r3
}
 8008abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8008b00 <vPortSetupTimerInterrupt+0x34>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <vPortSetupTimerInterrupt+0x38>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b08 <vPortSetupTimerInterrupt+0x3c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8008b0c <vPortSetupTimerInterrupt+0x40>)
 8008ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae6:	099b      	lsrs	r3, r3, #6
 8008ae8:	4a09      	ldr	r2, [pc, #36]	@ (8008b10 <vPortSetupTimerInterrupt+0x44>)
 8008aea:	3b01      	subs	r3, #1
 8008aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008aee:	4b04      	ldr	r3, [pc, #16]	@ (8008b00 <vPortSetupTimerInterrupt+0x34>)
 8008af0:	2207      	movs	r2, #7
 8008af2:	601a      	str	r2, [r3, #0]
}
 8008af4:	bf00      	nop
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	e000e010 	.word	0xe000e010
 8008b04:	e000e018 	.word	0xe000e018
 8008b08:	20000000 	.word	0x20000000
 8008b0c:	10624dd3 	.word	0x10624dd3
 8008b10:	e000e014 	.word	0xe000e014

08008b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b24 <vPortEnableVFP+0x10>
 8008b18:	6801      	ldr	r1, [r0, #0]
 8008b1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b1e:	6001      	str	r1, [r0, #0]
 8008b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b22:	bf00      	nop
 8008b24:	e000ed88 	.word	0xe000ed88

08008b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b2e:	f3ef 8305 	mrs	r3, IPSR
 8008b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b0f      	cmp	r3, #15
 8008b38:	d915      	bls.n	8008b66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b3a:	4a18      	ldr	r2, [pc, #96]	@ (8008b9c <vPortValidateInterruptPriority+0x74>)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b44:	4b16      	ldr	r3, [pc, #88]	@ (8008ba0 <vPortValidateInterruptPriority+0x78>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	7afa      	ldrb	r2, [r7, #11]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d20b      	bcs.n	8008b66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	607b      	str	r3, [r7, #4]
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	e7fd      	b.n	8008b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba4 <vPortValidateInterruptPriority+0x7c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba8 <vPortValidateInterruptPriority+0x80>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d90b      	bls.n	8008b8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	603b      	str	r3, [r7, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	e7fd      	b.n	8008b8a <vPortValidateInterruptPriority+0x62>
	}
 8008b8e:	bf00      	nop
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	e000e3f0 	.word	0xe000e3f0
 8008ba0:	20000f34 	.word	0x20000f34
 8008ba4:	e000ed0c 	.word	0xe000ed0c
 8008ba8:	20000f38 	.word	0x20000f38

08008bac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	@ 0x28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bb8:	f7fe fc70 	bl	800749c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8008d30 <pvPortMalloc+0x184>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bc4:	f000 f924 	bl	8008e10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8008d34 <pvPortMalloc+0x188>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f040 8095 	bne.w	8008d00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01e      	beq.n	8008c1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008bdc:	2208      	movs	r2, #8
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4413      	add	r3, r2
 8008be2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d015      	beq.n	8008c1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f023 0307 	bic.w	r3, r3, #7
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <pvPortMalloc+0x6e>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	617b      	str	r3, [r7, #20]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d06f      	beq.n	8008d00 <pvPortMalloc+0x154>
 8008c20:	4b45      	ldr	r3, [pc, #276]	@ (8008d38 <pvPortMalloc+0x18c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d86a      	bhi.n	8008d00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c2a:	4b44      	ldr	r3, [pc, #272]	@ (8008d3c <pvPortMalloc+0x190>)
 8008c2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c2e:	4b43      	ldr	r3, [pc, #268]	@ (8008d3c <pvPortMalloc+0x190>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c34:	e004      	b.n	8008c40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d903      	bls.n	8008c52 <pvPortMalloc+0xa6>
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f1      	bne.n	8008c36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c52:	4b37      	ldr	r3, [pc, #220]	@ (8008d30 <pvPortMalloc+0x184>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d051      	beq.n	8008d00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2208      	movs	r2, #8
 8008c62:	4413      	add	r3, r2
 8008c64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	1ad2      	subs	r2, r2, r3
 8008c76:	2308      	movs	r3, #8
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d920      	bls.n	8008cc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4413      	add	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <pvPortMalloc+0xfc>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	613b      	str	r3, [r7, #16]
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	1ad2      	subs	r2, r2, r3
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cba:	69b8      	ldr	r0, [r7, #24]
 8008cbc:	f000 f90a 	bl	8008ed4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d38 <pvPortMalloc+0x18c>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	4a1b      	ldr	r2, [pc, #108]	@ (8008d38 <pvPortMalloc+0x18c>)
 8008ccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cce:	4b1a      	ldr	r3, [pc, #104]	@ (8008d38 <pvPortMalloc+0x18c>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d40 <pvPortMalloc+0x194>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d203      	bcs.n	8008ce2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cda:	4b17      	ldr	r3, [pc, #92]	@ (8008d38 <pvPortMalloc+0x18c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a18      	ldr	r2, [pc, #96]	@ (8008d40 <pvPortMalloc+0x194>)
 8008ce0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	4b13      	ldr	r3, [pc, #76]	@ (8008d34 <pvPortMalloc+0x188>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008cf6:	4b13      	ldr	r3, [pc, #76]	@ (8008d44 <pvPortMalloc+0x198>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	4a11      	ldr	r2, [pc, #68]	@ (8008d44 <pvPortMalloc+0x198>)
 8008cfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d00:	f7fe fbda 	bl	80074b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00b      	beq.n	8008d26 <pvPortMalloc+0x17a>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	60fb      	str	r3, [r7, #12]
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	e7fd      	b.n	8008d22 <pvPortMalloc+0x176>
	return pvReturn;
 8008d26:	69fb      	ldr	r3, [r7, #28]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3728      	adds	r7, #40	@ 0x28
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20003684 	.word	0x20003684
 8008d34:	20003698 	.word	0x20003698
 8008d38:	20003688 	.word	0x20003688
 8008d3c:	2000367c 	.word	0x2000367c
 8008d40:	2000368c 	.word	0x2000368c
 8008d44:	20003690 	.word	0x20003690

08008d48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d04f      	beq.n	8008dfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d5a:	2308      	movs	r3, #8
 8008d5c:	425b      	negs	r3, r3
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4413      	add	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	4b25      	ldr	r3, [pc, #148]	@ (8008e04 <vPortFree+0xbc>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4013      	ands	r3, r2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10b      	bne.n	8008d8e <vPortFree+0x46>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	60fb      	str	r3, [r7, #12]
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	e7fd      	b.n	8008d8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00b      	beq.n	8008dae <vPortFree+0x66>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	60bb      	str	r3, [r7, #8]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	4b14      	ldr	r3, [pc, #80]	@ (8008e04 <vPortFree+0xbc>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01e      	beq.n	8008dfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d11a      	bne.n	8008dfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e04 <vPortFree+0xbc>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	401a      	ands	r2, r3
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008dd4:	f7fe fb62 	bl	800749c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e08 <vPortFree+0xc0>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4413      	add	r3, r2
 8008de2:	4a09      	ldr	r2, [pc, #36]	@ (8008e08 <vPortFree+0xc0>)
 8008de4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008de6:	6938      	ldr	r0, [r7, #16]
 8008de8:	f000 f874 	bl	8008ed4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008dec:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <vPortFree+0xc4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	4a06      	ldr	r2, [pc, #24]	@ (8008e0c <vPortFree+0xc4>)
 8008df4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008df6:	f7fe fb5f 	bl	80074b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008dfa:	bf00      	nop
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20003698 	.word	0x20003698
 8008e08:	20003688 	.word	0x20003688
 8008e0c:	20003694 	.word	0x20003694

08008e10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e16:	f44f 531d 	mov.w	r3, #10048	@ 0x2740
 8008e1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e1c:	4b27      	ldr	r3, [pc, #156]	@ (8008ebc <prvHeapInit+0xac>)
 8008e1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00c      	beq.n	8008e44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3307      	adds	r3, #7
 8008e2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 0307 	bic.w	r3, r3, #7
 8008e36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008ebc <prvHeapInit+0xac>)
 8008e40:	4413      	add	r3, r2
 8008e42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e48:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec0 <prvHeapInit+0xb0>)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec0 <prvHeapInit+0xb0>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	4413      	add	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 0307 	bic.w	r3, r3, #7
 8008e6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4a15      	ldr	r2, [pc, #84]	@ (8008ec4 <prvHeapInit+0xb4>)
 8008e70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e72:	4b14      	ldr	r3, [pc, #80]	@ (8008ec4 <prvHeapInit+0xb4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e7a:	4b12      	ldr	r3, [pc, #72]	@ (8008ec4 <prvHeapInit+0xb4>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	1ad2      	subs	r2, r2, r3
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e90:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec4 <prvHeapInit+0xb4>)
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008ec8 <prvHeapInit+0xb8>)
 8008e9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	4a09      	ldr	r2, [pc, #36]	@ (8008ecc <prvHeapInit+0xbc>)
 8008ea6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ea8:	4b09      	ldr	r3, [pc, #36]	@ (8008ed0 <prvHeapInit+0xc0>)
 8008eaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008eae:	601a      	str	r2, [r3, #0]
}
 8008eb0:	bf00      	nop
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	20000f3c 	.word	0x20000f3c
 8008ec0:	2000367c 	.word	0x2000367c
 8008ec4:	20003684 	.word	0x20003684
 8008ec8:	2000368c 	.word	0x2000368c
 8008ecc:	20003688 	.word	0x20003688
 8008ed0:	20003698 	.word	0x20003698

08008ed4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008edc:	4b28      	ldr	r3, [pc, #160]	@ (8008f80 <prvInsertBlockIntoFreeList+0xac>)
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	e002      	b.n	8008ee8 <prvInsertBlockIntoFreeList+0x14>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d8f7      	bhi.n	8008ee2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	4413      	add	r3, r2
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d108      	bne.n	8008f16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	441a      	add	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	441a      	add	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d118      	bne.n	8008f5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	4b15      	ldr	r3, [pc, #84]	@ (8008f84 <prvInsertBlockIntoFreeList+0xb0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d00d      	beq.n	8008f52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	441a      	add	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	e008      	b.n	8008f64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f52:	4b0c      	ldr	r3, [pc, #48]	@ (8008f84 <prvInsertBlockIntoFreeList+0xb0>)
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	e003      	b.n	8008f64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d002      	beq.n	8008f72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	2000367c 	.word	0x2000367c
 8008f84:	20003684 	.word	0x20003684

08008f88 <_ZN15FdcanControllerC1Ev>:
 *      Author: knap-linux
 */

#include "fdcan_controller.h"

FdcanController::FdcanController()
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	: m_hfdcan{nullptr}
	, m_queueCanHandleFifo0{nullptr}
	, m_queueCanHandleFifo1{nullptr}
	, m_mutexCanHandle{nullptr}
	, m_semCanHandle{nullptr}
 8008f90:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc4 <_ZN15FdcanControllerC1Ev+0x3c>)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	601a      	str	r2, [r3, #0]
	: m_hfdcan{nullptr}
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	605a      	str	r2, [r3, #4]
	, m_queueCanHandleFifo0{nullptr}
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	609a      	str	r2, [r3, #8]
	, m_queueCanHandleFifo1{nullptr}
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	60da      	str	r2, [r3, #12]
	, m_mutexCanHandle{nullptr}
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	611a      	str	r2, [r3, #16]
	, m_semCanHandle{nullptr}
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	615a      	str	r2, [r3, #20]
{

}
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	0800a4bc 	.word	0x0800a4bc

08008fc8 <_ZN15FdcanControllerD1Ev>:

FdcanController::~FdcanController()
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	4a04      	ldr	r2, [pc, #16]	@ (8008fe4 <_ZN15FdcanControllerD1Ev+0x1c>)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]
{

}
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	0800a4bc 	.word	0x0800a4bc

08008fe8 <_ZN15FdcanControllerD0Ev>:
FdcanController::~FdcanController()
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
}
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ffe9 	bl	8008fc8 <_ZN15FdcanControllerD1Ev>
 8008ff6:	2118      	movs	r1, #24
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f9b6 	bl	800936a <_ZdlPvj>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <_ZN15FdcanController14setHandleFdcanEP19FDCAN_HandleTypeDef>:

void FdcanController::setHandleFdcan(FDCAN_HandleTypeDef *hfdcan)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	m_hfdcan = hfdcan;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	605a      	str	r2, [r3, #4]
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE>:

FdcanController::State FdcanController::setHandleQueue(osMessageQueueId_t *queueCanHandle, const Buffer bufferType)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
	if (bufferType == Buffer::Fifo0)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d103      	bne.n	800903e <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE+0x1a>
	{
		m_queueCanHandleFifo0 = queueCanHandle;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	609a      	str	r2, [r3, #8]
 800903c:	e008      	b.n	8009050 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE+0x2c>
	}
	else if (bufferType == Buffer::Fifo1)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d103      	bne.n	800904c <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE+0x28>
	{
		m_queueCanHandleFifo1 = queueCanHandle;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	60da      	str	r2, [r3, #12]
 800904a:	e001      	b.n	8009050 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE+0x2c>
	}
	else
	{
		return State::ErrorHandleQueue;
 800904c:	2302      	movs	r3, #2
 800904e:	e000      	b.n	8009052 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE+0x2e>
	}

	return State::Ok;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <_ZN15FdcanController14setHandleMutexEPPv>:

void FdcanController::setHandleMutex(osMutexId_t *mutexCanHandle)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
	m_mutexCanHandle = mutexCanHandle;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	611a      	str	r2, [r3, #16]
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <_ZN15FdcanController12setHandleSemEPPv>:

void FdcanController::setHandleSem(osSemaphoreId_t *semCanHandle)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
	m_semCanHandle = semCanHandle;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	615a      	str	r2, [r3, #20]
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <_ZN15FdcanController4initEv>:

FdcanController::State FdcanController::init()
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
	if (m_hfdcan == nullptr) return State::ErrorInit;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <_ZN15FdcanController4initEv+0x14>
 80090a6:	2303      	movs	r3, #3
 80090a8:	e036      	b.n	8009118 <_ZN15FdcanController4initEv+0x82>
	if ((m_queueCanHandleFifo0 == nullptr) &&
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d105      	bne.n	80090be <_ZN15FdcanController4initEv+0x28>
		(m_queueCanHandleFifo1 == nullptr)) return State::ErrorInit;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
	if ((m_queueCanHandleFifo0 == nullptr) &&
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <_ZN15FdcanController4initEv+0x28>
		(m_queueCanHandleFifo1 == nullptr)) return State::ErrorInit;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e02c      	b.n	8009118 <_ZN15FdcanController4initEv+0x82>
	if (m_mutexCanHandle == nullptr) return State::ErrorInit;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <_ZN15FdcanController4initEv+0x34>
 80090c6:	2303      	movs	r3, #3
 80090c8:	e026      	b.n	8009118 <_ZN15FdcanController4initEv+0x82>
	if (m_semCanHandle == nullptr) return State::ErrorInit;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <_ZN15FdcanController4initEv+0x40>
 80090d2:	2303      	movs	r3, #3
 80090d4:	e020      	b.n	8009118 <_ZN15FdcanController4initEv+0x82>

	if (HAL_FDCAN_Start(m_hfdcan) != HAL_OK)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7f8 fc54 	bl	8001988 <HAL_FDCAN_Start>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bf14      	ite	ne
 80090e6:	2301      	movne	r3, #1
 80090e8:	2300      	moveq	r3, #0
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <_ZN15FdcanController4initEv+0x5e>
	{
		return State::ErrorInit;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e011      	b.n	8009118 <_ZN15FdcanController4initEv+0x82>
	}

	if (HAL_FDCAN_ActivateNotification(m_hfdcan,
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	2207      	movs	r2, #7
 80090fa:	2189      	movs	r1, #137	@ 0x89
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f8 fdb7 	bl	8001c70 <HAL_FDCAN_ActivateNotification>
 8009102:	4603      	mov	r3, r0
		FDCAN_IT_TX_COMPLETE | FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_RX_FIFO1_NEW_MESSAGE,
		FDCAN_TX_BUFFER0 | FDCAN_TX_BUFFER1 | FDCAN_TX_BUFFER2) != HAL_OK)
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf14      	ite	ne
 8009108:	2301      	movne	r3, #1
 800910a:	2300      	moveq	r3, #0
 800910c:	b2db      	uxtb	r3, r3
	if (HAL_FDCAN_ActivateNotification(m_hfdcan,
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <_ZN15FdcanController4initEv+0x80>
	{
		return State::ErrorInit;
 8009112:	2303      	movs	r3, #3
 8009114:	e000      	b.n	8009118 <_ZN15FdcanController4initEv+0x82>
	}

	return State::Ok;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <_ZN15FdcanController4sendE8FdcanMsg>:

FdcanController::State FdcanController::send(const FdcanMsg msg)
{
 8009120:	b084      	sub	sp, #16
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	f107 0014 	add.w	r0, r7, #20
 800912e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (osMutexAcquire(*m_mutexCanHandle, osWaitForever) != osOK)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800913c:	4618      	mov	r0, r3
 800913e:	f7fc fac4 	bl	80056ca <osMutexAcquire>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	bf14      	ite	ne
 8009148:	2301      	movne	r3, #1
 800914a:	2300      	moveq	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <_ZN15FdcanController4sendE8FdcanMsg+0x36>
	{
		return State::ErrorSend;
 8009152:	2304      	movs	r3, #4
 8009154:	e044      	b.n	80091e0 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (HAL_FDCAN_AddMessageToTxFifoQ(m_hfdcan, &msg.txHeader, msg.data) != HAL_OK)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6858      	ldr	r0, [r3, #4]
 800915a:	f107 0314 	add.w	r3, r7, #20
 800915e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8009162:	f107 0314 	add.w	r3, r7, #20
 8009166:	3328      	adds	r3, #40	@ 0x28
 8009168:	4619      	mov	r1, r3
 800916a:	f7f8 fc35 	bl	80019d8 <HAL_FDCAN_AddMessageToTxFifoQ>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf14      	ite	ne
 8009174:	2301      	movne	r3, #1
 8009176:	2300      	moveq	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <_ZN15FdcanController4sendE8FdcanMsg+0x6e>
	{
		osMutexRelease(*m_mutexCanHandle);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f7fc faeb 	bl	8005760 <osMutexRelease>
		return State::ErrorSend;
 800918a:	2304      	movs	r3, #4
 800918c:	e028      	b.n	80091e0 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (osSemaphoreAcquire(*m_semCanHandle, osWaitForever) != osOK)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009198:	4618      	mov	r0, r3
 800919a:	f7fc fba7 	bl	80058ec <osSemaphoreAcquire>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	bf14      	ite	ne
 80091a4:	2301      	movne	r3, #1
 80091a6:	2300      	moveq	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d007      	beq.n	80091be <_ZN15FdcanController4sendE8FdcanMsg+0x9e>
	{
		osMutexRelease(*m_mutexCanHandle);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fc fad3 	bl	8005760 <osMutexRelease>
		return State::ErrorSend;
 80091ba:	2304      	movs	r3, #4
 80091bc:	e010      	b.n	80091e0 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (osMutexRelease(*m_mutexCanHandle) != osOK)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fc facb 	bl	8005760 <osMutexRelease>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bf14      	ite	ne
 80091d0:	2301      	movne	r3, #1
 80091d2:	2300      	moveq	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <_ZN15FdcanController4sendE8FdcanMsg+0xbe>
	{
		return State::ErrorSend;
 80091da:	2304      	movs	r3, #4
 80091dc:	e000      	b.n	80091e0 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}

	return State::Ok;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091ea:	b004      	add	sp, #16
 80091ec:	4770      	bx	lr

080091ee <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE>:

FdcanController::State FdcanController::receive(FdcanMsg *msg, const Buffer bufferType)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b086      	sub	sp, #24
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	607a      	str	r2, [r7, #4]
	osMessageQueueId_t *queueHandle = nullptr;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]

	if (bufferType == Buffer::Fifo0)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d103      	bne.n	800920c <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x1e>
	{
		queueHandle = m_queueCanHandleFifo0;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	617b      	str	r3, [r7, #20]
 800920a:	e008      	b.n	800921e <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x30>
	}
	else if (bufferType == Buffer::Fifo1)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d103      	bne.n	800921a <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x2c>
	{
		queueHandle = m_queueCanHandleFifo1;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e001      	b.n	800921e <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x30>
	}
	else
	{
		return State::ErrorReceive;
 800921a:	2305      	movs	r3, #5
 800921c:	e012      	b.n	8009244 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x56>
	}

	if (osMessageQueueGet(*queueHandle, msg, nullptr, osWaitForever) != osOK)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009226:	2200      	movs	r2, #0
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	f7fc fcc9 	bl	8005bc0 <osMessageQueueGet>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	bf14      	ite	ne
 8009234:	2301      	movne	r3, #1
 8009236:	2300      	moveq	r3, #0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x54>
	{
		return State::ErrorReceive;
 800923e:	2305      	movs	r3, #5
 8009240:	e000      	b.n	8009244 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x56>
	}

	return State::Ok;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef>:

FdcanController::State FdcanController::updateInterruptTx(FDCAN_HandleTypeDef *hfdcan)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
	if (hfdcan->Instance == m_hfdcan->Instance)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d10f      	bne.n	8009284 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x38>
	{
		if (osSemaphoreRelease(*m_semCanHandle) != osOK)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f7fc fb90 	bl	8005990 <osSemaphoreRelease>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	bf14      	ite	ne
 8009276:	2301      	movne	r3, #1
 8009278:	2300      	moveq	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x38>
		{
			return State::ErrorIsrTx;
 8009280:	2306      	movs	r3, #6
 8009282:	e000      	b.n	8009286 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x3a>
		}
	}

	return State::Ok;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm>:
//
//	return State::Ok;
//}

FdcanController::State FdcanController::updateInterruptRx(FDCAN_HandleTypeDef *hfdcan, uint32_t isrType)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b09c      	sub	sp, #112	@ 0x70
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
	if (hfdcan->Instance == m_hfdcan->Instance)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d141      	bne.n	800932c <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x9e>
	{
		if ((isrType & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) ||
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x2e>
			(isrType & FDCAN_IT_RX_FIFO1_NEW_MESSAGE))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f003 0308 	and.w	r3, r3, #8
		if ((isrType & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) ||
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d037      	beq.n	800932c <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x9e>
		{
			FdcanMsg msg;
			uint32_t fifo = (isrType & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) ? FDCAN_RX_FIFO0 : FDCAN_RX_FIFO1;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x3c>
 80092c6:	2340      	movs	r3, #64	@ 0x40
 80092c8:	e000      	b.n	80092cc <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x3e>
 80092ca:	2341      	movs	r3, #65	@ 0x41
 80092cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
			osMessageQueueId_t *queueHandle = (fifo == FDCAN_RX_FIFO0) ? m_queueCanHandleFifo0 : m_queueCanHandleFifo1;
 80092ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092d0:	2b40      	cmp	r3, #64	@ 0x40
 80092d2:	d102      	bne.n	80092da <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x4c>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	e001      	b.n	80092de <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x50>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	66bb      	str	r3, [r7, #104]	@ 0x68
			if (HAL_FDCAN_GetRxMessage(m_hfdcan, fifo, &msg.rxHeader, msg.data) != HAL_OK)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6858      	ldr	r0, [r3, #4]
 80092e4:	f107 0314 	add.w	r3, r7, #20
 80092e8:	334c      	adds	r3, #76	@ 0x4c
 80092ea:	f107 0214 	add.w	r2, r7, #20
 80092ee:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80092f0:	f7f8 fbb6 	bl	8001a60 <HAL_FDCAN_GetRxMessage>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bf14      	ite	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	2300      	moveq	r3, #0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x7a>
			{
				return State::ErrorIsrRx;
 8009304:	2307      	movs	r3, #7
 8009306:	e012      	b.n	800932e <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xa0>
			}
			if (osMessageQueuePut(*queueHandle, &msg, 0, 0) != osOK)
 8009308:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	f107 0114 	add.w	r1, r7, #20
 8009310:	2300      	movs	r3, #0
 8009312:	2200      	movs	r2, #0
 8009314:	f7fc fbf4 	bl	8005b00 <osMessageQueuePut>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	bf14      	ite	ne
 800931e:	2301      	movne	r3, #1
 8009320:	2300      	moveq	r3, #0
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x9e>
			{
				return State::ErrorIsrRx;
 8009328:	2307      	movs	r3, #7
 800932a:	e000      	b.n	800932e <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xa0>
			}
		}
	}

	return State::Ok;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3770      	adds	r7, #112	@ 0x70
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <_ZN15FdcanController9setFilterEP19FDCAN_FilterTypeDef>:

FdcanController::State FdcanController::setFilter(FDCAN_FilterTypeDef *filter)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_ConfigFilter(m_hfdcan, filter) != HAL_OK)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f7f8 fac4 	bl	80018d4 <HAL_FDCAN_ConfigFilter>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	bf14      	ite	ne
 8009352:	2301      	movne	r3, #1
 8009354:	2300      	moveq	r3, #0
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <_ZN15FdcanController9setFilterEP19FDCAN_FilterTypeDef+0x2a>
	{
		return State::ErrorFilter;
 800935c:	2308      	movs	r3, #8
 800935e:	e000      	b.n	8009362 <_ZN15FdcanController9setFilterEP19FDCAN_FilterTypeDef+0x2c>
	}

	return State::Ok;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <_ZdlPvj>:
 800936a:	f000 b800 	b.w	800936e <_ZdlPv>

0800936e <_ZdlPv>:
 800936e:	f000 b801 	b.w	8009374 <free>
	...

08009374 <free>:
 8009374:	4b02      	ldr	r3, [pc, #8]	@ (8009380 <free+0xc>)
 8009376:	4601      	mov	r1, r0
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	f000 bb55 	b.w	8009a28 <_free_r>
 800937e:	bf00      	nop
 8009380:	2000001c 	.word	0x2000001c

08009384 <sbrk_aligned>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	4e0f      	ldr	r6, [pc, #60]	@ (80093c4 <sbrk_aligned+0x40>)
 8009388:	460c      	mov	r4, r1
 800938a:	6831      	ldr	r1, [r6, #0]
 800938c:	4605      	mov	r5, r0
 800938e:	b911      	cbnz	r1, 8009396 <sbrk_aligned+0x12>
 8009390:	f000 faec 	bl	800996c <_sbrk_r>
 8009394:	6030      	str	r0, [r6, #0]
 8009396:	4621      	mov	r1, r4
 8009398:	4628      	mov	r0, r5
 800939a:	f000 fae7 	bl	800996c <_sbrk_r>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	d103      	bne.n	80093aa <sbrk_aligned+0x26>
 80093a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80093a6:	4620      	mov	r0, r4
 80093a8:	bd70      	pop	{r4, r5, r6, pc}
 80093aa:	1cc4      	adds	r4, r0, #3
 80093ac:	f024 0403 	bic.w	r4, r4, #3
 80093b0:	42a0      	cmp	r0, r4
 80093b2:	d0f8      	beq.n	80093a6 <sbrk_aligned+0x22>
 80093b4:	1a21      	subs	r1, r4, r0
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 fad8 	bl	800996c <_sbrk_r>
 80093bc:	3001      	adds	r0, #1
 80093be:	d1f2      	bne.n	80093a6 <sbrk_aligned+0x22>
 80093c0:	e7ef      	b.n	80093a2 <sbrk_aligned+0x1e>
 80093c2:	bf00      	nop
 80093c4:	2000369c 	.word	0x2000369c

080093c8 <_malloc_r>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	1ccd      	adds	r5, r1, #3
 80093ce:	f025 0503 	bic.w	r5, r5, #3
 80093d2:	3508      	adds	r5, #8
 80093d4:	2d0c      	cmp	r5, #12
 80093d6:	bf38      	it	cc
 80093d8:	250c      	movcc	r5, #12
 80093da:	2d00      	cmp	r5, #0
 80093dc:	4606      	mov	r6, r0
 80093de:	db01      	blt.n	80093e4 <_malloc_r+0x1c>
 80093e0:	42a9      	cmp	r1, r5
 80093e2:	d904      	bls.n	80093ee <_malloc_r+0x26>
 80093e4:	230c      	movs	r3, #12
 80093e6:	6033      	str	r3, [r6, #0]
 80093e8:	2000      	movs	r0, #0
 80093ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094c4 <_malloc_r+0xfc>
 80093f2:	f000 f869 	bl	80094c8 <__malloc_lock>
 80093f6:	f8d8 3000 	ldr.w	r3, [r8]
 80093fa:	461c      	mov	r4, r3
 80093fc:	bb44      	cbnz	r4, 8009450 <_malloc_r+0x88>
 80093fe:	4629      	mov	r1, r5
 8009400:	4630      	mov	r0, r6
 8009402:	f7ff ffbf 	bl	8009384 <sbrk_aligned>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	4604      	mov	r4, r0
 800940a:	d158      	bne.n	80094be <_malloc_r+0xf6>
 800940c:	f8d8 4000 	ldr.w	r4, [r8]
 8009410:	4627      	mov	r7, r4
 8009412:	2f00      	cmp	r7, #0
 8009414:	d143      	bne.n	800949e <_malloc_r+0xd6>
 8009416:	2c00      	cmp	r4, #0
 8009418:	d04b      	beq.n	80094b2 <_malloc_r+0xea>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	4639      	mov	r1, r7
 800941e:	4630      	mov	r0, r6
 8009420:	eb04 0903 	add.w	r9, r4, r3
 8009424:	f000 faa2 	bl	800996c <_sbrk_r>
 8009428:	4581      	cmp	r9, r0
 800942a:	d142      	bne.n	80094b2 <_malloc_r+0xea>
 800942c:	6821      	ldr	r1, [r4, #0]
 800942e:	1a6d      	subs	r5, r5, r1
 8009430:	4629      	mov	r1, r5
 8009432:	4630      	mov	r0, r6
 8009434:	f7ff ffa6 	bl	8009384 <sbrk_aligned>
 8009438:	3001      	adds	r0, #1
 800943a:	d03a      	beq.n	80094b2 <_malloc_r+0xea>
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	442b      	add	r3, r5
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	f8d8 3000 	ldr.w	r3, [r8]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	bb62      	cbnz	r2, 80094a4 <_malloc_r+0xdc>
 800944a:	f8c8 7000 	str.w	r7, [r8]
 800944e:	e00f      	b.n	8009470 <_malloc_r+0xa8>
 8009450:	6822      	ldr	r2, [r4, #0]
 8009452:	1b52      	subs	r2, r2, r5
 8009454:	d420      	bmi.n	8009498 <_malloc_r+0xd0>
 8009456:	2a0b      	cmp	r2, #11
 8009458:	d917      	bls.n	800948a <_malloc_r+0xc2>
 800945a:	1961      	adds	r1, r4, r5
 800945c:	42a3      	cmp	r3, r4
 800945e:	6025      	str	r5, [r4, #0]
 8009460:	bf18      	it	ne
 8009462:	6059      	strne	r1, [r3, #4]
 8009464:	6863      	ldr	r3, [r4, #4]
 8009466:	bf08      	it	eq
 8009468:	f8c8 1000 	streq.w	r1, [r8]
 800946c:	5162      	str	r2, [r4, r5]
 800946e:	604b      	str	r3, [r1, #4]
 8009470:	4630      	mov	r0, r6
 8009472:	f000 f82f 	bl	80094d4 <__malloc_unlock>
 8009476:	f104 000b 	add.w	r0, r4, #11
 800947a:	1d23      	adds	r3, r4, #4
 800947c:	f020 0007 	bic.w	r0, r0, #7
 8009480:	1ac2      	subs	r2, r0, r3
 8009482:	bf1c      	itt	ne
 8009484:	1a1b      	subne	r3, r3, r0
 8009486:	50a3      	strne	r3, [r4, r2]
 8009488:	e7af      	b.n	80093ea <_malloc_r+0x22>
 800948a:	6862      	ldr	r2, [r4, #4]
 800948c:	42a3      	cmp	r3, r4
 800948e:	bf0c      	ite	eq
 8009490:	f8c8 2000 	streq.w	r2, [r8]
 8009494:	605a      	strne	r2, [r3, #4]
 8009496:	e7eb      	b.n	8009470 <_malloc_r+0xa8>
 8009498:	4623      	mov	r3, r4
 800949a:	6864      	ldr	r4, [r4, #4]
 800949c:	e7ae      	b.n	80093fc <_malloc_r+0x34>
 800949e:	463c      	mov	r4, r7
 80094a0:	687f      	ldr	r7, [r7, #4]
 80094a2:	e7b6      	b.n	8009412 <_malloc_r+0x4a>
 80094a4:	461a      	mov	r2, r3
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	d1fb      	bne.n	80094a4 <_malloc_r+0xdc>
 80094ac:	2300      	movs	r3, #0
 80094ae:	6053      	str	r3, [r2, #4]
 80094b0:	e7de      	b.n	8009470 <_malloc_r+0xa8>
 80094b2:	230c      	movs	r3, #12
 80094b4:	6033      	str	r3, [r6, #0]
 80094b6:	4630      	mov	r0, r6
 80094b8:	f000 f80c 	bl	80094d4 <__malloc_unlock>
 80094bc:	e794      	b.n	80093e8 <_malloc_r+0x20>
 80094be:	6005      	str	r5, [r0, #0]
 80094c0:	e7d6      	b.n	8009470 <_malloc_r+0xa8>
 80094c2:	bf00      	nop
 80094c4:	200036a0 	.word	0x200036a0

080094c8 <__malloc_lock>:
 80094c8:	4801      	ldr	r0, [pc, #4]	@ (80094d0 <__malloc_lock+0x8>)
 80094ca:	f000 ba9c 	b.w	8009a06 <__retarget_lock_acquire_recursive>
 80094ce:	bf00      	nop
 80094d0:	200037e4 	.word	0x200037e4

080094d4 <__malloc_unlock>:
 80094d4:	4801      	ldr	r0, [pc, #4]	@ (80094dc <__malloc_unlock+0x8>)
 80094d6:	f000 ba97 	b.w	8009a08 <__retarget_lock_release_recursive>
 80094da:	bf00      	nop
 80094dc:	200037e4 	.word	0x200037e4

080094e0 <std>:
 80094e0:	2300      	movs	r3, #0
 80094e2:	b510      	push	{r4, lr}
 80094e4:	4604      	mov	r4, r0
 80094e6:	e9c0 3300 	strd	r3, r3, [r0]
 80094ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ee:	6083      	str	r3, [r0, #8]
 80094f0:	8181      	strh	r1, [r0, #12]
 80094f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80094f4:	81c2      	strh	r2, [r0, #14]
 80094f6:	6183      	str	r3, [r0, #24]
 80094f8:	4619      	mov	r1, r3
 80094fa:	2208      	movs	r2, #8
 80094fc:	305c      	adds	r0, #92	@ 0x5c
 80094fe:	f000 f9f9 	bl	80098f4 <memset>
 8009502:	4b0d      	ldr	r3, [pc, #52]	@ (8009538 <std+0x58>)
 8009504:	6263      	str	r3, [r4, #36]	@ 0x24
 8009506:	4b0d      	ldr	r3, [pc, #52]	@ (800953c <std+0x5c>)
 8009508:	62a3      	str	r3, [r4, #40]	@ 0x28
 800950a:	4b0d      	ldr	r3, [pc, #52]	@ (8009540 <std+0x60>)
 800950c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800950e:	4b0d      	ldr	r3, [pc, #52]	@ (8009544 <std+0x64>)
 8009510:	6323      	str	r3, [r4, #48]	@ 0x30
 8009512:	4b0d      	ldr	r3, [pc, #52]	@ (8009548 <std+0x68>)
 8009514:	6224      	str	r4, [r4, #32]
 8009516:	429c      	cmp	r4, r3
 8009518:	d006      	beq.n	8009528 <std+0x48>
 800951a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800951e:	4294      	cmp	r4, r2
 8009520:	d002      	beq.n	8009528 <std+0x48>
 8009522:	33d0      	adds	r3, #208	@ 0xd0
 8009524:	429c      	cmp	r4, r3
 8009526:	d105      	bne.n	8009534 <std+0x54>
 8009528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800952c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009530:	f000 ba68 	b.w	8009a04 <__retarget_lock_init_recursive>
 8009534:	bd10      	pop	{r4, pc}
 8009536:	bf00      	nop
 8009538:	08009745 	.word	0x08009745
 800953c:	08009767 	.word	0x08009767
 8009540:	0800979f 	.word	0x0800979f
 8009544:	080097c3 	.word	0x080097c3
 8009548:	200036a4 	.word	0x200036a4

0800954c <stdio_exit_handler>:
 800954c:	4a02      	ldr	r2, [pc, #8]	@ (8009558 <stdio_exit_handler+0xc>)
 800954e:	4903      	ldr	r1, [pc, #12]	@ (800955c <stdio_exit_handler+0x10>)
 8009550:	4803      	ldr	r0, [pc, #12]	@ (8009560 <stdio_exit_handler+0x14>)
 8009552:	f000 b869 	b.w	8009628 <_fwalk_sglue>
 8009556:	bf00      	nop
 8009558:	20000010 	.word	0x20000010
 800955c:	0800a165 	.word	0x0800a165
 8009560:	20000020 	.word	0x20000020

08009564 <cleanup_stdio>:
 8009564:	6841      	ldr	r1, [r0, #4]
 8009566:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <cleanup_stdio+0x34>)
 8009568:	4299      	cmp	r1, r3
 800956a:	b510      	push	{r4, lr}
 800956c:	4604      	mov	r4, r0
 800956e:	d001      	beq.n	8009574 <cleanup_stdio+0x10>
 8009570:	f000 fdf8 	bl	800a164 <_fflush_r>
 8009574:	68a1      	ldr	r1, [r4, #8]
 8009576:	4b09      	ldr	r3, [pc, #36]	@ (800959c <cleanup_stdio+0x38>)
 8009578:	4299      	cmp	r1, r3
 800957a:	d002      	beq.n	8009582 <cleanup_stdio+0x1e>
 800957c:	4620      	mov	r0, r4
 800957e:	f000 fdf1 	bl	800a164 <_fflush_r>
 8009582:	68e1      	ldr	r1, [r4, #12]
 8009584:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <cleanup_stdio+0x3c>)
 8009586:	4299      	cmp	r1, r3
 8009588:	d004      	beq.n	8009594 <cleanup_stdio+0x30>
 800958a:	4620      	mov	r0, r4
 800958c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009590:	f000 bde8 	b.w	800a164 <_fflush_r>
 8009594:	bd10      	pop	{r4, pc}
 8009596:	bf00      	nop
 8009598:	200036a4 	.word	0x200036a4
 800959c:	2000370c 	.word	0x2000370c
 80095a0:	20003774 	.word	0x20003774

080095a4 <global_stdio_init.part.0>:
 80095a4:	b510      	push	{r4, lr}
 80095a6:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <global_stdio_init.part.0+0x30>)
 80095a8:	4c0b      	ldr	r4, [pc, #44]	@ (80095d8 <global_stdio_init.part.0+0x34>)
 80095aa:	4a0c      	ldr	r2, [pc, #48]	@ (80095dc <global_stdio_init.part.0+0x38>)
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	4620      	mov	r0, r4
 80095b0:	2200      	movs	r2, #0
 80095b2:	2104      	movs	r1, #4
 80095b4:	f7ff ff94 	bl	80094e0 <std>
 80095b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095bc:	2201      	movs	r2, #1
 80095be:	2109      	movs	r1, #9
 80095c0:	f7ff ff8e 	bl	80094e0 <std>
 80095c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095c8:	2202      	movs	r2, #2
 80095ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ce:	2112      	movs	r1, #18
 80095d0:	f7ff bf86 	b.w	80094e0 <std>
 80095d4:	200037dc 	.word	0x200037dc
 80095d8:	200036a4 	.word	0x200036a4
 80095dc:	0800954d 	.word	0x0800954d

080095e0 <__sfp_lock_acquire>:
 80095e0:	4801      	ldr	r0, [pc, #4]	@ (80095e8 <__sfp_lock_acquire+0x8>)
 80095e2:	f000 ba10 	b.w	8009a06 <__retarget_lock_acquire_recursive>
 80095e6:	bf00      	nop
 80095e8:	200037e5 	.word	0x200037e5

080095ec <__sfp_lock_release>:
 80095ec:	4801      	ldr	r0, [pc, #4]	@ (80095f4 <__sfp_lock_release+0x8>)
 80095ee:	f000 ba0b 	b.w	8009a08 <__retarget_lock_release_recursive>
 80095f2:	bf00      	nop
 80095f4:	200037e5 	.word	0x200037e5

080095f8 <__sinit>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	4604      	mov	r4, r0
 80095fc:	f7ff fff0 	bl	80095e0 <__sfp_lock_acquire>
 8009600:	6a23      	ldr	r3, [r4, #32]
 8009602:	b11b      	cbz	r3, 800960c <__sinit+0x14>
 8009604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009608:	f7ff bff0 	b.w	80095ec <__sfp_lock_release>
 800960c:	4b04      	ldr	r3, [pc, #16]	@ (8009620 <__sinit+0x28>)
 800960e:	6223      	str	r3, [r4, #32]
 8009610:	4b04      	ldr	r3, [pc, #16]	@ (8009624 <__sinit+0x2c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1f5      	bne.n	8009604 <__sinit+0xc>
 8009618:	f7ff ffc4 	bl	80095a4 <global_stdio_init.part.0>
 800961c:	e7f2      	b.n	8009604 <__sinit+0xc>
 800961e:	bf00      	nop
 8009620:	08009565 	.word	0x08009565
 8009624:	200037dc 	.word	0x200037dc

08009628 <_fwalk_sglue>:
 8009628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800962c:	4607      	mov	r7, r0
 800962e:	4688      	mov	r8, r1
 8009630:	4614      	mov	r4, r2
 8009632:	2600      	movs	r6, #0
 8009634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009638:	f1b9 0901 	subs.w	r9, r9, #1
 800963c:	d505      	bpl.n	800964a <_fwalk_sglue+0x22>
 800963e:	6824      	ldr	r4, [r4, #0]
 8009640:	2c00      	cmp	r4, #0
 8009642:	d1f7      	bne.n	8009634 <_fwalk_sglue+0xc>
 8009644:	4630      	mov	r0, r6
 8009646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d907      	bls.n	8009660 <_fwalk_sglue+0x38>
 8009650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009654:	3301      	adds	r3, #1
 8009656:	d003      	beq.n	8009660 <_fwalk_sglue+0x38>
 8009658:	4629      	mov	r1, r5
 800965a:	4638      	mov	r0, r7
 800965c:	47c0      	blx	r8
 800965e:	4306      	orrs	r6, r0
 8009660:	3568      	adds	r5, #104	@ 0x68
 8009662:	e7e9      	b.n	8009638 <_fwalk_sglue+0x10>

08009664 <iprintf>:
 8009664:	b40f      	push	{r0, r1, r2, r3}
 8009666:	b507      	push	{r0, r1, r2, lr}
 8009668:	4906      	ldr	r1, [pc, #24]	@ (8009684 <iprintf+0x20>)
 800966a:	ab04      	add	r3, sp, #16
 800966c:	6808      	ldr	r0, [r1, #0]
 800966e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009672:	6881      	ldr	r1, [r0, #8]
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	f000 fa4b 	bl	8009b10 <_vfiprintf_r>
 800967a:	b003      	add	sp, #12
 800967c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009680:	b004      	add	sp, #16
 8009682:	4770      	bx	lr
 8009684:	2000001c 	.word	0x2000001c

08009688 <_puts_r>:
 8009688:	6a03      	ldr	r3, [r0, #32]
 800968a:	b570      	push	{r4, r5, r6, lr}
 800968c:	6884      	ldr	r4, [r0, #8]
 800968e:	4605      	mov	r5, r0
 8009690:	460e      	mov	r6, r1
 8009692:	b90b      	cbnz	r3, 8009698 <_puts_r+0x10>
 8009694:	f7ff ffb0 	bl	80095f8 <__sinit>
 8009698:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800969a:	07db      	lsls	r3, r3, #31
 800969c:	d405      	bmi.n	80096aa <_puts_r+0x22>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	0598      	lsls	r0, r3, #22
 80096a2:	d402      	bmi.n	80096aa <_puts_r+0x22>
 80096a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096a6:	f000 f9ae 	bl	8009a06 <__retarget_lock_acquire_recursive>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	0719      	lsls	r1, r3, #28
 80096ae:	d502      	bpl.n	80096b6 <_puts_r+0x2e>
 80096b0:	6923      	ldr	r3, [r4, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d135      	bne.n	8009722 <_puts_r+0x9a>
 80096b6:	4621      	mov	r1, r4
 80096b8:	4628      	mov	r0, r5
 80096ba:	f000 f8c5 	bl	8009848 <__swsetup_r>
 80096be:	b380      	cbz	r0, 8009722 <_puts_r+0x9a>
 80096c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80096c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096c6:	07da      	lsls	r2, r3, #31
 80096c8:	d405      	bmi.n	80096d6 <_puts_r+0x4e>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	059b      	lsls	r3, r3, #22
 80096ce:	d402      	bmi.n	80096d6 <_puts_r+0x4e>
 80096d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096d2:	f000 f999 	bl	8009a08 <__retarget_lock_release_recursive>
 80096d6:	4628      	mov	r0, r5
 80096d8:	bd70      	pop	{r4, r5, r6, pc}
 80096da:	2b00      	cmp	r3, #0
 80096dc:	da04      	bge.n	80096e8 <_puts_r+0x60>
 80096de:	69a2      	ldr	r2, [r4, #24]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	dc17      	bgt.n	8009714 <_puts_r+0x8c>
 80096e4:	290a      	cmp	r1, #10
 80096e6:	d015      	beq.n	8009714 <_puts_r+0x8c>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	6022      	str	r2, [r4, #0]
 80096ee:	7019      	strb	r1, [r3, #0]
 80096f0:	68a3      	ldr	r3, [r4, #8]
 80096f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096f6:	3b01      	subs	r3, #1
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	2900      	cmp	r1, #0
 80096fc:	d1ed      	bne.n	80096da <_puts_r+0x52>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	da11      	bge.n	8009726 <_puts_r+0x9e>
 8009702:	4622      	mov	r2, r4
 8009704:	210a      	movs	r1, #10
 8009706:	4628      	mov	r0, r5
 8009708:	f000 f85f 	bl	80097ca <__swbuf_r>
 800970c:	3001      	adds	r0, #1
 800970e:	d0d7      	beq.n	80096c0 <_puts_r+0x38>
 8009710:	250a      	movs	r5, #10
 8009712:	e7d7      	b.n	80096c4 <_puts_r+0x3c>
 8009714:	4622      	mov	r2, r4
 8009716:	4628      	mov	r0, r5
 8009718:	f000 f857 	bl	80097ca <__swbuf_r>
 800971c:	3001      	adds	r0, #1
 800971e:	d1e7      	bne.n	80096f0 <_puts_r+0x68>
 8009720:	e7ce      	b.n	80096c0 <_puts_r+0x38>
 8009722:	3e01      	subs	r6, #1
 8009724:	e7e4      	b.n	80096f0 <_puts_r+0x68>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	6022      	str	r2, [r4, #0]
 800972c:	220a      	movs	r2, #10
 800972e:	701a      	strb	r2, [r3, #0]
 8009730:	e7ee      	b.n	8009710 <_puts_r+0x88>
	...

08009734 <puts>:
 8009734:	4b02      	ldr	r3, [pc, #8]	@ (8009740 <puts+0xc>)
 8009736:	4601      	mov	r1, r0
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	f7ff bfa5 	b.w	8009688 <_puts_r>
 800973e:	bf00      	nop
 8009740:	2000001c 	.word	0x2000001c

08009744 <__sread>:
 8009744:	b510      	push	{r4, lr}
 8009746:	460c      	mov	r4, r1
 8009748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974c:	f000 f8fc 	bl	8009948 <_read_r>
 8009750:	2800      	cmp	r0, #0
 8009752:	bfab      	itete	ge
 8009754:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009756:	89a3      	ldrhlt	r3, [r4, #12]
 8009758:	181b      	addge	r3, r3, r0
 800975a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800975e:	bfac      	ite	ge
 8009760:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009762:	81a3      	strhlt	r3, [r4, #12]
 8009764:	bd10      	pop	{r4, pc}

08009766 <__swrite>:
 8009766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976a:	461f      	mov	r7, r3
 800976c:	898b      	ldrh	r3, [r1, #12]
 800976e:	05db      	lsls	r3, r3, #23
 8009770:	4605      	mov	r5, r0
 8009772:	460c      	mov	r4, r1
 8009774:	4616      	mov	r6, r2
 8009776:	d505      	bpl.n	8009784 <__swrite+0x1e>
 8009778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977c:	2302      	movs	r3, #2
 800977e:	2200      	movs	r2, #0
 8009780:	f000 f8d0 	bl	8009924 <_lseek_r>
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800978a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800978e:	81a3      	strh	r3, [r4, #12]
 8009790:	4632      	mov	r2, r6
 8009792:	463b      	mov	r3, r7
 8009794:	4628      	mov	r0, r5
 8009796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	f000 b8f7 	b.w	800998c <_write_r>

0800979e <__sseek>:
 800979e:	b510      	push	{r4, lr}
 80097a0:	460c      	mov	r4, r1
 80097a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a6:	f000 f8bd 	bl	8009924 <_lseek_r>
 80097aa:	1c43      	adds	r3, r0, #1
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	bf15      	itete	ne
 80097b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097ba:	81a3      	strheq	r3, [r4, #12]
 80097bc:	bf18      	it	ne
 80097be:	81a3      	strhne	r3, [r4, #12]
 80097c0:	bd10      	pop	{r4, pc}

080097c2 <__sclose>:
 80097c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c6:	f000 b89d 	b.w	8009904 <_close_r>

080097ca <__swbuf_r>:
 80097ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097cc:	460e      	mov	r6, r1
 80097ce:	4614      	mov	r4, r2
 80097d0:	4605      	mov	r5, r0
 80097d2:	b118      	cbz	r0, 80097dc <__swbuf_r+0x12>
 80097d4:	6a03      	ldr	r3, [r0, #32]
 80097d6:	b90b      	cbnz	r3, 80097dc <__swbuf_r+0x12>
 80097d8:	f7ff ff0e 	bl	80095f8 <__sinit>
 80097dc:	69a3      	ldr	r3, [r4, #24]
 80097de:	60a3      	str	r3, [r4, #8]
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	071a      	lsls	r2, r3, #28
 80097e4:	d501      	bpl.n	80097ea <__swbuf_r+0x20>
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	b943      	cbnz	r3, 80097fc <__swbuf_r+0x32>
 80097ea:	4621      	mov	r1, r4
 80097ec:	4628      	mov	r0, r5
 80097ee:	f000 f82b 	bl	8009848 <__swsetup_r>
 80097f2:	b118      	cbz	r0, 80097fc <__swbuf_r+0x32>
 80097f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80097f8:	4638      	mov	r0, r7
 80097fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	6922      	ldr	r2, [r4, #16]
 8009800:	1a98      	subs	r0, r3, r2
 8009802:	6963      	ldr	r3, [r4, #20]
 8009804:	b2f6      	uxtb	r6, r6
 8009806:	4283      	cmp	r3, r0
 8009808:	4637      	mov	r7, r6
 800980a:	dc05      	bgt.n	8009818 <__swbuf_r+0x4e>
 800980c:	4621      	mov	r1, r4
 800980e:	4628      	mov	r0, r5
 8009810:	f000 fca8 	bl	800a164 <_fflush_r>
 8009814:	2800      	cmp	r0, #0
 8009816:	d1ed      	bne.n	80097f4 <__swbuf_r+0x2a>
 8009818:	68a3      	ldr	r3, [r4, #8]
 800981a:	3b01      	subs	r3, #1
 800981c:	60a3      	str	r3, [r4, #8]
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	6022      	str	r2, [r4, #0]
 8009824:	701e      	strb	r6, [r3, #0]
 8009826:	6962      	ldr	r2, [r4, #20]
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	429a      	cmp	r2, r3
 800982c:	d004      	beq.n	8009838 <__swbuf_r+0x6e>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	07db      	lsls	r3, r3, #31
 8009832:	d5e1      	bpl.n	80097f8 <__swbuf_r+0x2e>
 8009834:	2e0a      	cmp	r6, #10
 8009836:	d1df      	bne.n	80097f8 <__swbuf_r+0x2e>
 8009838:	4621      	mov	r1, r4
 800983a:	4628      	mov	r0, r5
 800983c:	f000 fc92 	bl	800a164 <_fflush_r>
 8009840:	2800      	cmp	r0, #0
 8009842:	d0d9      	beq.n	80097f8 <__swbuf_r+0x2e>
 8009844:	e7d6      	b.n	80097f4 <__swbuf_r+0x2a>
	...

08009848 <__swsetup_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4b29      	ldr	r3, [pc, #164]	@ (80098f0 <__swsetup_r+0xa8>)
 800984c:	4605      	mov	r5, r0
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	460c      	mov	r4, r1
 8009852:	b118      	cbz	r0, 800985c <__swsetup_r+0x14>
 8009854:	6a03      	ldr	r3, [r0, #32]
 8009856:	b90b      	cbnz	r3, 800985c <__swsetup_r+0x14>
 8009858:	f7ff fece 	bl	80095f8 <__sinit>
 800985c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009860:	0719      	lsls	r1, r3, #28
 8009862:	d422      	bmi.n	80098aa <__swsetup_r+0x62>
 8009864:	06da      	lsls	r2, r3, #27
 8009866:	d407      	bmi.n	8009878 <__swsetup_r+0x30>
 8009868:	2209      	movs	r2, #9
 800986a:	602a      	str	r2, [r5, #0]
 800986c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009876:	e033      	b.n	80098e0 <__swsetup_r+0x98>
 8009878:	0758      	lsls	r0, r3, #29
 800987a:	d512      	bpl.n	80098a2 <__swsetup_r+0x5a>
 800987c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800987e:	b141      	cbz	r1, 8009892 <__swsetup_r+0x4a>
 8009880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009884:	4299      	cmp	r1, r3
 8009886:	d002      	beq.n	800988e <__swsetup_r+0x46>
 8009888:	4628      	mov	r0, r5
 800988a:	f000 f8cd 	bl	8009a28 <_free_r>
 800988e:	2300      	movs	r3, #0
 8009890:	6363      	str	r3, [r4, #52]	@ 0x34
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	2300      	movs	r3, #0
 800989c:	6063      	str	r3, [r4, #4]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f043 0308 	orr.w	r3, r3, #8
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	6923      	ldr	r3, [r4, #16]
 80098ac:	b94b      	cbnz	r3, 80098c2 <__swsetup_r+0x7a>
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098b8:	d003      	beq.n	80098c2 <__swsetup_r+0x7a>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 fc9f 	bl	800a200 <__smakebuf_r>
 80098c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c6:	f013 0201 	ands.w	r2, r3, #1
 80098ca:	d00a      	beq.n	80098e2 <__swsetup_r+0x9a>
 80098cc:	2200      	movs	r2, #0
 80098ce:	60a2      	str	r2, [r4, #8]
 80098d0:	6962      	ldr	r2, [r4, #20]
 80098d2:	4252      	negs	r2, r2
 80098d4:	61a2      	str	r2, [r4, #24]
 80098d6:	6922      	ldr	r2, [r4, #16]
 80098d8:	b942      	cbnz	r2, 80098ec <__swsetup_r+0xa4>
 80098da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098de:	d1c5      	bne.n	800986c <__swsetup_r+0x24>
 80098e0:	bd38      	pop	{r3, r4, r5, pc}
 80098e2:	0799      	lsls	r1, r3, #30
 80098e4:	bf58      	it	pl
 80098e6:	6962      	ldrpl	r2, [r4, #20]
 80098e8:	60a2      	str	r2, [r4, #8]
 80098ea:	e7f4      	b.n	80098d6 <__swsetup_r+0x8e>
 80098ec:	2000      	movs	r0, #0
 80098ee:	e7f7      	b.n	80098e0 <__swsetup_r+0x98>
 80098f0:	2000001c 	.word	0x2000001c

080098f4 <memset>:
 80098f4:	4402      	add	r2, r0
 80098f6:	4603      	mov	r3, r0
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d100      	bne.n	80098fe <memset+0xa>
 80098fc:	4770      	bx	lr
 80098fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009902:	e7f9      	b.n	80098f8 <memset+0x4>

08009904 <_close_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4d06      	ldr	r5, [pc, #24]	@ (8009920 <_close_r+0x1c>)
 8009908:	2300      	movs	r3, #0
 800990a:	4604      	mov	r4, r0
 800990c:	4608      	mov	r0, r1
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	f7f7 fc09 	bl	8001126 <_close>
 8009914:	1c43      	adds	r3, r0, #1
 8009916:	d102      	bne.n	800991e <_close_r+0x1a>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	b103      	cbz	r3, 800991e <_close_r+0x1a>
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	bd38      	pop	{r3, r4, r5, pc}
 8009920:	200037e0 	.word	0x200037e0

08009924 <_lseek_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d07      	ldr	r5, [pc, #28]	@ (8009944 <_lseek_r+0x20>)
 8009928:	4604      	mov	r4, r0
 800992a:	4608      	mov	r0, r1
 800992c:	4611      	mov	r1, r2
 800992e:	2200      	movs	r2, #0
 8009930:	602a      	str	r2, [r5, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	f7f7 fc1e 	bl	8001174 <_lseek>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_lseek_r+0x1e>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_lseek_r+0x1e>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	200037e0 	.word	0x200037e0

08009948 <_read_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	@ (8009968 <_read_r+0x20>)
 800994c:	4604      	mov	r4, r0
 800994e:	4608      	mov	r0, r1
 8009950:	4611      	mov	r1, r2
 8009952:	2200      	movs	r2, #0
 8009954:	602a      	str	r2, [r5, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	f7f7 fbc8 	bl	80010ec <_read>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_read_r+0x1e>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_read_r+0x1e>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	200037e0 	.word	0x200037e0

0800996c <_sbrk_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d06      	ldr	r5, [pc, #24]	@ (8009988 <_sbrk_r+0x1c>)
 8009970:	2300      	movs	r3, #0
 8009972:	4604      	mov	r4, r0
 8009974:	4608      	mov	r0, r1
 8009976:	602b      	str	r3, [r5, #0]
 8009978:	f7f7 fc0a 	bl	8001190 <_sbrk>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d102      	bne.n	8009986 <_sbrk_r+0x1a>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	b103      	cbz	r3, 8009986 <_sbrk_r+0x1a>
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	200037e0 	.word	0x200037e0

0800998c <_write_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d07      	ldr	r5, [pc, #28]	@ (80099ac <_write_r+0x20>)
 8009990:	4604      	mov	r4, r0
 8009992:	4608      	mov	r0, r1
 8009994:	4611      	mov	r1, r2
 8009996:	2200      	movs	r2, #0
 8009998:	602a      	str	r2, [r5, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f7f6 fe3a 	bl	8000614 <_write>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_write_r+0x1e>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_write_r+0x1e>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	200037e0 	.word	0x200037e0

080099b0 <__errno>:
 80099b0:	4b01      	ldr	r3, [pc, #4]	@ (80099b8 <__errno+0x8>)
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	2000001c 	.word	0x2000001c

080099bc <__libc_init_array>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	4d0d      	ldr	r5, [pc, #52]	@ (80099f4 <__libc_init_array+0x38>)
 80099c0:	4c0d      	ldr	r4, [pc, #52]	@ (80099f8 <__libc_init_array+0x3c>)
 80099c2:	1b64      	subs	r4, r4, r5
 80099c4:	10a4      	asrs	r4, r4, #2
 80099c6:	2600      	movs	r6, #0
 80099c8:	42a6      	cmp	r6, r4
 80099ca:	d109      	bne.n	80099e0 <__libc_init_array+0x24>
 80099cc:	4d0b      	ldr	r5, [pc, #44]	@ (80099fc <__libc_init_array+0x40>)
 80099ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009a00 <__libc_init_array+0x44>)
 80099d0:	f000 fc74 	bl	800a2bc <_init>
 80099d4:	1b64      	subs	r4, r4, r5
 80099d6:	10a4      	asrs	r4, r4, #2
 80099d8:	2600      	movs	r6, #0
 80099da:	42a6      	cmp	r6, r4
 80099dc:	d105      	bne.n	80099ea <__libc_init_array+0x2e>
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e4:	4798      	blx	r3
 80099e6:	3601      	adds	r6, #1
 80099e8:	e7ee      	b.n	80099c8 <__libc_init_array+0xc>
 80099ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ee:	4798      	blx	r3
 80099f0:	3601      	adds	r6, #1
 80099f2:	e7f2      	b.n	80099da <__libc_init_array+0x1e>
 80099f4:	0800a500 	.word	0x0800a500
 80099f8:	0800a500 	.word	0x0800a500
 80099fc:	0800a500 	.word	0x0800a500
 8009a00:	0800a508 	.word	0x0800a508

08009a04 <__retarget_lock_init_recursive>:
 8009a04:	4770      	bx	lr

08009a06 <__retarget_lock_acquire_recursive>:
 8009a06:	4770      	bx	lr

08009a08 <__retarget_lock_release_recursive>:
 8009a08:	4770      	bx	lr

08009a0a <memcpy>:
 8009a0a:	440a      	add	r2, r1
 8009a0c:	4291      	cmp	r1, r2
 8009a0e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009a12:	d100      	bne.n	8009a16 <memcpy+0xc>
 8009a14:	4770      	bx	lr
 8009a16:	b510      	push	{r4, lr}
 8009a18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a20:	4291      	cmp	r1, r2
 8009a22:	d1f9      	bne.n	8009a18 <memcpy+0xe>
 8009a24:	bd10      	pop	{r4, pc}
	...

08009a28 <_free_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d041      	beq.n	8009ab4 <_free_r+0x8c>
 8009a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a34:	1f0c      	subs	r4, r1, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bfb8      	it	lt
 8009a3a:	18e4      	addlt	r4, r4, r3
 8009a3c:	f7ff fd44 	bl	80094c8 <__malloc_lock>
 8009a40:	4a1d      	ldr	r2, [pc, #116]	@ (8009ab8 <_free_r+0x90>)
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	b933      	cbnz	r3, 8009a54 <_free_r+0x2c>
 8009a46:	6063      	str	r3, [r4, #4]
 8009a48:	6014      	str	r4, [r2, #0]
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a50:	f7ff bd40 	b.w	80094d4 <__malloc_unlock>
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	d908      	bls.n	8009a6a <_free_r+0x42>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	1821      	adds	r1, r4, r0
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	bf01      	itttt	eq
 8009a60:	6819      	ldreq	r1, [r3, #0]
 8009a62:	685b      	ldreq	r3, [r3, #4]
 8009a64:	1809      	addeq	r1, r1, r0
 8009a66:	6021      	streq	r1, [r4, #0]
 8009a68:	e7ed      	b.n	8009a46 <_free_r+0x1e>
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	b10b      	cbz	r3, 8009a74 <_free_r+0x4c>
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	d9fa      	bls.n	8009a6a <_free_r+0x42>
 8009a74:	6811      	ldr	r1, [r2, #0]
 8009a76:	1850      	adds	r0, r2, r1
 8009a78:	42a0      	cmp	r0, r4
 8009a7a:	d10b      	bne.n	8009a94 <_free_r+0x6c>
 8009a7c:	6820      	ldr	r0, [r4, #0]
 8009a7e:	4401      	add	r1, r0
 8009a80:	1850      	adds	r0, r2, r1
 8009a82:	4283      	cmp	r3, r0
 8009a84:	6011      	str	r1, [r2, #0]
 8009a86:	d1e0      	bne.n	8009a4a <_free_r+0x22>
 8009a88:	6818      	ldr	r0, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	6053      	str	r3, [r2, #4]
 8009a8e:	4408      	add	r0, r1
 8009a90:	6010      	str	r0, [r2, #0]
 8009a92:	e7da      	b.n	8009a4a <_free_r+0x22>
 8009a94:	d902      	bls.n	8009a9c <_free_r+0x74>
 8009a96:	230c      	movs	r3, #12
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	e7d6      	b.n	8009a4a <_free_r+0x22>
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	1821      	adds	r1, r4, r0
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	bf04      	itt	eq
 8009aa4:	6819      	ldreq	r1, [r3, #0]
 8009aa6:	685b      	ldreq	r3, [r3, #4]
 8009aa8:	6063      	str	r3, [r4, #4]
 8009aaa:	bf04      	itt	eq
 8009aac:	1809      	addeq	r1, r1, r0
 8009aae:	6021      	streq	r1, [r4, #0]
 8009ab0:	6054      	str	r4, [r2, #4]
 8009ab2:	e7ca      	b.n	8009a4a <_free_r+0x22>
 8009ab4:	bd38      	pop	{r3, r4, r5, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200036a0 	.word	0x200036a0

08009abc <__sfputc_r>:
 8009abc:	6893      	ldr	r3, [r2, #8]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	b410      	push	{r4}
 8009ac4:	6093      	str	r3, [r2, #8]
 8009ac6:	da08      	bge.n	8009ada <__sfputc_r+0x1e>
 8009ac8:	6994      	ldr	r4, [r2, #24]
 8009aca:	42a3      	cmp	r3, r4
 8009acc:	db01      	blt.n	8009ad2 <__sfputc_r+0x16>
 8009ace:	290a      	cmp	r1, #10
 8009ad0:	d103      	bne.n	8009ada <__sfputc_r+0x1e>
 8009ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ad6:	f7ff be78 	b.w	80097ca <__swbuf_r>
 8009ada:	6813      	ldr	r3, [r2, #0]
 8009adc:	1c58      	adds	r0, r3, #1
 8009ade:	6010      	str	r0, [r2, #0]
 8009ae0:	7019      	strb	r1, [r3, #0]
 8009ae2:	4608      	mov	r0, r1
 8009ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <__sfputs_r>:
 8009aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aec:	4606      	mov	r6, r0
 8009aee:	460f      	mov	r7, r1
 8009af0:	4614      	mov	r4, r2
 8009af2:	18d5      	adds	r5, r2, r3
 8009af4:	42ac      	cmp	r4, r5
 8009af6:	d101      	bne.n	8009afc <__sfputs_r+0x12>
 8009af8:	2000      	movs	r0, #0
 8009afa:	e007      	b.n	8009b0c <__sfputs_r+0x22>
 8009afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b00:	463a      	mov	r2, r7
 8009b02:	4630      	mov	r0, r6
 8009b04:	f7ff ffda 	bl	8009abc <__sfputc_r>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d1f3      	bne.n	8009af4 <__sfputs_r+0xa>
 8009b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b10 <_vfiprintf_r>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	460d      	mov	r5, r1
 8009b16:	b09d      	sub	sp, #116	@ 0x74
 8009b18:	4614      	mov	r4, r2
 8009b1a:	4698      	mov	r8, r3
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	b118      	cbz	r0, 8009b28 <_vfiprintf_r+0x18>
 8009b20:	6a03      	ldr	r3, [r0, #32]
 8009b22:	b90b      	cbnz	r3, 8009b28 <_vfiprintf_r+0x18>
 8009b24:	f7ff fd68 	bl	80095f8 <__sinit>
 8009b28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b2a:	07d9      	lsls	r1, r3, #31
 8009b2c:	d405      	bmi.n	8009b3a <_vfiprintf_r+0x2a>
 8009b2e:	89ab      	ldrh	r3, [r5, #12]
 8009b30:	059a      	lsls	r2, r3, #22
 8009b32:	d402      	bmi.n	8009b3a <_vfiprintf_r+0x2a>
 8009b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b36:	f7ff ff66 	bl	8009a06 <__retarget_lock_acquire_recursive>
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	071b      	lsls	r3, r3, #28
 8009b3e:	d501      	bpl.n	8009b44 <_vfiprintf_r+0x34>
 8009b40:	692b      	ldr	r3, [r5, #16]
 8009b42:	b99b      	cbnz	r3, 8009b6c <_vfiprintf_r+0x5c>
 8009b44:	4629      	mov	r1, r5
 8009b46:	4630      	mov	r0, r6
 8009b48:	f7ff fe7e 	bl	8009848 <__swsetup_r>
 8009b4c:	b170      	cbz	r0, 8009b6c <_vfiprintf_r+0x5c>
 8009b4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b50:	07dc      	lsls	r4, r3, #31
 8009b52:	d504      	bpl.n	8009b5e <_vfiprintf_r+0x4e>
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b58:	b01d      	add	sp, #116	@ 0x74
 8009b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	0598      	lsls	r0, r3, #22
 8009b62:	d4f7      	bmi.n	8009b54 <_vfiprintf_r+0x44>
 8009b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b66:	f7ff ff4f 	bl	8009a08 <__retarget_lock_release_recursive>
 8009b6a:	e7f3      	b.n	8009b54 <_vfiprintf_r+0x44>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b70:	2320      	movs	r3, #32
 8009b72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b7a:	2330      	movs	r3, #48	@ 0x30
 8009b7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d2c <_vfiprintf_r+0x21c>
 8009b80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b84:	f04f 0901 	mov.w	r9, #1
 8009b88:	4623      	mov	r3, r4
 8009b8a:	469a      	mov	sl, r3
 8009b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b90:	b10a      	cbz	r2, 8009b96 <_vfiprintf_r+0x86>
 8009b92:	2a25      	cmp	r2, #37	@ 0x25
 8009b94:	d1f9      	bne.n	8009b8a <_vfiprintf_r+0x7a>
 8009b96:	ebba 0b04 	subs.w	fp, sl, r4
 8009b9a:	d00b      	beq.n	8009bb4 <_vfiprintf_r+0xa4>
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7ff ffa1 	bl	8009aea <__sfputs_r>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	f000 80a7 	beq.w	8009cfc <_vfiprintf_r+0x1ec>
 8009bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb0:	445a      	add	r2, fp
 8009bb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 809f 	beq.w	8009cfc <_vfiprintf_r+0x1ec>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc8:	f10a 0a01 	add.w	sl, sl, #1
 8009bcc:	9304      	str	r3, [sp, #16]
 8009bce:	9307      	str	r3, [sp, #28]
 8009bd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bd6:	4654      	mov	r4, sl
 8009bd8:	2205      	movs	r2, #5
 8009bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bde:	4853      	ldr	r0, [pc, #332]	@ (8009d2c <_vfiprintf_r+0x21c>)
 8009be0:	f7f6 fb1e 	bl	8000220 <memchr>
 8009be4:	9a04      	ldr	r2, [sp, #16]
 8009be6:	b9d8      	cbnz	r0, 8009c20 <_vfiprintf_r+0x110>
 8009be8:	06d1      	lsls	r1, r2, #27
 8009bea:	bf44      	itt	mi
 8009bec:	2320      	movmi	r3, #32
 8009bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bf2:	0713      	lsls	r3, r2, #28
 8009bf4:	bf44      	itt	mi
 8009bf6:	232b      	movmi	r3, #43	@ 0x2b
 8009bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c02:	d015      	beq.n	8009c30 <_vfiprintf_r+0x120>
 8009c04:	9a07      	ldr	r2, [sp, #28]
 8009c06:	4654      	mov	r4, sl
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f04f 0c0a 	mov.w	ip, #10
 8009c0e:	4621      	mov	r1, r4
 8009c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c14:	3b30      	subs	r3, #48	@ 0x30
 8009c16:	2b09      	cmp	r3, #9
 8009c18:	d94b      	bls.n	8009cb2 <_vfiprintf_r+0x1a2>
 8009c1a:	b1b0      	cbz	r0, 8009c4a <_vfiprintf_r+0x13a>
 8009c1c:	9207      	str	r2, [sp, #28]
 8009c1e:	e014      	b.n	8009c4a <_vfiprintf_r+0x13a>
 8009c20:	eba0 0308 	sub.w	r3, r0, r8
 8009c24:	fa09 f303 	lsl.w	r3, r9, r3
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	9304      	str	r3, [sp, #16]
 8009c2c:	46a2      	mov	sl, r4
 8009c2e:	e7d2      	b.n	8009bd6 <_vfiprintf_r+0xc6>
 8009c30:	9b03      	ldr	r3, [sp, #12]
 8009c32:	1d19      	adds	r1, r3, #4
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	9103      	str	r1, [sp, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfbb      	ittet	lt
 8009c3c:	425b      	neglt	r3, r3
 8009c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c42:	9307      	strge	r3, [sp, #28]
 8009c44:	9307      	strlt	r3, [sp, #28]
 8009c46:	bfb8      	it	lt
 8009c48:	9204      	strlt	r2, [sp, #16]
 8009c4a:	7823      	ldrb	r3, [r4, #0]
 8009c4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c4e:	d10a      	bne.n	8009c66 <_vfiprintf_r+0x156>
 8009c50:	7863      	ldrb	r3, [r4, #1]
 8009c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c54:	d132      	bne.n	8009cbc <_vfiprintf_r+0x1ac>
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	1d1a      	adds	r2, r3, #4
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	9203      	str	r2, [sp, #12]
 8009c5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c62:	3402      	adds	r4, #2
 8009c64:	9305      	str	r3, [sp, #20]
 8009c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d3c <_vfiprintf_r+0x22c>
 8009c6a:	7821      	ldrb	r1, [r4, #0]
 8009c6c:	2203      	movs	r2, #3
 8009c6e:	4650      	mov	r0, sl
 8009c70:	f7f6 fad6 	bl	8000220 <memchr>
 8009c74:	b138      	cbz	r0, 8009c86 <_vfiprintf_r+0x176>
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	eba0 000a 	sub.w	r0, r0, sl
 8009c7c:	2240      	movs	r2, #64	@ 0x40
 8009c7e:	4082      	lsls	r2, r0
 8009c80:	4313      	orrs	r3, r2
 8009c82:	3401      	adds	r4, #1
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c8a:	4829      	ldr	r0, [pc, #164]	@ (8009d30 <_vfiprintf_r+0x220>)
 8009c8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c90:	2206      	movs	r2, #6
 8009c92:	f7f6 fac5 	bl	8000220 <memchr>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d03f      	beq.n	8009d1a <_vfiprintf_r+0x20a>
 8009c9a:	4b26      	ldr	r3, [pc, #152]	@ (8009d34 <_vfiprintf_r+0x224>)
 8009c9c:	bb1b      	cbnz	r3, 8009ce6 <_vfiprintf_r+0x1d6>
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	3307      	adds	r3, #7
 8009ca2:	f023 0307 	bic.w	r3, r3, #7
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	9303      	str	r3, [sp, #12]
 8009caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cac:	443b      	add	r3, r7
 8009cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb0:	e76a      	b.n	8009b88 <_vfiprintf_r+0x78>
 8009cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	2001      	movs	r0, #1
 8009cba:	e7a8      	b.n	8009c0e <_vfiprintf_r+0xfe>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	3401      	adds	r4, #1
 8009cc0:	9305      	str	r3, [sp, #20]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	f04f 0c0a 	mov.w	ip, #10
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cce:	3a30      	subs	r2, #48	@ 0x30
 8009cd0:	2a09      	cmp	r2, #9
 8009cd2:	d903      	bls.n	8009cdc <_vfiprintf_r+0x1cc>
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0c6      	beq.n	8009c66 <_vfiprintf_r+0x156>
 8009cd8:	9105      	str	r1, [sp, #20]
 8009cda:	e7c4      	b.n	8009c66 <_vfiprintf_r+0x156>
 8009cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e7f0      	b.n	8009cc8 <_vfiprintf_r+0x1b8>
 8009ce6:	ab03      	add	r3, sp, #12
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	462a      	mov	r2, r5
 8009cec:	4b12      	ldr	r3, [pc, #72]	@ (8009d38 <_vfiprintf_r+0x228>)
 8009cee:	a904      	add	r1, sp, #16
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f3af 8000 	nop.w
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	1c78      	adds	r0, r7, #1
 8009cfa:	d1d6      	bne.n	8009caa <_vfiprintf_r+0x19a>
 8009cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cfe:	07d9      	lsls	r1, r3, #31
 8009d00:	d405      	bmi.n	8009d0e <_vfiprintf_r+0x1fe>
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	059a      	lsls	r2, r3, #22
 8009d06:	d402      	bmi.n	8009d0e <_vfiprintf_r+0x1fe>
 8009d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d0a:	f7ff fe7d 	bl	8009a08 <__retarget_lock_release_recursive>
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	065b      	lsls	r3, r3, #25
 8009d12:	f53f af1f 	bmi.w	8009b54 <_vfiprintf_r+0x44>
 8009d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d18:	e71e      	b.n	8009b58 <_vfiprintf_r+0x48>
 8009d1a:	ab03      	add	r3, sp, #12
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	462a      	mov	r2, r5
 8009d20:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <_vfiprintf_r+0x228>)
 8009d22:	a904      	add	r1, sp, #16
 8009d24:	4630      	mov	r0, r6
 8009d26:	f000 f879 	bl	8009e1c <_printf_i>
 8009d2a:	e7e4      	b.n	8009cf6 <_vfiprintf_r+0x1e6>
 8009d2c:	0800a4c4 	.word	0x0800a4c4
 8009d30:	0800a4ce 	.word	0x0800a4ce
 8009d34:	00000000 	.word	0x00000000
 8009d38:	08009aeb 	.word	0x08009aeb
 8009d3c:	0800a4ca 	.word	0x0800a4ca

08009d40 <_printf_common>:
 8009d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d44:	4616      	mov	r6, r2
 8009d46:	4698      	mov	r8, r3
 8009d48:	688a      	ldr	r2, [r1, #8]
 8009d4a:	690b      	ldr	r3, [r1, #16]
 8009d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d50:	4293      	cmp	r3, r2
 8009d52:	bfb8      	it	lt
 8009d54:	4613      	movlt	r3, r2
 8009d56:	6033      	str	r3, [r6, #0]
 8009d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	b10a      	cbz	r2, 8009d66 <_printf_common+0x26>
 8009d62:	3301      	adds	r3, #1
 8009d64:	6033      	str	r3, [r6, #0]
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	0699      	lsls	r1, r3, #26
 8009d6a:	bf42      	ittt	mi
 8009d6c:	6833      	ldrmi	r3, [r6, #0]
 8009d6e:	3302      	addmi	r3, #2
 8009d70:	6033      	strmi	r3, [r6, #0]
 8009d72:	6825      	ldr	r5, [r4, #0]
 8009d74:	f015 0506 	ands.w	r5, r5, #6
 8009d78:	d106      	bne.n	8009d88 <_printf_common+0x48>
 8009d7a:	f104 0a19 	add.w	sl, r4, #25
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	6832      	ldr	r2, [r6, #0]
 8009d82:	1a9b      	subs	r3, r3, r2
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	dc26      	bgt.n	8009dd6 <_printf_common+0x96>
 8009d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d8c:	6822      	ldr	r2, [r4, #0]
 8009d8e:	3b00      	subs	r3, #0
 8009d90:	bf18      	it	ne
 8009d92:	2301      	movne	r3, #1
 8009d94:	0692      	lsls	r2, r2, #26
 8009d96:	d42b      	bmi.n	8009df0 <_printf_common+0xb0>
 8009d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d9c:	4641      	mov	r1, r8
 8009d9e:	4638      	mov	r0, r7
 8009da0:	47c8      	blx	r9
 8009da2:	3001      	adds	r0, #1
 8009da4:	d01e      	beq.n	8009de4 <_printf_common+0xa4>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	6922      	ldr	r2, [r4, #16]
 8009daa:	f003 0306 	and.w	r3, r3, #6
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	bf02      	ittt	eq
 8009db2:	68e5      	ldreq	r5, [r4, #12]
 8009db4:	6833      	ldreq	r3, [r6, #0]
 8009db6:	1aed      	subeq	r5, r5, r3
 8009db8:	68a3      	ldr	r3, [r4, #8]
 8009dba:	bf0c      	ite	eq
 8009dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dc0:	2500      	movne	r5, #0
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	bfc4      	itt	gt
 8009dc6:	1a9b      	subgt	r3, r3, r2
 8009dc8:	18ed      	addgt	r5, r5, r3
 8009dca:	2600      	movs	r6, #0
 8009dcc:	341a      	adds	r4, #26
 8009dce:	42b5      	cmp	r5, r6
 8009dd0:	d11a      	bne.n	8009e08 <_printf_common+0xc8>
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e008      	b.n	8009de8 <_printf_common+0xa8>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4652      	mov	r2, sl
 8009dda:	4641      	mov	r1, r8
 8009ddc:	4638      	mov	r0, r7
 8009dde:	47c8      	blx	r9
 8009de0:	3001      	adds	r0, #1
 8009de2:	d103      	bne.n	8009dec <_printf_common+0xac>
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dec:	3501      	adds	r5, #1
 8009dee:	e7c6      	b.n	8009d7e <_printf_common+0x3e>
 8009df0:	18e1      	adds	r1, r4, r3
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	2030      	movs	r0, #48	@ 0x30
 8009df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009dfa:	4422      	add	r2, r4
 8009dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e04:	3302      	adds	r3, #2
 8009e06:	e7c7      	b.n	8009d98 <_printf_common+0x58>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	4622      	mov	r2, r4
 8009e0c:	4641      	mov	r1, r8
 8009e0e:	4638      	mov	r0, r7
 8009e10:	47c8      	blx	r9
 8009e12:	3001      	adds	r0, #1
 8009e14:	d0e6      	beq.n	8009de4 <_printf_common+0xa4>
 8009e16:	3601      	adds	r6, #1
 8009e18:	e7d9      	b.n	8009dce <_printf_common+0x8e>
	...

08009e1c <_printf_i>:
 8009e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e20:	7e0f      	ldrb	r7, [r1, #24]
 8009e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e24:	2f78      	cmp	r7, #120	@ 0x78
 8009e26:	4691      	mov	r9, r2
 8009e28:	4680      	mov	r8, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	469a      	mov	sl, r3
 8009e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e32:	d807      	bhi.n	8009e44 <_printf_i+0x28>
 8009e34:	2f62      	cmp	r7, #98	@ 0x62
 8009e36:	d80a      	bhi.n	8009e4e <_printf_i+0x32>
 8009e38:	2f00      	cmp	r7, #0
 8009e3a:	f000 80d2 	beq.w	8009fe2 <_printf_i+0x1c6>
 8009e3e:	2f58      	cmp	r7, #88	@ 0x58
 8009e40:	f000 80b9 	beq.w	8009fb6 <_printf_i+0x19a>
 8009e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e4c:	e03a      	b.n	8009ec4 <_printf_i+0xa8>
 8009e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e52:	2b15      	cmp	r3, #21
 8009e54:	d8f6      	bhi.n	8009e44 <_printf_i+0x28>
 8009e56:	a101      	add	r1, pc, #4	@ (adr r1, 8009e5c <_printf_i+0x40>)
 8009e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e5c:	08009eb5 	.word	0x08009eb5
 8009e60:	08009ec9 	.word	0x08009ec9
 8009e64:	08009e45 	.word	0x08009e45
 8009e68:	08009e45 	.word	0x08009e45
 8009e6c:	08009e45 	.word	0x08009e45
 8009e70:	08009e45 	.word	0x08009e45
 8009e74:	08009ec9 	.word	0x08009ec9
 8009e78:	08009e45 	.word	0x08009e45
 8009e7c:	08009e45 	.word	0x08009e45
 8009e80:	08009e45 	.word	0x08009e45
 8009e84:	08009e45 	.word	0x08009e45
 8009e88:	08009fc9 	.word	0x08009fc9
 8009e8c:	08009ef3 	.word	0x08009ef3
 8009e90:	08009f83 	.word	0x08009f83
 8009e94:	08009e45 	.word	0x08009e45
 8009e98:	08009e45 	.word	0x08009e45
 8009e9c:	08009feb 	.word	0x08009feb
 8009ea0:	08009e45 	.word	0x08009e45
 8009ea4:	08009ef3 	.word	0x08009ef3
 8009ea8:	08009e45 	.word	0x08009e45
 8009eac:	08009e45 	.word	0x08009e45
 8009eb0:	08009f8b 	.word	0x08009f8b
 8009eb4:	6833      	ldr	r3, [r6, #0]
 8009eb6:	1d1a      	adds	r2, r3, #4
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6032      	str	r2, [r6, #0]
 8009ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e09d      	b.n	800a004 <_printf_i+0x1e8>
 8009ec8:	6833      	ldr	r3, [r6, #0]
 8009eca:	6820      	ldr	r0, [r4, #0]
 8009ecc:	1d19      	adds	r1, r3, #4
 8009ece:	6031      	str	r1, [r6, #0]
 8009ed0:	0606      	lsls	r6, r0, #24
 8009ed2:	d501      	bpl.n	8009ed8 <_printf_i+0xbc>
 8009ed4:	681d      	ldr	r5, [r3, #0]
 8009ed6:	e003      	b.n	8009ee0 <_printf_i+0xc4>
 8009ed8:	0645      	lsls	r5, r0, #25
 8009eda:	d5fb      	bpl.n	8009ed4 <_printf_i+0xb8>
 8009edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ee0:	2d00      	cmp	r5, #0
 8009ee2:	da03      	bge.n	8009eec <_printf_i+0xd0>
 8009ee4:	232d      	movs	r3, #45	@ 0x2d
 8009ee6:	426d      	negs	r5, r5
 8009ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eec:	4859      	ldr	r0, [pc, #356]	@ (800a054 <_printf_i+0x238>)
 8009eee:	230a      	movs	r3, #10
 8009ef0:	e011      	b.n	8009f16 <_printf_i+0xfa>
 8009ef2:	6821      	ldr	r1, [r4, #0]
 8009ef4:	6833      	ldr	r3, [r6, #0]
 8009ef6:	0608      	lsls	r0, r1, #24
 8009ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009efc:	d402      	bmi.n	8009f04 <_printf_i+0xe8>
 8009efe:	0649      	lsls	r1, r1, #25
 8009f00:	bf48      	it	mi
 8009f02:	b2ad      	uxthmi	r5, r5
 8009f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f06:	4853      	ldr	r0, [pc, #332]	@ (800a054 <_printf_i+0x238>)
 8009f08:	6033      	str	r3, [r6, #0]
 8009f0a:	bf14      	ite	ne
 8009f0c:	230a      	movne	r3, #10
 8009f0e:	2308      	moveq	r3, #8
 8009f10:	2100      	movs	r1, #0
 8009f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f16:	6866      	ldr	r6, [r4, #4]
 8009f18:	60a6      	str	r6, [r4, #8]
 8009f1a:	2e00      	cmp	r6, #0
 8009f1c:	bfa2      	ittt	ge
 8009f1e:	6821      	ldrge	r1, [r4, #0]
 8009f20:	f021 0104 	bicge.w	r1, r1, #4
 8009f24:	6021      	strge	r1, [r4, #0]
 8009f26:	b90d      	cbnz	r5, 8009f2c <_printf_i+0x110>
 8009f28:	2e00      	cmp	r6, #0
 8009f2a:	d04b      	beq.n	8009fc4 <_printf_i+0x1a8>
 8009f2c:	4616      	mov	r6, r2
 8009f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f32:	fb03 5711 	mls	r7, r3, r1, r5
 8009f36:	5dc7      	ldrb	r7, [r0, r7]
 8009f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f3c:	462f      	mov	r7, r5
 8009f3e:	42bb      	cmp	r3, r7
 8009f40:	460d      	mov	r5, r1
 8009f42:	d9f4      	bls.n	8009f2e <_printf_i+0x112>
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d10b      	bne.n	8009f60 <_printf_i+0x144>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	07df      	lsls	r7, r3, #31
 8009f4c:	d508      	bpl.n	8009f60 <_printf_i+0x144>
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	6861      	ldr	r1, [r4, #4]
 8009f52:	4299      	cmp	r1, r3
 8009f54:	bfde      	ittt	le
 8009f56:	2330      	movle	r3, #48	@ 0x30
 8009f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f5c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009f60:	1b92      	subs	r2, r2, r6
 8009f62:	6122      	str	r2, [r4, #16]
 8009f64:	f8cd a000 	str.w	sl, [sp]
 8009f68:	464b      	mov	r3, r9
 8009f6a:	aa03      	add	r2, sp, #12
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	4640      	mov	r0, r8
 8009f70:	f7ff fee6 	bl	8009d40 <_printf_common>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d14a      	bne.n	800a00e <_printf_i+0x1f2>
 8009f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f7c:	b004      	add	sp, #16
 8009f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	f043 0320 	orr.w	r3, r3, #32
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	4833      	ldr	r0, [pc, #204]	@ (800a058 <_printf_i+0x23c>)
 8009f8c:	2778      	movs	r7, #120	@ 0x78
 8009f8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	6831      	ldr	r1, [r6, #0]
 8009f96:	061f      	lsls	r7, r3, #24
 8009f98:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f9c:	d402      	bmi.n	8009fa4 <_printf_i+0x188>
 8009f9e:	065f      	lsls	r7, r3, #25
 8009fa0:	bf48      	it	mi
 8009fa2:	b2ad      	uxthmi	r5, r5
 8009fa4:	6031      	str	r1, [r6, #0]
 8009fa6:	07d9      	lsls	r1, r3, #31
 8009fa8:	bf44      	itt	mi
 8009faa:	f043 0320 	orrmi.w	r3, r3, #32
 8009fae:	6023      	strmi	r3, [r4, #0]
 8009fb0:	b11d      	cbz	r5, 8009fba <_printf_i+0x19e>
 8009fb2:	2310      	movs	r3, #16
 8009fb4:	e7ac      	b.n	8009f10 <_printf_i+0xf4>
 8009fb6:	4827      	ldr	r0, [pc, #156]	@ (800a054 <_printf_i+0x238>)
 8009fb8:	e7e9      	b.n	8009f8e <_printf_i+0x172>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	f023 0320 	bic.w	r3, r3, #32
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	e7f6      	b.n	8009fb2 <_printf_i+0x196>
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	e7bd      	b.n	8009f44 <_printf_i+0x128>
 8009fc8:	6833      	ldr	r3, [r6, #0]
 8009fca:	6825      	ldr	r5, [r4, #0]
 8009fcc:	6961      	ldr	r1, [r4, #20]
 8009fce:	1d18      	adds	r0, r3, #4
 8009fd0:	6030      	str	r0, [r6, #0]
 8009fd2:	062e      	lsls	r6, r5, #24
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	d501      	bpl.n	8009fdc <_printf_i+0x1c0>
 8009fd8:	6019      	str	r1, [r3, #0]
 8009fda:	e002      	b.n	8009fe2 <_printf_i+0x1c6>
 8009fdc:	0668      	lsls	r0, r5, #25
 8009fde:	d5fb      	bpl.n	8009fd8 <_printf_i+0x1bc>
 8009fe0:	8019      	strh	r1, [r3, #0]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	4616      	mov	r6, r2
 8009fe8:	e7bc      	b.n	8009f64 <_printf_i+0x148>
 8009fea:	6833      	ldr	r3, [r6, #0]
 8009fec:	1d1a      	adds	r2, r3, #4
 8009fee:	6032      	str	r2, [r6, #0]
 8009ff0:	681e      	ldr	r6, [r3, #0]
 8009ff2:	6862      	ldr	r2, [r4, #4]
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f7f6 f912 	bl	8000220 <memchr>
 8009ffc:	b108      	cbz	r0, 800a002 <_printf_i+0x1e6>
 8009ffe:	1b80      	subs	r0, r0, r6
 800a000:	6060      	str	r0, [r4, #4]
 800a002:	6863      	ldr	r3, [r4, #4]
 800a004:	6123      	str	r3, [r4, #16]
 800a006:	2300      	movs	r3, #0
 800a008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a00c:	e7aa      	b.n	8009f64 <_printf_i+0x148>
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	4632      	mov	r2, r6
 800a012:	4649      	mov	r1, r9
 800a014:	4640      	mov	r0, r8
 800a016:	47d0      	blx	sl
 800a018:	3001      	adds	r0, #1
 800a01a:	d0ad      	beq.n	8009f78 <_printf_i+0x15c>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	079b      	lsls	r3, r3, #30
 800a020:	d413      	bmi.n	800a04a <_printf_i+0x22e>
 800a022:	68e0      	ldr	r0, [r4, #12]
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	4298      	cmp	r0, r3
 800a028:	bfb8      	it	lt
 800a02a:	4618      	movlt	r0, r3
 800a02c:	e7a6      	b.n	8009f7c <_printf_i+0x160>
 800a02e:	2301      	movs	r3, #1
 800a030:	4632      	mov	r2, r6
 800a032:	4649      	mov	r1, r9
 800a034:	4640      	mov	r0, r8
 800a036:	47d0      	blx	sl
 800a038:	3001      	adds	r0, #1
 800a03a:	d09d      	beq.n	8009f78 <_printf_i+0x15c>
 800a03c:	3501      	adds	r5, #1
 800a03e:	68e3      	ldr	r3, [r4, #12]
 800a040:	9903      	ldr	r1, [sp, #12]
 800a042:	1a5b      	subs	r3, r3, r1
 800a044:	42ab      	cmp	r3, r5
 800a046:	dcf2      	bgt.n	800a02e <_printf_i+0x212>
 800a048:	e7eb      	b.n	800a022 <_printf_i+0x206>
 800a04a:	2500      	movs	r5, #0
 800a04c:	f104 0619 	add.w	r6, r4, #25
 800a050:	e7f5      	b.n	800a03e <_printf_i+0x222>
 800a052:	bf00      	nop
 800a054:	0800a4d5 	.word	0x0800a4d5
 800a058:	0800a4e6 	.word	0x0800a4e6

0800a05c <__sflush_r>:
 800a05c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a064:	0716      	lsls	r6, r2, #28
 800a066:	4605      	mov	r5, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	d454      	bmi.n	800a116 <__sflush_r+0xba>
 800a06c:	684b      	ldr	r3, [r1, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dc02      	bgt.n	800a078 <__sflush_r+0x1c>
 800a072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd48      	ble.n	800a10a <__sflush_r+0xae>
 800a078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d045      	beq.n	800a10a <__sflush_r+0xae>
 800a07e:	2300      	movs	r3, #0
 800a080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a084:	682f      	ldr	r7, [r5, #0]
 800a086:	6a21      	ldr	r1, [r4, #32]
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	d030      	beq.n	800a0ee <__sflush_r+0x92>
 800a08c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	0759      	lsls	r1, r3, #29
 800a092:	d505      	bpl.n	800a0a0 <__sflush_r+0x44>
 800a094:	6863      	ldr	r3, [r4, #4]
 800a096:	1ad2      	subs	r2, r2, r3
 800a098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a09a:	b10b      	cbz	r3, 800a0a0 <__sflush_r+0x44>
 800a09c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0a4:	6a21      	ldr	r1, [r4, #32]
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b0      	blx	r6
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	d106      	bne.n	800a0be <__sflush_r+0x62>
 800a0b0:	6829      	ldr	r1, [r5, #0]
 800a0b2:	291d      	cmp	r1, #29
 800a0b4:	d82b      	bhi.n	800a10e <__sflush_r+0xb2>
 800a0b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a160 <__sflush_r+0x104>)
 800a0b8:	410a      	asrs	r2, r1
 800a0ba:	07d6      	lsls	r6, r2, #31
 800a0bc:	d427      	bmi.n	800a10e <__sflush_r+0xb2>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	6062      	str	r2, [r4, #4]
 800a0c2:	04d9      	lsls	r1, r3, #19
 800a0c4:	6922      	ldr	r2, [r4, #16]
 800a0c6:	6022      	str	r2, [r4, #0]
 800a0c8:	d504      	bpl.n	800a0d4 <__sflush_r+0x78>
 800a0ca:	1c42      	adds	r2, r0, #1
 800a0cc:	d101      	bne.n	800a0d2 <__sflush_r+0x76>
 800a0ce:	682b      	ldr	r3, [r5, #0]
 800a0d0:	b903      	cbnz	r3, 800a0d4 <__sflush_r+0x78>
 800a0d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0d6:	602f      	str	r7, [r5, #0]
 800a0d8:	b1b9      	cbz	r1, 800a10a <__sflush_r+0xae>
 800a0da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	d002      	beq.n	800a0e8 <__sflush_r+0x8c>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7ff fca0 	bl	8009a28 <_free_r>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0ec:	e00d      	b.n	800a10a <__sflush_r+0xae>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	1c50      	adds	r0, r2, #1
 800a0f8:	d1c9      	bne.n	800a08e <__sflush_r+0x32>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0c6      	beq.n	800a08e <__sflush_r+0x32>
 800a100:	2b1d      	cmp	r3, #29
 800a102:	d001      	beq.n	800a108 <__sflush_r+0xac>
 800a104:	2b16      	cmp	r3, #22
 800a106:	d11e      	bne.n	800a146 <__sflush_r+0xea>
 800a108:	602f      	str	r7, [r5, #0]
 800a10a:	2000      	movs	r0, #0
 800a10c:	e022      	b.n	800a154 <__sflush_r+0xf8>
 800a10e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a112:	b21b      	sxth	r3, r3
 800a114:	e01b      	b.n	800a14e <__sflush_r+0xf2>
 800a116:	690f      	ldr	r7, [r1, #16]
 800a118:	2f00      	cmp	r7, #0
 800a11a:	d0f6      	beq.n	800a10a <__sflush_r+0xae>
 800a11c:	0793      	lsls	r3, r2, #30
 800a11e:	680e      	ldr	r6, [r1, #0]
 800a120:	bf08      	it	eq
 800a122:	694b      	ldreq	r3, [r1, #20]
 800a124:	600f      	str	r7, [r1, #0]
 800a126:	bf18      	it	ne
 800a128:	2300      	movne	r3, #0
 800a12a:	eba6 0807 	sub.w	r8, r6, r7
 800a12e:	608b      	str	r3, [r1, #8]
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	dde9      	ble.n	800a10a <__sflush_r+0xae>
 800a136:	6a21      	ldr	r1, [r4, #32]
 800a138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a13a:	4643      	mov	r3, r8
 800a13c:	463a      	mov	r2, r7
 800a13e:	4628      	mov	r0, r5
 800a140:	47b0      	blx	r6
 800a142:	2800      	cmp	r0, #0
 800a144:	dc08      	bgt.n	800a158 <__sflush_r+0xfc>
 800a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	4407      	add	r7, r0
 800a15a:	eba8 0800 	sub.w	r8, r8, r0
 800a15e:	e7e7      	b.n	800a130 <__sflush_r+0xd4>
 800a160:	dfbffffe 	.word	0xdfbffffe

0800a164 <_fflush_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	4605      	mov	r5, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	b913      	cbnz	r3, 800a174 <_fflush_r+0x10>
 800a16e:	2500      	movs	r5, #0
 800a170:	4628      	mov	r0, r5
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	b118      	cbz	r0, 800a17e <_fflush_r+0x1a>
 800a176:	6a03      	ldr	r3, [r0, #32]
 800a178:	b90b      	cbnz	r3, 800a17e <_fflush_r+0x1a>
 800a17a:	f7ff fa3d 	bl	80095f8 <__sinit>
 800a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f3      	beq.n	800a16e <_fflush_r+0xa>
 800a186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a188:	07d0      	lsls	r0, r2, #31
 800a18a:	d404      	bmi.n	800a196 <_fflush_r+0x32>
 800a18c:	0599      	lsls	r1, r3, #22
 800a18e:	d402      	bmi.n	800a196 <_fflush_r+0x32>
 800a190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a192:	f7ff fc38 	bl	8009a06 <__retarget_lock_acquire_recursive>
 800a196:	4628      	mov	r0, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	f7ff ff5f 	bl	800a05c <__sflush_r>
 800a19e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1a0:	07da      	lsls	r2, r3, #31
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	d4e4      	bmi.n	800a170 <_fflush_r+0xc>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	059b      	lsls	r3, r3, #22
 800a1aa:	d4e1      	bmi.n	800a170 <_fflush_r+0xc>
 800a1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ae:	f7ff fc2b 	bl	8009a08 <__retarget_lock_release_recursive>
 800a1b2:	e7dd      	b.n	800a170 <_fflush_r+0xc>

0800a1b4 <__swhatbuf_r>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	b096      	sub	sp, #88	@ 0x58
 800a1c0:	4615      	mov	r5, r2
 800a1c2:	461e      	mov	r6, r3
 800a1c4:	da0d      	bge.n	800a1e2 <__swhatbuf_r+0x2e>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1cc:	f04f 0100 	mov.w	r1, #0
 800a1d0:	bf14      	ite	ne
 800a1d2:	2340      	movne	r3, #64	@ 0x40
 800a1d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1d8:	2000      	movs	r0, #0
 800a1da:	6031      	str	r1, [r6, #0]
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	b016      	add	sp, #88	@ 0x58
 800a1e0:	bd70      	pop	{r4, r5, r6, pc}
 800a1e2:	466a      	mov	r2, sp
 800a1e4:	f000 f848 	bl	800a278 <_fstat_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	dbec      	blt.n	800a1c6 <__swhatbuf_r+0x12>
 800a1ec:	9901      	ldr	r1, [sp, #4]
 800a1ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1f6:	4259      	negs	r1, r3
 800a1f8:	4159      	adcs	r1, r3
 800a1fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1fe:	e7eb      	b.n	800a1d8 <__swhatbuf_r+0x24>

0800a200 <__smakebuf_r>:
 800a200:	898b      	ldrh	r3, [r1, #12]
 800a202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a204:	079d      	lsls	r5, r3, #30
 800a206:	4606      	mov	r6, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	d507      	bpl.n	800a21c <__smakebuf_r+0x1c>
 800a20c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	2301      	movs	r3, #1
 800a216:	6163      	str	r3, [r4, #20]
 800a218:	b003      	add	sp, #12
 800a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a21c:	ab01      	add	r3, sp, #4
 800a21e:	466a      	mov	r2, sp
 800a220:	f7ff ffc8 	bl	800a1b4 <__swhatbuf_r>
 800a224:	9f00      	ldr	r7, [sp, #0]
 800a226:	4605      	mov	r5, r0
 800a228:	4639      	mov	r1, r7
 800a22a:	4630      	mov	r0, r6
 800a22c:	f7ff f8cc 	bl	80093c8 <_malloc_r>
 800a230:	b948      	cbnz	r0, 800a246 <__smakebuf_r+0x46>
 800a232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a236:	059a      	lsls	r2, r3, #22
 800a238:	d4ee      	bmi.n	800a218 <__smakebuf_r+0x18>
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	f043 0302 	orr.w	r3, r3, #2
 800a242:	81a3      	strh	r3, [r4, #12]
 800a244:	e7e2      	b.n	800a20c <__smakebuf_r+0xc>
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	6020      	str	r0, [r4, #0]
 800a24a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a256:	b15b      	cbz	r3, 800a270 <__smakebuf_r+0x70>
 800a258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a25c:	4630      	mov	r0, r6
 800a25e:	f000 f81d 	bl	800a29c <_isatty_r>
 800a262:	b128      	cbz	r0, 800a270 <__smakebuf_r+0x70>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	431d      	orrs	r5, r3
 800a274:	81a5      	strh	r5, [r4, #12]
 800a276:	e7cf      	b.n	800a218 <__smakebuf_r+0x18>

0800a278 <_fstat_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	@ (800a298 <_fstat_r+0x20>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	4611      	mov	r1, r2
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	f7f6 ff5a 	bl	800113e <_fstat>
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	d102      	bne.n	800a294 <_fstat_r+0x1c>
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	b103      	cbz	r3, 800a294 <_fstat_r+0x1c>
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	bd38      	pop	{r3, r4, r5, pc}
 800a296:	bf00      	nop
 800a298:	200037e0 	.word	0x200037e0

0800a29c <_isatty_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d06      	ldr	r5, [pc, #24]	@ (800a2b8 <_isatty_r+0x1c>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	f7f6 ff59 	bl	800115e <_isatty>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_isatty_r+0x1a>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_isatty_r+0x1a>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	200037e0 	.word	0x200037e0

0800a2bc <_init>:
 800a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2be:	bf00      	nop
 800a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c2:	bc08      	pop	{r3}
 800a2c4:	469e      	mov	lr, r3
 800a2c6:	4770      	bx	lr

0800a2c8 <_fini>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr
