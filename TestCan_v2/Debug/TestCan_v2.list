
TestCan_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e90  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800a070  0800a070  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a218  0800a218  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a218  0800a218  0000b218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a220  0800a220  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a220  0800a220  0000b220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800a228  0800a228  0000b228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a230  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003770  2000006c  0800a29c  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037dc  0800a29c  0000c7dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e85  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000450b  00000000  00000000  0002ef21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d6  00000000  00000000  00035060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009a9e  00000000  00000000  00036636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e730  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c850  00000000  00000000  0005e804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008084  00000000  00000000  0018b098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0019311c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a058 	.word	0x0800a058

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800a058 	.word	0x0800a058

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d009      	beq.n	80005dc <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <ITM_SendChar+0x2c>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <ITM_SendChar+0x2e>
 80005dc:	2300      	movs	r3, #0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d010      	beq.n	8000604 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e2:	e000      	b.n	80005e6 <ITM_SendChar+0x36>
    {
      __NOP();
 80005e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f4      	bne.n	80005e4 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

extern "C" int _write(int file, char *data, int len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, 100);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	b29a      	uxth	r2, r3
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	68b9      	ldr	r1, [r7, #8]
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <_write+0x24>)
 800062a:	f003 fb4d 	bl	8003cc8 <HAL_UART_Transmit>
	return len;
 800062e:	687b      	ldr	r3, [r7, #4]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000ec 	.word	0x200000ec

0800063c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000640:	f000 fd8f 	bl	8001162 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000644:	f000 f882 	bl	800074c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000648:	f000 f982 	bl	8000950 <_ZL12MX_GPIO_Initv>
	MX_FDCAN1_Init();
 800064c:	f000 f8d4 	bl	80007f8 <_ZL14MX_FDCAN1_Initv>
	MX_USART2_UART_Init();
 8000650:	f000 f91e 	bl	8000890 <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */

	printf("Can Test\r\n");
 8000654:	482a      	ldr	r0, [pc, #168]	@ (8000700 <main+0xc4>)
 8000656:	f008 ff3b 	bl	80094d0 <puts>

	can.setHandleFdcan(&hfdcan1);
 800065a:	492a      	ldr	r1, [pc, #168]	@ (8000704 <main+0xc8>)
 800065c:	482a      	ldr	r0, [pc, #168]	@ (8000708 <main+0xcc>)
 800065e:	f008 fbf7 	bl	8008e50 <_ZN15FdcanController14setHandleFdcanEP19FDCAN_HandleTypeDef>
	can.setHandleMutex(&mutexCanHandle);
 8000662:	492a      	ldr	r1, [pc, #168]	@ (800070c <main+0xd0>)
 8000664:	4828      	ldr	r0, [pc, #160]	@ (8000708 <main+0xcc>)
 8000666:	f008 fc0f 	bl	8008e88 <_ZN15FdcanController14setHandleMutexEPPv>
	can.setHandleQueue(&queueCanHandle);
 800066a:	4929      	ldr	r1, [pc, #164]	@ (8000710 <main+0xd4>)
 800066c:	4826      	ldr	r0, [pc, #152]	@ (8000708 <main+0xcc>)
 800066e:	f008 fbfd 	bl	8008e6c <_ZN15FdcanController14setHandleQueueEPPv>
	can.setHandleSem(&semCanHandle);
 8000672:	4928      	ldr	r1, [pc, #160]	@ (8000714 <main+0xd8>)
 8000674:	4824      	ldr	r0, [pc, #144]	@ (8000708 <main+0xcc>)
 8000676:	f008 fc15 	bl	8008ea4 <_ZN15FdcanController12setHandleSemEPPv>
	if (can.init() != FdcanController::State::Ok)
 800067a:	4823      	ldr	r0, [pc, #140]	@ (8000708 <main+0xcc>)
 800067c:	f008 fc20 	bl	8008ec0 <_ZN15FdcanController4initEv>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf14      	ite	ne
 8000686:	2301      	movne	r3, #1
 8000688:	2300      	moveq	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <main+0x5a>
	{
		printf("error\r\n");
 8000690:	4821      	ldr	r0, [pc, #132]	@ (8000718 <main+0xdc>)
 8000692:	f008 ff1d 	bl	80094d0 <puts>
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000696:	f004 fdc5 	bl	8005224 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of mutexCan */
	mutexCanHandle = osMutexNew(&mutexCan_attributes);
 800069a:	4820      	ldr	r0, [pc, #128]	@ (800071c <main+0xe0>)
 800069c:	f004 feb9 	bl	8005412 <osMutexNew>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a1a      	ldr	r2, [pc, #104]	@ (800070c <main+0xd0>)
 80006a4:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of semCan */
	semCanHandle = osSemaphoreNew(1, 0, &semCan_attributes);
 80006a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000720 <main+0xe4>)
 80006a8:	2100      	movs	r1, #0
 80006aa:	2001      	movs	r0, #1
 80006ac:	f004 ffbf 	bl	800562e <osSemaphoreNew>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a18      	ldr	r2, [pc, #96]	@ (8000714 <main+0xd8>)
 80006b4:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of queueCan */
	queueCanHandle = osMessageQueueNew(16, sizeof(FdcanMsg),
 80006b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <main+0xe8>)
 80006b8:	2154      	movs	r1, #84	@ 0x54
 80006ba:	2010      	movs	r0, #16
 80006bc:	f005 f8d6 	bl	800586c <osMessageQueueNew>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <main+0xd4>)
 80006c4:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of task0 */
	task0Handle = osThreadNew(startTask0, NULL, &task0_attributes);
 80006c6:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <main+0xec>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4818      	ldr	r0, [pc, #96]	@ (800072c <main+0xf0>)
 80006cc:	f004 fdf4 	bl	80052b8 <osThreadNew>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <main+0xf4>)
 80006d4:	6013      	str	r3, [r2, #0]

	/* creation of task1 */
	task1Handle = osThreadNew(startTask1, NULL, &task1_attributes);
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <main+0xf8>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4817      	ldr	r0, [pc, #92]	@ (8000738 <main+0xfc>)
 80006dc:	f004 fdec 	bl	80052b8 <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a16      	ldr	r2, [pc, #88]	@ (800073c <main+0x100>)
 80006e4:	6013      	str	r3, [r2, #0]

	/* creation of task2 */
	task2Handle = osThreadNew(startTask2, NULL, &task2_attributes);
 80006e6:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <main+0x104>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4816      	ldr	r0, [pc, #88]	@ (8000744 <main+0x108>)
 80006ec:	f004 fde4 	bl	80052b8 <osThreadNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <main+0x10c>)
 80006f4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80006f6:	f004 fdb9 	bl	800526c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80006fa:	bf00      	nop
 80006fc:	e7fd      	b.n	80006fa <main+0xbe>
 80006fe:	bf00      	nop
 8000700:	0800a0a8 	.word	0x0800a0a8
 8000704:	20000088 	.word	0x20000088
 8000708:	20000198 	.word	0x20000198
 800070c:	20000190 	.word	0x20000190
 8000710:	2000018c 	.word	0x2000018c
 8000714:	20000194 	.word	0x20000194
 8000718:	0800a0b4 	.word	0x0800a0b4
 800071c:	0800a164 	.word	0x0800a164
 8000720:	0800a174 	.word	0x0800a174
 8000724:	0800a14c 	.word	0x0800a14c
 8000728:	0800a0e0 	.word	0x0800a0e0
 800072c:	08000ac1 	.word	0x08000ac1
 8000730:	20000180 	.word	0x20000180
 8000734:	0800a104 	.word	0x0800a104
 8000738:	08000b41 	.word	0x08000b41
 800073c:	20000184 	.word	0x20000184
 8000740:	0800a128 	.word	0x0800a128
 8000744:	08000b71 	.word	0x08000b71
 8000748:	20000188 	.word	0x20000188

0800074c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	2238      	movs	r2, #56	@ 0x38
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f008 ff98 	bl	8009690 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800076e:	2000      	movs	r0, #0
 8000770:	f001 feac 	bl	80024cc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2340      	movs	r3, #64	@ 0x40
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800078a:	2304      	movs	r3, #4
 800078c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800078e:	2355      	movs	r3, #85	@ 0x55
 8000790:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 ff46 	bl	8002634 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_Z18SystemClock_Configv+0x70>
	{
		Error_Handler();
 80007b8:	f000 fa2c 	bl	8000c14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2303      	movs	r3, #3
 80007c2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2104      	movs	r1, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fa3f 	bl	8002c58 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <_Z18SystemClock_Configv+0xa2>
	{
		Error_Handler();
 80007ea:	f000 fa13 	bl	8000c14 <Error_Handler>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	@ 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <_ZL14MX_FDCAN1_Initv>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007fe:	4a23      	ldr	r2, [pc, #140]	@ (800088c <_ZL14MX_FDCAN1_Initv+0x94>)
 8000800:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000810:	2204      	movs	r2, #4
 8000812:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 283;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000828:	f240 121b 	movw	r2, #283	@ 0x11b
 800082c:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000830:	2201      	movs	r2, #1
 8000832:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 1;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000836:	2201      	movs	r2, #1
 8000838:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 1;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 800083c:	2201      	movs	r2, #1
 800083e:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000842:	2201      	movs	r2, #1
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000848:	2201      	movs	r2, #1
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 800084c:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 800084e:	2201      	movs	r2, #1
 8000850:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000854:	2201      	movs	r2, #1
 8000856:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.StdFiltersNbr = 0;
 8000858:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.ExtFiltersNbr = 0;
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800086a:	4807      	ldr	r0, [pc, #28]	@ (8000888 <_ZL14MX_FDCAN1_Initv+0x90>)
 800086c:	f000 fe50 	bl	8001510 <HAL_FDCAN_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_ZL14MX_FDCAN1_Initv+0x8c>
	{
		Error_Handler();
 8000880:	f000 f9c8 	bl	8000c14 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000088 	.word	0x20000088
 800088c:	40006400 	.word	0x40006400

08000890 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000894:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000896:	4a2d      	ldr	r2, [pc, #180]	@ (800094c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000898:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d8:	481b      	ldr	r0, [pc, #108]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008da:	f003 f9a5 	bl	8003c28 <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <_ZL19MX_USART2_UART_Initv+0x62>
	{
		Error_Handler();
 80008ee:	f000 f991 	bl	8000c14 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4814      	ldr	r0, [pc, #80]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008f6:	f004 fb86 	bl	8005006 <HAL_UARTEx_SetTxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
			!= HAL_OK)
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <_ZL19MX_USART2_UART_Initv+0x7e>
	{
		Error_Handler();
 800090a:	f000 f983 	bl	8000c14 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800090e:	2100      	movs	r1, #0
 8000910:	480d      	ldr	r0, [pc, #52]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000912:	f004 fbb6 	bl	8005082 <HAL_UARTEx_SetRxFifoThreshold>
 8000916:	4603      	mov	r3, r0
			!= HAL_OK)
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <_ZL19MX_USART2_UART_Initv+0x9a>
	{
		Error_Handler();
 8000926:	f000 f975 	bl	8000c14 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800092a:	4807      	ldr	r0, [pc, #28]	@ (8000948 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800092c:	f004 fb32 	bl	8004f94 <HAL_UARTEx_DisableFifoMode>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <_ZL19MX_USART2_UART_Initv+0xb4>
	{
		Error_Handler();
 8000940:	f000 f968 	bl	8000c14 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000ec 	.word	0x200000ec
 800094c:	40004400 	.word	0x40004400

08000950 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b2f      	ldr	r3, [pc, #188]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800097e:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a28      	ldr	r2, [pc, #160]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0320 	and.w	r3, r3, #32
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <_ZL12MX_GPIO_Initv+0xd4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2120      	movs	r1, #32
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ce:	f001 fd41 	bl	8002454 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	480f      	ldr	r0, [pc, #60]	@ (8000a28 <_ZL12MX_GPIO_Initv+0xd8>)
 80009ea:	f001 fbb1 	bl	8002150 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009ee:	2320      	movs	r3, #32
 80009f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f001 fba2 	bl	8002150 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2107      	movs	r1, #7
 8000a10:	2028      	movs	r0, #40	@ 0x28
 8000a12:	f000 fc95 	bl	8001340 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a16:	2028      	movs	r0, #40	@ 0x28
 8000a18:	f000 fcac 	bl	8001374 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	@ 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000800 	.word	0x48000800

08000a2c <HAL_FDCAN_TxBufferCompleteCallback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t BufferIndexes)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	if (can.updateInterruptTx(hfdcan) != FdcanController::State::Ok)
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	4808      	ldr	r0, [pc, #32]	@ (8000a5c <HAL_FDCAN_TxBufferCompleteCallback+0x30>)
 8000a3a:	f008 fb06 	bl	800904a <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bf14      	ite	ne
 8000a44:	2301      	movne	r3, #1
 8000a46:	2300      	moveq	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <HAL_FDCAN_TxBufferCompleteCallback+0x28>
	{
		printf("error\r\n");
 8000a4e:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <HAL_FDCAN_TxBufferCompleteCallback+0x34>)
 8000a50:	f008 fd3e 	bl	80094d0 <puts>
	}
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000198 	.word	0x20000198
 8000a60:	0800a0b4 	.word	0x0800a0b4

08000a64 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifoITs)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	if (can.updateInterruptRx(hfdcan, RxFifoITs) != FdcanController::State::Ok)
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000a74:	f008 fb0a 	bl	800908c <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <HAL_FDCAN_RxFifo0Callback+0x2a>
	{
		printf("error\r\n");
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000a8a:	f008 fd21 	bl	80094d0 <puts>
	}
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000198 	.word	0x20000198
 8000a9c:	0800a0b4 	.word	0x0800a0b4

08000aa0 <_Z11task_actionc>:

void task_action(char command)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(command);
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd7f 	bl	80005b0 <ITM_SendChar>
	ITM_SendChar('\n');
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f7ff fd7c 	bl	80005b0 <ITM_SendChar>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_Z10startTask0Pv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTask0 */
void startTask0(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0aa      	sub	sp, #168	@ 0xa8
 8000ac4:	af12      	add	r7, sp, #72	@ 0x48
 8000ac6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	FdcanMsg msg;
	msg.txHeader.Identifier = 0x006;
 8000ac8:	2306      	movs	r3, #6
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
	msg.txHeader.IdType = FDCAN_STANDARD_ID;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63bb      	str	r3, [r7, #56]	@ 0x38
	msg.txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	msg.txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	643b      	str	r3, [r7, #64]	@ 0x40
	msg.txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	647b      	str	r3, [r7, #68]	@ 0x44
	msg.txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000adc:	2300      	movs	r3, #0
 8000ade:	64bb      	str	r3, [r7, #72]	@ 0x48
	msg.txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	msg.txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	653b      	str	r3, [r7, #80]	@ 0x50
	msg.txHeader.MessageMarker = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	657b      	str	r3, [r7, #84]	@ 0x54

	msg.data[0] = 'h';
 8000aec:	2368      	movs	r3, #104	@ 0x68
 8000aee:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	msg.data[1] = 'e';
 8000af2:	2365      	movs	r3, #101	@ 0x65
 8000af4:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	msg.data[2] = 'y';
 8000af8:	2379      	movs	r3, #121	@ 0x79
 8000afa:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	msg.data[3] = 'a';
 8000afe:	2361      	movs	r3, #97	@ 0x61
 8000b00:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	msg.data[4] = '0';
 8000b04:	2330      	movs	r3, #48	@ 0x30
 8000b06:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	msg.data[5] = '\0';
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

	/* Infinite loop */
	for (;;)
	{
//		osDelay(1e3);
		osDelay(1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f004 fc63 	bl	80053dc <osDelay>
		task_action('1');
 8000b16:	2031      	movs	r0, #49	@ 0x31
 8000b18:	f7ff ffc2 	bl	8000aa0 <_Z11task_actionc>
		can.send(msg);
 8000b1c:	4668      	mov	r0, sp
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	2248      	movs	r2, #72	@ 0x48
 8000b24:	4619      	mov	r1, r3
 8000b26:	f008 fe3e 	bl	80097a6 <memcpy>
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <_Z10startTask0Pv+0x7c>)
 8000b32:	f008 fa06 	bl	8008f42 <_ZN15FdcanController4sendE8FdcanMsg>
		osDelay(1);
 8000b36:	bf00      	nop
 8000b38:	e7ea      	b.n	8000b10 <_Z10startTask0Pv+0x50>
 8000b3a:	bf00      	nop
 8000b3c:	20000198 	.word	0x20000198

08000b40 <_Z10startTask1Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTask1 */
void startTask1(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b098      	sub	sp, #96	@ 0x60
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTask1 */
	/* Infinite loop */
	for (;;)
	{
		FdcanMsg msg;
		can.receive(&msg);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <_Z10startTask1Pv+0x28>)
 8000b50:	f008 fa5e 	bl	8009010 <_ZN15FdcanController7receiveEP8FdcanMsg>
		printf("got: %s\r\n", reinterpret_cast<char*>(msg.data));
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	334c      	adds	r3, #76	@ 0x4c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <_Z10startTask1Pv+0x2c>)
 8000b5e:	f008 fc4f 	bl	8009400 <iprintf>
	}
 8000b62:	bf00      	nop
 8000b64:	e7f0      	b.n	8000b48 <_Z10startTask1Pv+0x8>
 8000b66:	bf00      	nop
 8000b68:	20000198 	.word	0x20000198
 8000b6c:	0800a0bc 	.word	0x0800a0bc

08000b70 <_Z10startTask2Pv>:
	/* USER CODE END startTask1 */
}

void startTask2(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0aa      	sub	sp, #168	@ 0xa8
 8000b74:	af12      	add	r7, sp, #72	@ 0x48
 8000b76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTask1 */
	FdcanMsg msg;
	msg.txHeader.Identifier = 0x006;
 8000b78:	2306      	movs	r3, #6
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
	msg.txHeader.IdType = FDCAN_STANDARD_ID;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
	msg.txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
	msg.txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000b84:	2308      	movs	r3, #8
 8000b86:	643b      	str	r3, [r7, #64]	@ 0x40
	msg.txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	647b      	str	r3, [r7, #68]	@ 0x44
	msg.txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
	msg.txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b90:	2300      	movs	r3, #0
 8000b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
	msg.txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b94:	2300      	movs	r3, #0
 8000b96:	653b      	str	r3, [r7, #80]	@ 0x50
	msg.txHeader.MessageMarker = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	657b      	str	r3, [r7, #84]	@ 0x54

	msg.data[0] = 'h';
 8000b9c:	2368      	movs	r3, #104	@ 0x68
 8000b9e:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	msg.data[1] = 'e';
 8000ba2:	2365      	movs	r3, #101	@ 0x65
 8000ba4:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	msg.data[2] = 'y';
 8000ba8:	2379      	movs	r3, #121	@ 0x79
 8000baa:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	msg.data[3] = 'a';
 8000bae:	2361      	movs	r3, #97	@ 0x61
 8000bb0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	msg.data[4] = '2';
 8000bb4:	2332      	movs	r3, #50	@ 0x32
 8000bb6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	msg.data[5] = '\0';
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f004 fc0b 	bl	80053dc <osDelay>
		task_action('2');
 8000bc6:	2032      	movs	r0, #50	@ 0x32
 8000bc8:	f7ff ff6a 	bl	8000aa0 <_Z11task_actionc>
		can.send(msg);
 8000bcc:	4668      	mov	r0, sp
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	2248      	movs	r2, #72	@ 0x48
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f008 fde6 	bl	80097a6 <memcpy>
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <_Z10startTask2Pv+0x7c>)
 8000be2:	f008 f9ae 	bl	8008f42 <_ZN15FdcanController4sendE8FdcanMsg>
		osDelay(1);
 8000be6:	bf00      	nop
 8000be8:	e7ea      	b.n	8000bc0 <_Z10startTask2Pv+0x50>
 8000bea:	bf00      	nop
 8000bec:	20000198 	.word	0x20000198

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000c02:	f000 fac7 	bl	8001194 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40001000 	.word	0x40001000

08000c14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <_Z41__static_initialization_and_destruction_0ii>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d107      	bne.n	8000c40 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d102      	bne.n	8000c40 <_Z41__static_initialization_and_destruction_0ii+0x20>
FdcanController can;
 8000c3a:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c3c:	f008 f8cc 	bl	8008dd8 <_ZN15FdcanControllerC1Ev>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d107      	bne.n	8000c56 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d102      	bne.n	8000c56 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c52:	f008 f8dd 	bl	8008e10 <_ZN15FdcanControllerD1Ev>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000198 	.word	0x20000198

08000c64 <_GLOBAL__sub_I_hfdcan1>:
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff ffd7 	bl	8000c20 <_Z41__static_initialization_and_destruction_0ii>
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_GLOBAL__sub_D_hfdcan1>:
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff ffcf 	bl	8000c20 <_Z41__static_initialization_and_destruction_0ii>
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c8e:	4a11      	ldr	r2, [pc, #68]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x50>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	210f      	movs	r1, #15
 8000cbe:	f06f 0001 	mvn.w	r0, #1
 8000cc2:	f000 fb3d 	bl	8001340 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cc6:	f001 fca5 	bl	8002614 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b09e      	sub	sp, #120	@ 0x78
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2254      	movs	r2, #84	@ 0x54
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f008 fcc9 	bl	8009690 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a28      	ldr	r2, [pc, #160]	@ (8000da4 <HAL_FDCAN_MspInit+0xcc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d149      	bne.n	8000d9c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d12:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 f9eb 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d24:	f7ff ff76 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d28:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <HAL_FDCAN_MspInit+0xd0>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000da8 <HAL_FDCAN_MspInit+0xd0>)
 8000d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d34:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <HAL_FDCAN_MspInit+0xd0>)
 8000d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_FDCAN_MspInit+0xd0>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <HAL_FDCAN_MspInit+0xd0>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4c:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_FDCAN_MspInit+0xd0>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d58:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d5c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d6a:	2309      	movs	r3, #9
 8000d6c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d78:	f001 f9ea 	bl	8002150 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2015      	movs	r0, #21
 8000d82:	f000 fadd 	bl	8001340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d86:	2015      	movs	r0, #21
 8000d88:	f000 faf4 	bl	8001374 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2106      	movs	r1, #6
 8000d90:	2016      	movs	r0, #22
 8000d92:	f000 fad5 	bl	8001340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000d96:	2016      	movs	r0, #22
 8000d98:	f000 faec 	bl	8001374 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3778      	adds	r7, #120	@ 0x78
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40006400 	.word	0x40006400
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b09e      	sub	sp, #120	@ 0x78
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	2254      	movs	r2, #84	@ 0x54
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f008 fc5f 	bl	8009690 <memset>
  if(huart->Instance==USART2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a23      	ldr	r2, [pc, #140]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d13e      	bne.n	8000e5a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 f983 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df4:	f7ff ff0e 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <HAL_UART_MspInit+0xbc>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e68 <HAL_UART_MspInit+0xbc>)
 8000dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <HAL_UART_MspInit+0xbc>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_UART_MspInit+0xbc>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <HAL_UART_MspInit+0xbc>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_UART_MspInit+0xbc>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e46:	f001 f983 	bl	8002150 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2107      	movs	r1, #7
 8000e4e:	2026      	movs	r0, #38	@ 0x26
 8000e50:	f000 fa76 	bl	8001340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e54:	2026      	movs	r0, #38	@ 0x26
 8000e56:	f000 fa8d 	bl	8001374 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3778      	adds	r7, #120	@ 0x78
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40004400 	.word	0x40004400
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f30 <HAL_InitTick+0xc4>)
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e80:	4a2b      	ldr	r2, [pc, #172]	@ (8000f30 <HAL_InitTick+0xc4>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e88:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <HAL_InitTick+0xc4>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e94:	f107 020c 	add.w	r2, r7, #12
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 f8b0 	bl	8003004 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ea4:	f002 f882 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8000ea8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eac:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <HAL_InitTick+0xc8>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <HAL_InitTick+0xcc>)
 8000eba:	4a20      	ldr	r2, [pc, #128]	@ (8000f3c <HAL_InitTick+0xd0>)
 8000ebc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <HAL_InitTick+0xcc>)
 8000ec0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <HAL_InitTick+0xcc>)
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <HAL_InitTick+0xcc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_InitTick+0xcc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ed8:	4817      	ldr	r0, [pc, #92]	@ (8000f38 <HAL_InitTick+0xcc>)
 8000eda:	f002 fb59 	bl	8003590 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d11b      	bne.n	8000f24 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000eec:	4812      	ldr	r0, [pc, #72]	@ (8000f38 <HAL_InitTick+0xcc>)
 8000eee:	f002 fbb1 	bl	8003654 <HAL_TIM_Base_Start_IT>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d111      	bne.n	8000f24 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f00:	2036      	movs	r0, #54	@ 0x36
 8000f02:	f000 fa37 	bl	8001374 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d808      	bhi.n	8000f1e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	2036      	movs	r0, #54	@ 0x36
 8000f12:	f000 fa15 	bl	8001340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <HAL_InitTick+0xd4>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e002      	b.n	8000f24 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3730      	adds	r7, #48	@ 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	200001ac 	.word	0x200001ac
 8000f3c:	40001000 	.word	0x40001000
 8000f40:	20000004 	.word	0x20000004

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <FDCAN1_IT0_IRQHandler+0x10>)
 8000f82:	f000 fe79 	bl	8001c78 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000088 	.word	0x20000088

08000f90 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <FDCAN1_IT1_IRQHandler+0x10>)
 8000f96:	f000 fe6f 	bl	8001c78 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000088 	.word	0x20000088

08000fa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <USART2_IRQHandler+0x10>)
 8000faa:	f002 ff1b 	bl	8003de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000ec 	.word	0x200000ec

08000fb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fc0:	f001 fa60 	bl	8002484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <TIM6_DAC_IRQHandler+0x10>)
 8000fce:	f002 fbb9 	bl	8003744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001ac 	.word	0x200001ac

08000fdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e00a      	b.n	8001004 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fee:	f3af 8000 	nop.w
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60ba      	str	r2, [r7, #8]
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf0      	blt.n	8000fee <_read+0x12>
  }

  return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103e:	605a      	str	r2, [r3, #4]
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_isatty>:

int _isatty(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f008 fb4c 	bl	800974c <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	200001f8 	.word	0x200001f8
 80010e8:	200037e0 	.word	0x200037e0

080010ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001114:	f7ff ffea 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	@ (800115c <LoopForever+0x16>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f008 fb0b 	bl	8009758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001142:	f7ff fa7b 	bl	800063c <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   r0, =_estack
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001154:	0800a230 	.word	0x0800a230
  ldr r2, =_sbss
 8001158:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800115c:	200037dc 	.word	0x200037dc

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>

08001162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f8dc 	bl	800132a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001172:	200f      	movs	r0, #15
 8001174:	f7ff fe7a 	bl	8000e6c <HAL_InitTick>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	e001      	b.n	8001188 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001184:	f7ff fd7e 	bl	8000c84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001188:	79fb      	ldrb	r3, [r7, #7]

}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_IncTick+0x1c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_IncTick+0x20>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a03      	ldr	r2, [pc, #12]	@ (80011b0 <HAL_IncTick+0x1c>)
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	200001fc 	.word	0x200001fc
 80011b4:	20000008 	.word	0x20000008

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200001fc 	.word	0x200001fc

080011d0 <__NVIC_SetPriorityGrouping>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	@ (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	@ (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	@ (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	@ 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	@ 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff4c 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800134e:	f7ff ff63 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001352:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff ffb3 	bl	80012c4 <NVIC_EncodePriority>
 800135e:	4602      	mov	r2, r0
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff82 	bl	8001270 <__NVIC_SetPriority>
}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff56 	bl	8001234 <__NVIC_EnableIRQ>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d005      	beq.n	80013b4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2204      	movs	r2, #4
 80013ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e037      	b.n	8001424 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 020e 	bic.w	r2, r2, #14
 80013c2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001400:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001418:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001422:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d00d      	beq.n	8001476 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2204      	movs	r2, #4
 800145e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e047      	b.n	8001506 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 020e 	bic.w	r2, r2, #14
 8001484:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	f003 021f 	and.w	r2, r3, #31
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00c      	beq.n	80014e6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4798      	blx	r3
    }
  }
  return status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e147      	b.n	80017b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fbce 	bl	8000cd8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0210 	bic.w	r2, r2, #16
 800154a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800154c:	f7ff fe34 	bl	80011b8 <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001552:	e012      	b.n	800157a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001554:	f7ff fe30 	bl	80011b8 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b0a      	cmp	r3, #10
 8001560:	d90b      	bls.n	800157a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001566:	f043 0201 	orr.w	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2203      	movs	r2, #3
 8001572:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e11b      	b.n	80017b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b08      	cmp	r3, #8
 8001586:	d0e5      	beq.n	8001554 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001598:	f7ff fe0e 	bl	80011b8 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800159e:	e012      	b.n	80015c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015a0:	f7ff fe0a 	bl	80011b8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d90b      	bls.n	80015c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0f5      	b.n	80017b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0e5      	beq.n	80015a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0202 	orr.w	r2, r2, #2
 80015e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a74      	ldr	r2, [pc, #464]	@ (80017bc <HAL_FDCAN_Init+0x2ac>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d103      	bne.n	80015f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80015ee:	4a74      	ldr	r2, [pc, #464]	@ (80017c0 <HAL_FDCAN_Init+0x2b0>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7c1b      	ldrb	r3, [r3, #16]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d108      	bne.n	8001610 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699a      	ldr	r2, [r3, #24]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	e007      	b.n	8001620 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800161e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7c5b      	ldrb	r3, [r3, #17]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699a      	ldr	r2, [r3, #24]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001636:	619a      	str	r2, [r3, #24]
 8001638:	e007      	b.n	800164a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001648:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7c9b      	ldrb	r3, [r3, #18]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001660:	619a      	str	r2, [r3, #24]
 8001662:	e007      	b.n	8001674 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001672:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001698:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0210 	bic.w	r2, r2, #16
 80016a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0204 	orr.w	r2, r2, #4
 80016c0:	619a      	str	r2, [r3, #24]
 80016c2:	e02c      	b.n	800171e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d028      	beq.n	800171e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d01c      	beq.n	800170e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0210 	orr.w	r2, r2, #16
 80016f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d110      	bne.n	800171e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699a      	ldr	r2, [r3, #24]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0220 	orr.w	r2, r2, #32
 800170a:	619a      	str	r2, [r3, #24]
 800170c:	e007      	b.n	800171e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699a      	ldr	r2, [r3, #24]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0220 	orr.w	r2, r2, #32
 800171c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	3b01      	subs	r3, #1
 8001724:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	3b01      	subs	r3, #1
 800172c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800172e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001736:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	3b01      	subs	r3, #1
 8001740:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001746:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001748:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001752:	d115      	bne.n	8001780 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	3b01      	subs	r3, #1
 8001760:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001762:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001768:	3b01      	subs	r3, #1
 800176a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800176c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	3b01      	subs	r3, #1
 8001776:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800177c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800177e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fbf2 	bl	8001f80 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40006400 	.word	0x40006400
 80017c0:	40006500 	.word	0x40006500

080017c4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d110      	bne.n	80017fa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e006      	b.n	8001808 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fe:	f043 0204 	orr.w	r2, r3, #4
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
  }
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d12c      	bne.n	8001886 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001840:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e023      	b.n	8001894 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fbf8 	bl	8002058 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001878:	2201      	movs	r2, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	409a      	lsls	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e006      	b.n	8001894 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	f043 0208 	orr.w	r2, r3, #8
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800189c:	b480      	push	{r7}
 800189e:	b08b      	sub	sp, #44	@ 0x2c
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018b4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80018b6:	7efb      	ldrb	r3, [r7, #27]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 80e8 	bne.w	8001a8e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b40      	cmp	r3, #64	@ 0x40
 80018c2:	d137      	bne.n	8001934 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0db      	b.n	8001a9c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ec:	0e1b      	lsrs	r3, r3, #24
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10a      	bne.n	800190c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018fe:	0a5b      	lsrs	r3, r3, #9
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001908:	2301      	movs	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
 8001932:	e036      	b.n	80019a2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001948:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0a3      	b.n	8001a9c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800195c:	0e1b      	lsrs	r3, r3, #24
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d10a      	bne.n	800197c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001978:	2301      	movs	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d107      	bne.n	80019c6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0c9b      	lsrs	r3, r3, #18
 80019bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e005      	b.n	80019d2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	3304      	adds	r3, #4
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	f003 020f 	and.w	r2, r3, #15
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0e1b      	lsrs	r3, r3, #24
 8001a26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0fda      	lsrs	r2, r3, #31
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	e00a      	b.n	8001a5e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	441a      	add	r2, r3
 8001a4e:	6839      	ldr	r1, [r7, #0]
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	440b      	add	r3, r1
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001a64:	5cd3      	ldrb	r3, [r2, r3]
 8001a66:	461a      	mov	r2, r3
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d3ec      	bcc.n	8001a48 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b40      	cmp	r3, #64	@ 0x40
 8001a72:	d105      	bne.n	8001a80 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001a7e:	e004      	b.n	8001a8a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e006      	b.n	8001a9c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	f043 0208 	orr.w	r2, r3, #8
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	372c      	adds	r7, #44	@ 0x2c
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	0800a19c 	.word	0x0800a19c

08001aac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001abe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d003      	beq.n	8001ace <HAL_FDCAN_ActivateNotification+0x22>
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	f040 80c8 	bne.w	8001c5e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03b      	beq.n	8001b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d031      	beq.n	8001b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d027      	beq.n	8001b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01d      	beq.n	8001b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d013      	beq.n	8001b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d13b      	bne.n	8001bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d131      	bne.n	8001bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d127      	bne.n	8001bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11d      	bne.n	8001bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d113      	bne.n	8001bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00c      	beq.n	8001c0e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0202 	orr.w	r2, r2, #2
 8001c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e006      	b.n	8001c6c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c62:	f043 0202 	orr.w	r2, r3, #2
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
  }
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	@ 0x30
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c86:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c94:	4013      	ands	r3, r2
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cac:	4013      	ands	r3, r2
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cce:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001cd2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cda:	6a3a      	ldr	r2, [r7, #32]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ce6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001cea:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfe:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d06:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2240      	movs	r2, #64	@ 0x40
 8001d22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f90b 	bl	8001f40 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d019      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d014      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d46:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d60:	6939      	ldr	r1, [r7, #16]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8cd 	bl	8001f02 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d74:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8a2 	bl	8001ec2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fe68 	bl	8000a64 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001da2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f897 	bl	8001ed8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00c      	beq.n	8001dce <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f890 	bl	8001eee <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d018      	beq.n	8001e0a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d013      	beq.n	8001e0a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001dea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2280      	movs	r2, #128	@ 0x80
 8001e00:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7fe fe11 	bl	8000a2c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e26:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f875 	bl	8001f18 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00c      	beq.n	8001e52 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e4a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f86d 	bl	8001f2c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00f      	beq.n	8001e7c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e8a:	69f9      	ldr	r1, [r7, #28]
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f86b 	bl	8001f68 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d009      	beq.n	8001eac <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a3a      	ldr	r2, [r7, #32]
 8001e9e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f84d 	bl	8001f54 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3730      	adds	r7, #48	@ 0x30
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001f8a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d103      	bne.n	8001f9e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001f9c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8002054 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d103      	bne.n	8001fb0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001fae:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fbe:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fe4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fec:	061a      	lsls	r2, r3, #24
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e005      	b.n	8002032 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3f3      	bcc.n	8002026 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	4000a400 	.word	0x4000a400
 8002050:	40006800 	.word	0x40006800
 8002054:	40006c00 	.word	0x40006c00

08002058 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	@ 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10a      	bne.n	8002084 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002076:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800207e:	4313      	orrs	r3, r2
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e00a      	b.n	800209a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800208c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002092:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002098:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020a4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80020aa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80020b0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	3304      	adds	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	3304      	adds	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e020      	b.n	800212e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3303      	adds	r3, #3
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3302      	adds	r3, #2
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	440b      	add	r3, r1
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002104:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	440b      	add	r3, r1
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002112:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	440a      	add	r2, r1
 800211a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800211c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	3304      	adds	r3, #4
 8002126:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3304      	adds	r3, #4
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a06      	ldr	r2, [pc, #24]	@ (800214c <FDCAN_CopyMessageToRAM+0xf4>)
 8002134:	5cd3      	ldrb	r3, [r2, r3]
 8002136:	461a      	mov	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4293      	cmp	r3, r2
 800213c:	d3d6      	bcc.n	80020ec <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3724      	adds	r7, #36	@ 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	0800a19c 	.word	0x0800a19c

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800215e:	e15a      	b.n	8002416 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 814c 	beq.w	8002410 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d005      	beq.n	8002190 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800218c:	2b02      	cmp	r3, #2
 800218e:	d130      	bne.n	80021f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021c6:	2201      	movs	r2, #1
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 0201 	and.w	r2, r3, #1
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d017      	beq.n	800222e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d123      	bne.n	8002282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	6939      	ldr	r1, [r7, #16]
 800227e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0203 	and.w	r2, r3, #3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80a6 	beq.w	8002410 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80022c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80022d0:	4b58      	ldr	r3, [pc, #352]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022dc:	4a56      	ldr	r2, [pc, #344]	@ (8002438 <HAL_GPIO_Init+0x2e8>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002306:	d01f      	beq.n	8002348 <HAL_GPIO_Init+0x1f8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a4c      	ldr	r2, [pc, #304]	@ (800243c <HAL_GPIO_Init+0x2ec>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d019      	beq.n	8002344 <HAL_GPIO_Init+0x1f4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a4b      	ldr	r2, [pc, #300]	@ (8002440 <HAL_GPIO_Init+0x2f0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d013      	beq.n	8002340 <HAL_GPIO_Init+0x1f0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4a      	ldr	r2, [pc, #296]	@ (8002444 <HAL_GPIO_Init+0x2f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00d      	beq.n	800233c <HAL_GPIO_Init+0x1ec>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a49      	ldr	r2, [pc, #292]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d007      	beq.n	8002338 <HAL_GPIO_Init+0x1e8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a48      	ldr	r2, [pc, #288]	@ (800244c <HAL_GPIO_Init+0x2fc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_GPIO_Init+0x1e4>
 8002330:	2305      	movs	r3, #5
 8002332:	e00a      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002334:	2306      	movs	r3, #6
 8002336:	e008      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002338:	2304      	movs	r3, #4
 800233a:	e006      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 800233c:	2303      	movs	r3, #3
 800233e:	e004      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002340:	2302      	movs	r3, #2
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002348:	2300      	movs	r3, #0
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	f002 0203 	and.w	r2, r2, #3
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	4093      	lsls	r3, r2
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800235a:	4937      	ldr	r1, [pc, #220]	@ (8002438 <HAL_GPIO_Init+0x2e8>)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002368:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <HAL_GPIO_Init+0x300>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800238c:	4a30      	ldr	r2, [pc, #192]	@ (8002450 <HAL_GPIO_Init+0x300>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002392:	4b2f      	ldr	r3, [pc, #188]	@ (8002450 <HAL_GPIO_Init+0x300>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023b6:	4a26      	ldr	r2, [pc, #152]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800240a:	4a11      	ldr	r2, [pc, #68]	@ (8002450 <HAL_GPIO_Init+0x300>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	f47f ae9d 	bne.w	8002160 <HAL_GPIO_Init+0x10>
  }
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40021000 	.word	0x40021000
 8002438:	40010000 	.word	0x40010000
 800243c:	48000400 	.word	0x48000400
 8002440:	48000800 	.word	0x48000800
 8002444:	48000c00 	.word	0x48000c00
 8002448:	48001000 	.word	0x48001000
 800244c:	48001400 	.word	0x48001400
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002470:	e002      	b.n	8002478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800249a:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f806 	bl	80024b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d141      	bne.n	800255e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024da:	4b4b      	ldr	r3, [pc, #300]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e6:	d131      	bne.n	800254c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024e8:	4b47      	ldr	r3, [pc, #284]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ee:	4a46      	ldr	r2, [pc, #280]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f8:	4b43      	ldr	r3, [pc, #268]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002500:	4a41      	ldr	r2, [pc, #260]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002506:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002508:	4b40      	ldr	r3, [pc, #256]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2232      	movs	r2, #50	@ 0x32
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	4a3f      	ldr	r2, [pc, #252]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	3301      	adds	r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251e:	e002      	b.n	8002526 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3b01      	subs	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002526:	4b38      	ldr	r3, [pc, #224]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002532:	d102      	bne.n	800253a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f2      	bne.n	8002520 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800253a:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002546:	d158      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e057      	b.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800254c:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002552:	4a2d      	ldr	r2, [pc, #180]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800255c:	e04d      	b.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002564:	d141      	bne.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002566:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800256e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002572:	d131      	bne.n	80025d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002574:	4b24      	ldr	r3, [pc, #144]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800257a:	4a23      	ldr	r2, [pc, #140]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002580:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002584:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800258c:	4a1e      	ldr	r2, [pc, #120]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002592:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2232      	movs	r2, #50	@ 0x32
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	3301      	adds	r3, #1
 80025a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025aa:	e002      	b.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025be:	d102      	bne.n	80025c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f2      	bne.n	80025ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d2:	d112      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e011      	b.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025e8:	e007      	b.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40007000 	.word	0x40007000
 800260c:	20000000 	.word	0x20000000
 8002610:	431bde83 	.word	0x431bde83

08002614 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800261e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002622:	6093      	str	r3, [r2, #8]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40007000 	.word	0x40007000

08002634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e2fe      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d075      	beq.n	800273e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002652:	4b97      	ldr	r3, [pc, #604]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265c:	4b94      	ldr	r3, [pc, #592]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d102      	bne.n	8002672 <HAL_RCC_OscConfig+0x3e>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d002      	beq.n	8002678 <HAL_RCC_OscConfig+0x44>
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d10b      	bne.n	8002690 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	4b8d      	ldr	r3, [pc, #564]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05b      	beq.n	800273c <HAL_RCC_OscConfig+0x108>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d157      	bne.n	800273c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e2d9      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002698:	d106      	bne.n	80026a8 <HAL_RCC_OscConfig+0x74>
 800269a:	4b85      	ldr	r3, [pc, #532]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a84      	ldr	r2, [pc, #528]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e01d      	b.n	80026e4 <HAL_RCC_OscConfig+0xb0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x98>
 80026b2:	4b7f      	ldr	r3, [pc, #508]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7e      	ldr	r2, [pc, #504]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b7c      	ldr	r3, [pc, #496]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7b      	ldr	r2, [pc, #492]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0xb0>
 80026cc:	4b78      	ldr	r3, [pc, #480]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a77      	ldr	r2, [pc, #476]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b75      	ldr	r3, [pc, #468]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a74      	ldr	r2, [pc, #464]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe fd64 	bl	80011b8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fd60 	bl	80011b8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e29e      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002706:	4b6a      	ldr	r3, [pc, #424]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0xc0>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fd50 	bl	80011b8 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe fd4c 	bl	80011b8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	@ 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e28a      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272e:	4b60      	ldr	r3, [pc, #384]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0xe8>
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d075      	beq.n	8002836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274a:	4b59      	ldr	r3, [pc, #356]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002754:	4b56      	ldr	r3, [pc, #344]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b0c      	cmp	r3, #12
 8002762:	d102      	bne.n	800276a <HAL_RCC_OscConfig+0x136>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d002      	beq.n	8002770 <HAL_RCC_OscConfig+0x13c>
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d11f      	bne.n	80027b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002770:	4b4f      	ldr	r3, [pc, #316]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_OscConfig+0x154>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e25d      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b49      	ldr	r3, [pc, #292]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	4946      	ldr	r1, [pc, #280]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800279c:	4b45      	ldr	r3, [pc, #276]	@ (80028b4 <HAL_RCC_OscConfig+0x280>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fb63 	bl	8000e6c <HAL_InitTick>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d043      	beq.n	8002834 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e249      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3c      	ldr	r2, [pc, #240]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fcf8 	bl	80011b8 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe fcf4 	bl	80011b8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e232      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027de:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	492d      	ldr	r1, [pc, #180]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
 80027fe:	e01a      	b.n	8002836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002800:	4b2b      	ldr	r3, [pc, #172]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002806:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800280a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fcd4 	bl	80011b8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002814:	f7fe fcd0 	bl	80011b8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e20e      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002826:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x1e0>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d041      	beq.n	80028c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01c      	beq.n	8002884 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284a:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800284c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002850:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fcad 	bl	80011b8 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002862:	f7fe fca9 	bl	80011b8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1e7      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002874:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ef      	beq.n	8002862 <HAL_RCC_OscConfig+0x22e>
 8002882:	e020      	b.n	80028c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002884:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800288a:	4a09      	ldr	r2, [pc, #36]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fc90 	bl	80011b8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800289a:	e00d      	b.n	80028b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fc8c 	bl	80011b8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d906      	bls.n	80028b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1ca      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b8:	4b8c      	ldr	r3, [pc, #560]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1ea      	bne.n	800289c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80a6 	beq.w	8002a20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028d8:	4b84      	ldr	r3, [pc, #528]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2b4>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x2b6>
 80028e8:	2300      	movs	r3, #0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	4a7e      	ldr	r2, [pc, #504]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fa:	4b7c      	ldr	r3, [pc, #496]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290a:	4b79      	ldr	r3, [pc, #484]	@ (8002af0 <HAL_RCC_OscConfig+0x4bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002916:	4b76      	ldr	r3, [pc, #472]	@ (8002af0 <HAL_RCC_OscConfig+0x4bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	@ (8002af0 <HAL_RCC_OscConfig+0x4bc>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe fc49 	bl	80011b8 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe fc45 	bl	80011b8 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e183      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293c:	4b6c      	ldr	r3, [pc, #432]	@ (8002af0 <HAL_RCC_OscConfig+0x4bc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d108      	bne.n	8002962 <HAL_RCC_OscConfig+0x32e>
 8002950:	4b66      	ldr	r3, [pc, #408]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	4a65      	ldr	r2, [pc, #404]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002960:	e024      	b.n	80029ac <HAL_RCC_OscConfig+0x378>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d110      	bne.n	800298c <HAL_RCC_OscConfig+0x358>
 800296a:	4b60      	ldr	r3, [pc, #384]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002970:	4a5e      	ldr	r2, [pc, #376]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800297a:	4b5c      	ldr	r3, [pc, #368]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002980:	4a5a      	ldr	r2, [pc, #360]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800298a:	e00f      	b.n	80029ac <HAL_RCC_OscConfig+0x378>
 800298c:	4b57      	ldr	r3, [pc, #348]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002992:	4a56      	ldr	r2, [pc, #344]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a2:	4a52      	ldr	r2, [pc, #328]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d016      	beq.n	80029e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fc00 	bl	80011b8 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fbfc 	bl	80011b8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e138      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d2:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ed      	beq.n	80029bc <HAL_RCC_OscConfig+0x388>
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe fbe9 	bl	80011b8 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fbe5 	bl	80011b8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e121      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a00:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ed      	bne.n	80029ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a18:	4a34      	ldr	r2, [pc, #208]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d03c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01c      	beq.n	8002a6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fbb8 	bl	80011b8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a4c:	f7fe fbb4 	bl	80011b8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0f2      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a5e:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ef      	beq.n	8002a4c <HAL_RCC_OscConfig+0x418>
 8002a6c:	e01b      	b.n	8002aa6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a74:	4a1d      	ldr	r2, [pc, #116]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fb9b 	bl	80011b8 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a86:	f7fe fb97 	bl	80011b8 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0d5      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a98:	4b14      	ldr	r3, [pc, #80]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ef      	bne.n	8002a86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80c9 	beq.w	8002c42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	f000 8083 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d15e      	bne.n	8002b84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a08      	ldr	r2, [pc, #32]	@ (8002aec <HAL_RCC_OscConfig+0x4b8>)
 8002acc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fb71 	bl	80011b8 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad8:	e00c      	b.n	8002af4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fb6d 	bl	80011b8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d905      	bls.n	8002af4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0ab      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af4:	4b55      	ldr	r3, [pc, #340]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ec      	bne.n	8002ada <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b00:	4b52      	ldr	r3, [pc, #328]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	4b52      	ldr	r3, [pc, #328]	@ (8002c50 <HAL_RCC_OscConfig+0x61c>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6a11      	ldr	r1, [r2, #32]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	4311      	orrs	r1, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b1a:	0212      	lsls	r2, r2, #8
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b22:	0852      	lsrs	r2, r2, #1
 8002b24:	3a01      	subs	r2, #1
 8002b26:	0552      	lsls	r2, r2, #21
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b2e:	0852      	lsrs	r2, r2, #1
 8002b30:	3a01      	subs	r2, #1
 8002b32:	0652      	lsls	r2, r2, #25
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b3a:	06d2      	lsls	r2, r2, #27
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	4943      	ldr	r1, [pc, #268]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a40      	ldr	r2, [pc, #256]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b50:	4b3e      	ldr	r3, [pc, #248]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a3d      	ldr	r2, [pc, #244]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fb2c 	bl	80011b8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fb28 	bl	80011b8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e066      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	4b35      	ldr	r3, [pc, #212]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x530>
 8002b82:	e05e      	b.n	8002c42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b84:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a30      	ldr	r2, [pc, #192]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fb12 	bl	80011b8 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe fb0e 	bl	80011b8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e04c      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002baa:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bb6:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	4924      	ldr	r1, [pc, #144]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002bbc:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <HAL_RCC_OscConfig+0x620>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60cb      	str	r3, [r1, #12]
 8002bc2:	e03e      	b.n	8002c42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e039      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d12c      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d123      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d11b      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d113      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	019f800c 	.word	0x019f800c
 8002c54:	feeefffc 	.word	0xfeeefffc

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e11e      	b.n	8002eae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b91      	ldr	r3, [pc, #580]	@ (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d910      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b8e      	ldr	r3, [pc, #568]	@ (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 020f 	bic.w	r2, r3, #15
 8002c86:	498c      	ldr	r1, [pc, #560]	@ (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b8a      	ldr	r3, [pc, #552]	@ (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e106      	b.n	8002eae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d073      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d129      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb4:	4b81      	ldr	r3, [pc, #516]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0f4      	b.n	8002eae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002cc4:	f000 f9d0 	bl	8003068 <RCC_GetSysClockFreqFromPLLSource>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4a7c      	ldr	r2, [pc, #496]	@ (8002ec0 <HAL_RCC_ClockConfig+0x268>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d93f      	bls.n	8002d52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d033      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d12f      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cf2:	4b72      	ldr	r3, [pc, #456]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cfa:	4a70      	ldr	r2, [pc, #448]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e024      	b.n	8002d52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d10:	4b6a      	ldr	r3, [pc, #424]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0c6      	b.n	8002eae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d20:	4b66      	ldr	r3, [pc, #408]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0be      	b.n	8002eae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d30:	f000 f8ce 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4a61      	ldr	r2, [pc, #388]	@ (8002ec0 <HAL_RCC_ClockConfig+0x268>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d909      	bls.n	8002d52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d46:	4a5d      	ldr	r2, [pc, #372]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b5a      	ldr	r3, [pc, #360]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4957      	ldr	r1, [pc, #348]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d64:	f7fe fa28 	bl	80011b8 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fe fa24 	bl	80011b8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e095      	b.n	8002eae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b4e      	ldr	r3, [pc, #312]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b43      	ldr	r3, [pc, #268]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a42      	ldr	r2, [pc, #264]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002db2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002db6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4936      	ldr	r1, [pc, #216]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b80      	cmp	r3, #128	@ 0x80
 8002dec:	d105      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dee:	4b33      	ldr	r3, [pc, #204]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	4a32      	ldr	r2, [pc, #200]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002df4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002df8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d21d      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e08:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 020f 	bic.w	r2, r3, #15
 8002e10:	4929      	ldr	r1, [pc, #164]	@ (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e18:	f7fe f9ce 	bl	80011b8 <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7fe f9ca 	bl	80011b8 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e03b      	b.n	8002eae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b20      	ldr	r3, [pc, #128]	@ (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1ed      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b1a      	ldr	r3, [pc, #104]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4917      	ldr	r1, [pc, #92]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6e:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490f      	ldr	r1, [pc, #60]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e82:	f000 f825 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	490c      	ldr	r1, [pc, #48]	@ (8002ec4 <HAL_RCC_ClockConfig+0x26c>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <HAL_RCC_ClockConfig+0x270>)
 8002ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <HAL_RCC_ClockConfig+0x274>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd ffe0 	bl	8000e6c <HAL_InitTick>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40022000 	.word	0x40022000
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	04c4b400 	.word	0x04c4b400
 8002ec4:	0800a184 	.word	0x0800a184
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	e047      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ee8:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d102      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ef4:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	e03e      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002efa:	4b23      	ldr	r3, [pc, #140]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b0c      	cmp	r3, #12
 8002f04:	d136      	bne.n	8002f74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f06:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f10:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f24:	4a1a      	ldr	r2, [pc, #104]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	4a16      	ldr	r2, [pc, #88]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f2e:	68d2      	ldr	r2, [r2, #12]
 8002f30:	0a12      	lsrs	r2, r2, #8
 8002f32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	617b      	str	r3, [r7, #20]
      break;
 8002f3c:	e00c      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f3e:	4a13      	ldr	r2, [pc, #76]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	4a10      	ldr	r2, [pc, #64]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f48:	68d2      	ldr	r2, [r2, #12]
 8002f4a:	0a12      	lsrs	r2, r2, #8
 8002f4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f50:	fb02 f303 	mul.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
      break;
 8002f56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0e5b      	lsrs	r3, r3, #25
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	3301      	adds	r3, #1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	e001      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f78:	693b      	ldr	r3, [r7, #16]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	016e3600 	.word	0x016e3600

08002f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fb0:	f7ff fff0 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4904      	ldr	r1, [pc, #16]	@ (8002fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	0800a194 	.word	0x0800a194

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fdc:	f7ff ffda 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0adb      	lsrs	r3, r3, #11
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4904      	ldr	r1, [pc, #16]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	0800a194 	.word	0x0800a194

08003004 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	220f      	movs	r2, #15
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003046:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <HAL_RCC_GetClockConfig+0x60>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	40022000 	.word	0x40022000

08003068 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800306e:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3301      	adds	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d10c      	bne.n	80030a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800308c:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	4a14      	ldr	r2, [pc, #80]	@ (80030e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003096:	68d2      	ldr	r2, [r2, #12]
 8003098:	0a12      	lsrs	r2, r2, #8
 800309a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	617b      	str	r3, [r7, #20]
    break;
 80030a4:	e00c      	b.n	80030c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030a6:	4a12      	ldr	r2, [pc, #72]	@ (80030f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	4a0e      	ldr	r2, [pc, #56]	@ (80030e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	0a12      	lsrs	r2, r2, #8
 80030b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
    break;
 80030be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0e5b      	lsrs	r3, r3, #25
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030da:	687b      	ldr	r3, [r7, #4]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40021000 	.word	0x40021000
 80030ec:	016e3600 	.word	0x016e3600
 80030f0:	00f42400 	.word	0x00f42400

080030f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030fc:	2300      	movs	r3, #0
 80030fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003100:	2300      	movs	r3, #0
 8003102:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8098 	beq.w	8003242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b43      	ldr	r3, [pc, #268]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b40      	ldr	r3, [pc, #256]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	4a3f      	ldr	r2, [pc, #252]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6593      	str	r3, [r2, #88]	@ 0x58
 800312e:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313a:	2301      	movs	r3, #1
 800313c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800313e:	4b3a      	ldr	r3, [pc, #232]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a39      	ldr	r2, [pc, #228]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800314a:	f7fe f835 	bl	80011b8 <HAL_GetTick>
 800314e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003150:	e009      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003152:	f7fe f831 	bl	80011b8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d902      	bls.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	74fb      	strb	r3, [r7, #19]
        break;
 8003164:	e005      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003166:	4b30      	ldr	r3, [pc, #192]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ef      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d159      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003178:	4b2a      	ldr	r3, [pc, #168]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003182:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01e      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	429a      	cmp	r2, r3
 8003192:	d019      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003194:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800319e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031a0:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031c0:	4a18      	ldr	r2, [pc, #96]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fd fff1 	bl	80011b8 <HAL_GetTick>
 80031d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d8:	e00b      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fd ffed 	bl	80011b8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d902      	bls.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	74fb      	strb	r3, [r7, #19]
            break;
 80031f0:	e006      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ec      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003206:	4b07      	ldr	r3, [pc, #28]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003214:	4903      	ldr	r1, [pc, #12]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800321c:	e008      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	74bb      	strb	r3, [r7, #18]
 8003222:	e005      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003224:	40021000 	.word	0x40021000
 8003228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003230:	7c7b      	ldrb	r3, [r7, #17]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4ba7      	ldr	r3, [pc, #668]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	4aa6      	ldr	r2, [pc, #664]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324e:	4ba1      	ldr	r3, [pc, #644]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003254:	f023 0203 	bic.w	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	499d      	ldr	r1, [pc, #628]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003270:	4b98      	ldr	r3, [pc, #608]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003276:	f023 020c 	bic.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4995      	ldr	r1, [pc, #596]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003292:	4b90      	ldr	r3, [pc, #576]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003298:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	498c      	ldr	r1, [pc, #560]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b4:	4b87      	ldr	r3, [pc, #540]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	4984      	ldr	r1, [pc, #528]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d6:	4b7f      	ldr	r3, [pc, #508]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	497b      	ldr	r1, [pc, #492]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f8:	4b76      	ldr	r3, [pc, #472]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	4973      	ldr	r1, [pc, #460]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800331a:	4b6e      	ldr	r3, [pc, #440]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	496a      	ldr	r1, [pc, #424]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800333c:	4b65      	ldr	r3, [pc, #404]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003342:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4962      	ldr	r1, [pc, #392]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800335e:	4b5d      	ldr	r3, [pc, #372]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	4959      	ldr	r1, [pc, #356]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003380:	4b54      	ldr	r3, [pc, #336]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003386:	f023 0203 	bic.w	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	4951      	ldr	r1, [pc, #324]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033a2:	4b4c      	ldr	r3, [pc, #304]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4948      	ldr	r1, [pc, #288]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033c4:	4b43      	ldr	r3, [pc, #268]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	4940      	ldr	r1, [pc, #256]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033e2:	d105      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e4:	4b3b      	ldr	r3, [pc, #236]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ee:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d015      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033fc:	4b35      	ldr	r3, [pc, #212]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	4932      	ldr	r1, [pc, #200]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800341a:	d105      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800341c:	4b2d      	ldr	r3, [pc, #180]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003426:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d015      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003434:	4b27      	ldr	r3, [pc, #156]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003442:	4924      	ldr	r1, [pc, #144]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003452:	d105      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003454:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a1e      	ldr	r2, [pc, #120]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800345e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d015      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800346c:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003472:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347a:	4916      	ldr	r1, [pc, #88]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800348a:	d105      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a10      	ldr	r2, [pc, #64]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003496:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d019      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a4:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	4908      	ldr	r1, [pc, #32]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034c2:	d109      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c4:	4b03      	ldr	r3, [pc, #12]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a02      	ldr	r2, [pc, #8]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ce:	60d3      	str	r3, [r2, #12]
 80034d0:	e002      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034e4:	4b29      	ldr	r3, [pc, #164]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	4926      	ldr	r1, [pc, #152]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003502:	d105      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003504:	4b21      	ldr	r3, [pc, #132]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a20      	ldr	r2, [pc, #128]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d015      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352a:	4918      	ldr	r1, [pc, #96]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800353c:	4b13      	ldr	r3, [pc, #76]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a12      	ldr	r2, [pc, #72]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003546:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003554:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003556:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800355a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	490a      	ldr	r1, [pc, #40]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003572:	d105      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a04      	ldr	r2, [pc, #16]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003580:	7cbb      	ldrb	r3, [r7, #18]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000

08003590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e049      	b.n	8003636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f841 	bl	800363e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 fa30 	bl	8003a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	d001      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e054      	b.n	8003716 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a26      	ldr	r2, [pc, #152]	@ (8003724 <HAL_TIM_Base_Start_IT+0xd0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d022      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x80>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003696:	d01d      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x80>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a22      	ldr	r2, [pc, #136]	@ (8003728 <HAL_TIM_Base_Start_IT+0xd4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d018      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x80>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a21      	ldr	r2, [pc, #132]	@ (800372c <HAL_TIM_Base_Start_IT+0xd8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x80>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <HAL_TIM_Base_Start_IT+0xdc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00e      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x80>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003734 <HAL_TIM_Base_Start_IT+0xe0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d009      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x80>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <HAL_TIM_Base_Start_IT+0xe4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x80>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_TIM_Base_Start_IT+0xe8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d115      	bne.n	8003700 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <HAL_TIM_Base_Start_IT+0xec>)
 80036dc:	4013      	ands	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	d015      	beq.n	8003712 <HAL_TIM_Base_Start_IT+0xbe>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ec:	d011      	beq.n	8003712 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	e008      	b.n	8003712 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e000      	b.n	8003714 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40013400 	.word	0x40013400
 8003738:	40014000 	.word	0x40014000
 800373c:	40015000 	.word	0x40015000
 8003740:	00010007 	.word	0x00010007

08003744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d020      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01b      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0202 	mvn.w	r2, #2
 8003778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f931 	bl	80039f6 <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f923 	bl	80039e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f934 	bl	8003a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0204 	mvn.w	r2, #4
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f90b 	bl	80039f6 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8fd 	bl	80039e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f90e 	bl	8003a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d020      	beq.n	8003840 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01b      	beq.n	8003840 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0208 	mvn.w	r2, #8
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2204      	movs	r2, #4
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8e5 	bl	80039f6 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8d7 	bl	80039e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8e8 	bl	8003a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b00      	cmp	r3, #0
 8003848:	d020      	beq.n	800388c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0210 	mvn.w	r2, #16
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2208      	movs	r2, #8
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8bf 	bl	80039f6 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8b1 	bl	80039e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8c2 	bl	8003a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0201 	mvn.w	r2, #1
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd f9a0 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00c      	beq.n	80038de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80038d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f969 	bl	8003bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00c      	beq.n	8003902 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f961 	bl	8003bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00c      	beq.n	8003926 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800391e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f87c 	bl	8003a1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00c      	beq.n	800394a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f06f 0220 	mvn.w	r2, #32
 8003942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f929 	bl	8003b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f935 	bl	8003bd8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00c      	beq.n	8003992 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800398a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f92d 	bl	8003bec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00c      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80039ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f925 	bl	8003c00 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00c      	beq.n	80039da <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80039d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f91d 	bl	8003c14 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a4c      	ldr	r2, [pc, #304]	@ (8003b78 <TIM_Base_SetConfig+0x144>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d017      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a52:	d013      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a49      	ldr	r2, [pc, #292]	@ (8003b7c <TIM_Base_SetConfig+0x148>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00f      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a48      	ldr	r2, [pc, #288]	@ (8003b80 <TIM_Base_SetConfig+0x14c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a47      	ldr	r2, [pc, #284]	@ (8003b84 <TIM_Base_SetConfig+0x150>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a46      	ldr	r2, [pc, #280]	@ (8003b88 <TIM_Base_SetConfig+0x154>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a45      	ldr	r2, [pc, #276]	@ (8003b8c <TIM_Base_SetConfig+0x158>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d108      	bne.n	8003a8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a39      	ldr	r2, [pc, #228]	@ (8003b78 <TIM_Base_SetConfig+0x144>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d023      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9c:	d01f      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a36      	ldr	r2, [pc, #216]	@ (8003b7c <TIM_Base_SetConfig+0x148>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01b      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a35      	ldr	r2, [pc, #212]	@ (8003b80 <TIM_Base_SetConfig+0x14c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d017      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a34      	ldr	r2, [pc, #208]	@ (8003b84 <TIM_Base_SetConfig+0x150>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a33      	ldr	r2, [pc, #204]	@ (8003b88 <TIM_Base_SetConfig+0x154>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00f      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a33      	ldr	r2, [pc, #204]	@ (8003b90 <TIM_Base_SetConfig+0x15c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a32      	ldr	r2, [pc, #200]	@ (8003b94 <TIM_Base_SetConfig+0x160>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <TIM_Base_SetConfig+0x164>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <TIM_Base_SetConfig+0x158>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d108      	bne.n	8003af0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <TIM_Base_SetConfig+0x144>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <TIM_Base_SetConfig+0x154>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00f      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a1a      	ldr	r2, [pc, #104]	@ (8003b90 <TIM_Base_SetConfig+0x15c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	@ (8003b94 <TIM_Base_SetConfig+0x160>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d007      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a18      	ldr	r2, [pc, #96]	@ (8003b98 <TIM_Base_SetConfig+0x164>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <TIM_Base_SetConfig+0x158>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d103      	bne.n	8003b4c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f023 0201 	bic.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40015000 	.word	0x40015000
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800

08003b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e042      	b.n	8003cc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fd f8ad 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2224      	movs	r2, #36	@ 0x24
 8003c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 ff14 	bl	8004aa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fc15 	bl	80044a8 <UART_SetConfig>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01b      	b.n	8003cc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 ff93 	bl	8004be4 <UART_CheckIdleState>
 8003cbe:	4603      	mov	r3, r0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	@ 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d17b      	bne.n	8003dda <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_UART_Transmit+0x26>
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e074      	b.n	8003ddc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	@ 0x21
 8003cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d02:	f7fd fa59 	bl	80011b8 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d20:	d108      	bne.n	8003d34 <HAL_UART_Transmit+0x6c>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e003      	b.n	8003d3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d3c:	e030      	b.n	8003da0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	@ 0x80
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fff5 	bl	8004d38 <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e03d      	b.n	8003ddc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	3302      	adds	r3, #2
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e007      	b.n	8003d8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1c8      	bne.n	8003d3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2140      	movs	r1, #64	@ 0x40
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 ffbe 	bl	8004d38 <UART_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e006      	b.n	8003ddc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b0ba      	sub	sp, #232	@ 0xe8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003e0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003e12:	4013      	ands	r3, r2
 8003e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11b      	bne.n	8003e58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d015      	beq.n	8003e58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8300 	beq.w	800444e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
      }
      return;
 8003e56:	e2fa      	b.n	800444e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8123 	beq.w	80040a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e66:	4b8d      	ldr	r3, [pc, #564]	@ (800409c <HAL_UART_IRQHandler+0x2b8>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003e72:	4b8b      	ldr	r3, [pc, #556]	@ (80040a0 <HAL_UART_IRQHandler+0x2bc>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8116 	beq.w	80040a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d011      	beq.n	8003eac <HAL_UART_IRQHandler+0xc8>
 8003e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	f043 0201 	orr.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d011      	beq.n	8003edc <HAL_UART_IRQHandler+0xf8>
 8003eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	f043 0204 	orr.w	r2, r3, #4
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d011      	beq.n	8003f0c <HAL_UART_IRQHandler+0x128>
 8003ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2204      	movs	r2, #4
 8003efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d017      	beq.n	8003f48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003f28:	4b5c      	ldr	r3, [pc, #368]	@ (800409c <HAL_UART_IRQHandler+0x2b8>)
 8003f2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2208      	movs	r2, #8
 8003f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3e:	f043 0208 	orr.w	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <HAL_UART_IRQHandler+0x196>
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00c      	beq.n	8003f7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8266 	beq.w	8004452 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d013      	beq.n	8003fba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fce:	2b40      	cmp	r3, #64	@ 0x40
 8003fd0:	d005      	beq.n	8003fde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d054      	beq.n	8004088 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 ff17 	bl	8004e12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fee:	2b40      	cmp	r3, #64	@ 0x40
 8003ff0:	d146      	bne.n	8004080 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004008:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800400c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800401e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800402a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1d9      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004044:	2b00      	cmp	r3, #0
 8004046:	d017      	beq.n	8004078 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800404e:	4a15      	ldr	r2, [pc, #84]	@ (80040a4 <HAL_UART_IRQHandler+0x2c0>)
 8004050:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd f9f2 	bl	8001442 <HAL_DMA_Abort_IT>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d019      	beq.n	8004098 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004072:	4610      	mov	r0, r2
 8004074:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004076:	e00f      	b.n	8004098 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f9ff 	bl	800447c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407e:	e00b      	b.n	8004098 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f9fb 	bl	800447c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004086:	e007      	b.n	8004098 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f9f7 	bl	800447c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004096:	e1dc      	b.n	8004452 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	bf00      	nop
    return;
 800409a:	e1da      	b.n	8004452 <HAL_UART_IRQHandler+0x66e>
 800409c:	10000001 	.word	0x10000001
 80040a0:	04000120 	.word	0x04000120
 80040a4:	08004edf 	.word	0x08004edf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	f040 8170 	bne.w	8004392 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8169 	beq.w	8004392 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8162 	beq.w	8004392 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2210      	movs	r2, #16
 80040d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e0:	2b40      	cmp	r3, #64	@ 0x40
 80040e2:	f040 80d8 	bne.w	8004296 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80af 	beq.w	800425c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004104:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004108:	429a      	cmp	r2, r3
 800410a:	f080 80a7 	bcs.w	800425c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004114:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 8087 	bne.w	800423a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004140:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004148:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800415a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004162:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800416e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1da      	bne.n	800412c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800419a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800419e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e1      	bne.n	8004176 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e3      	bne.n	80041b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004208:	f023 0310 	bic.w	r3, r3, #16
 800420c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800421a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800421c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004220:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e4      	bne.n	80041f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd f8ab 	bl	8001390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800424c:	b29b      	uxth	r3, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	b29b      	uxth	r3, r3
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f91b 	bl	8004490 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800425a:	e0fc      	b.n	8004456 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004266:	429a      	cmp	r2, r3
 8004268:	f040 80f5 	bne.w	8004456 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	f040 80eb 	bne.w	8004456 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f8fe 	bl	8004490 <HAL_UARTEx_RxEventCallback>
      return;
 8004294:	e0df      	b.n	8004456 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80d1 	beq.w	800445a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80042b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80cc 	beq.w	800445a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e4      	bne.n	80042c2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	623b      	str	r3, [r7, #32]
   return(result);
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004320:	633a      	str	r2, [r7, #48]	@ 0x30
 8004322:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800432e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e1      	bne.n	80042f8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	60fb      	str	r3, [r7, #12]
   return(result);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f023 0310 	bic.w	r3, r3, #16
 800435c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	69b9      	ldr	r1, [r7, #24]
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	617b      	str	r3, [r7, #20]
   return(result);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e4      	bne.n	8004348 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f880 	bl	8004490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004390:	e063      	b.n	800445a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00e      	beq.n	80043bc <HAL_UART_IRQHandler+0x5d8>
 800439e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80043b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fdcf 	bl	8004f58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043ba:	e051      	b.n	8004460 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d014      	beq.n	80043f2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80043d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d03a      	beq.n	800445e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
    }
    return;
 80043f0:	e035      	b.n	800445e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_UART_IRQHandler+0x62e>
 80043fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fd79 	bl	8004f02 <UART_EndTransmit_IT>
    return;
 8004410:	e026      	b.n	8004460 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_UART_IRQHandler+0x64e>
 800441e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004422:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fda8 	bl	8004f80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004430:	e016      	b.n	8004460 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <HAL_UART_IRQHandler+0x67c>
 800443e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004442:	2b00      	cmp	r3, #0
 8004444:	da0c      	bge.n	8004460 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fd90 	bl	8004f6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800444c:	e008      	b.n	8004460 <HAL_UART_IRQHandler+0x67c>
      return;
 800444e:	bf00      	nop
 8004450:	e006      	b.n	8004460 <HAL_UART_IRQHandler+0x67c>
    return;
 8004452:	bf00      	nop
 8004454:	e004      	b.n	8004460 <HAL_UART_IRQHandler+0x67c>
      return;
 8004456:	bf00      	nop
 8004458:	e002      	b.n	8004460 <HAL_UART_IRQHandler+0x67c>
      return;
 800445a:	bf00      	nop
 800445c:	e000      	b.n	8004460 <HAL_UART_IRQHandler+0x67c>
    return;
 800445e:	bf00      	nop
  }
}
 8004460:	37e8      	adds	r7, #232	@ 0xe8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop

08004468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ac:	b08c      	sub	sp, #48	@ 0x30
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4baa      	ldr	r3, [pc, #680]	@ (8004780 <UART_SetConfig+0x2d8>)
 80044d8:	4013      	ands	r3, r2
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a9f      	ldr	r2, [pc, #636]	@ (8004784 <UART_SetConfig+0x2dc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004510:	4313      	orrs	r3, r2
 8004512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800451e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004528:	430b      	orrs	r3, r1
 800452a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	f023 010f 	bic.w	r1, r3, #15
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a90      	ldr	r2, [pc, #576]	@ (8004788 <UART_SetConfig+0x2e0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d125      	bne.n	8004598 <UART_SetConfig+0xf0>
 800454c:	4b8f      	ldr	r3, [pc, #572]	@ (800478c <UART_SetConfig+0x2e4>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d81a      	bhi.n	8004590 <UART_SetConfig+0xe8>
 800455a:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <UART_SetConfig+0xb8>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004571 	.word	0x08004571
 8004564:	08004581 	.word	0x08004581
 8004568:	08004579 	.word	0x08004579
 800456c:	08004589 	.word	0x08004589
 8004570:	2301      	movs	r3, #1
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004576:	e116      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457e:	e112      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e10e      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e10a      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004596:	e106      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a7c      	ldr	r2, [pc, #496]	@ (8004790 <UART_SetConfig+0x2e8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d138      	bne.n	8004614 <UART_SetConfig+0x16c>
 80045a2:	4b7a      	ldr	r3, [pc, #488]	@ (800478c <UART_SetConfig+0x2e4>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	d82d      	bhi.n	800460c <UART_SetConfig+0x164>
 80045b0:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <UART_SetConfig+0x110>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	0800460d 	.word	0x0800460d
 80045c0:	0800460d 	.word	0x0800460d
 80045c4:	0800460d 	.word	0x0800460d
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	0800460d 	.word	0x0800460d
 80045d0:	0800460d 	.word	0x0800460d
 80045d4:	0800460d 	.word	0x0800460d
 80045d8:	080045f5 	.word	0x080045f5
 80045dc:	0800460d 	.word	0x0800460d
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004605 	.word	0x08004605
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f2:	e0d8      	b.n	80047a6 <UART_SetConfig+0x2fe>
 80045f4:	2302      	movs	r3, #2
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fa:	e0d4      	b.n	80047a6 <UART_SetConfig+0x2fe>
 80045fc:	2304      	movs	r3, #4
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004602:	e0d0      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004604:	2308      	movs	r3, #8
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800460a:	e0cc      	b.n	80047a6 <UART_SetConfig+0x2fe>
 800460c:	2310      	movs	r3, #16
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004612:	e0c8      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5e      	ldr	r2, [pc, #376]	@ (8004794 <UART_SetConfig+0x2ec>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d125      	bne.n	800466a <UART_SetConfig+0x1c2>
 800461e:	4b5b      	ldr	r3, [pc, #364]	@ (800478c <UART_SetConfig+0x2e4>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004624:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004628:	2b30      	cmp	r3, #48	@ 0x30
 800462a:	d016      	beq.n	800465a <UART_SetConfig+0x1b2>
 800462c:	2b30      	cmp	r3, #48	@ 0x30
 800462e:	d818      	bhi.n	8004662 <UART_SetConfig+0x1ba>
 8004630:	2b20      	cmp	r3, #32
 8004632:	d00a      	beq.n	800464a <UART_SetConfig+0x1a2>
 8004634:	2b20      	cmp	r3, #32
 8004636:	d814      	bhi.n	8004662 <UART_SetConfig+0x1ba>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <UART_SetConfig+0x19a>
 800463c:	2b10      	cmp	r3, #16
 800463e:	d008      	beq.n	8004652 <UART_SetConfig+0x1aa>
 8004640:	e00f      	b.n	8004662 <UART_SetConfig+0x1ba>
 8004642:	2300      	movs	r3, #0
 8004644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004648:	e0ad      	b.n	80047a6 <UART_SetConfig+0x2fe>
 800464a:	2302      	movs	r3, #2
 800464c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004650:	e0a9      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004652:	2304      	movs	r3, #4
 8004654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004658:	e0a5      	b.n	80047a6 <UART_SetConfig+0x2fe>
 800465a:	2308      	movs	r3, #8
 800465c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004660:	e0a1      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004662:	2310      	movs	r3, #16
 8004664:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004668:	e09d      	b.n	80047a6 <UART_SetConfig+0x2fe>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a4a      	ldr	r2, [pc, #296]	@ (8004798 <UART_SetConfig+0x2f0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d125      	bne.n	80046c0 <UART_SetConfig+0x218>
 8004674:	4b45      	ldr	r3, [pc, #276]	@ (800478c <UART_SetConfig+0x2e4>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800467e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004680:	d016      	beq.n	80046b0 <UART_SetConfig+0x208>
 8004682:	2bc0      	cmp	r3, #192	@ 0xc0
 8004684:	d818      	bhi.n	80046b8 <UART_SetConfig+0x210>
 8004686:	2b80      	cmp	r3, #128	@ 0x80
 8004688:	d00a      	beq.n	80046a0 <UART_SetConfig+0x1f8>
 800468a:	2b80      	cmp	r3, #128	@ 0x80
 800468c:	d814      	bhi.n	80046b8 <UART_SetConfig+0x210>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <UART_SetConfig+0x1f0>
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d008      	beq.n	80046a8 <UART_SetConfig+0x200>
 8004696:	e00f      	b.n	80046b8 <UART_SetConfig+0x210>
 8004698:	2300      	movs	r3, #0
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800469e:	e082      	b.n	80047a6 <UART_SetConfig+0x2fe>
 80046a0:	2302      	movs	r3, #2
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046a6:	e07e      	b.n	80047a6 <UART_SetConfig+0x2fe>
 80046a8:	2304      	movs	r3, #4
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ae:	e07a      	b.n	80047a6 <UART_SetConfig+0x2fe>
 80046b0:	2308      	movs	r3, #8
 80046b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046b6:	e076      	b.n	80047a6 <UART_SetConfig+0x2fe>
 80046b8:	2310      	movs	r3, #16
 80046ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046be:	e072      	b.n	80047a6 <UART_SetConfig+0x2fe>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a35      	ldr	r2, [pc, #212]	@ (800479c <UART_SetConfig+0x2f4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d12a      	bne.n	8004720 <UART_SetConfig+0x278>
 80046ca:	4b30      	ldr	r3, [pc, #192]	@ (800478c <UART_SetConfig+0x2e4>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d8:	d01a      	beq.n	8004710 <UART_SetConfig+0x268>
 80046da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046de:	d81b      	bhi.n	8004718 <UART_SetConfig+0x270>
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d00c      	beq.n	8004700 <UART_SetConfig+0x258>
 80046e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ea:	d815      	bhi.n	8004718 <UART_SetConfig+0x270>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <UART_SetConfig+0x250>
 80046f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f4:	d008      	beq.n	8004708 <UART_SetConfig+0x260>
 80046f6:	e00f      	b.n	8004718 <UART_SetConfig+0x270>
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046fe:	e052      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004700:	2302      	movs	r3, #2
 8004702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004706:	e04e      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800470e:	e04a      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004716:	e046      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800471e:	e042      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <UART_SetConfig+0x2dc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d13a      	bne.n	80047a0 <UART_SetConfig+0x2f8>
 800472a:	4b18      	ldr	r3, [pc, #96]	@ (800478c <UART_SetConfig+0x2e4>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004734:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004738:	d01a      	beq.n	8004770 <UART_SetConfig+0x2c8>
 800473a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800473e:	d81b      	bhi.n	8004778 <UART_SetConfig+0x2d0>
 8004740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004744:	d00c      	beq.n	8004760 <UART_SetConfig+0x2b8>
 8004746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474a:	d815      	bhi.n	8004778 <UART_SetConfig+0x2d0>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <UART_SetConfig+0x2b0>
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004754:	d008      	beq.n	8004768 <UART_SetConfig+0x2c0>
 8004756:	e00f      	b.n	8004778 <UART_SetConfig+0x2d0>
 8004758:	2300      	movs	r3, #0
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800475e:	e022      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004766:	e01e      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800476e:	e01a      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004776:	e016      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800477e:	e012      	b.n	80047a6 <UART_SetConfig+0x2fe>
 8004780:	cfff69f3 	.word	0xcfff69f3
 8004784:	40008000 	.word	0x40008000
 8004788:	40013800 	.word	0x40013800
 800478c:	40021000 	.word	0x40021000
 8004790:	40004400 	.word	0x40004400
 8004794:	40004800 	.word	0x40004800
 8004798:	40004c00 	.word	0x40004c00
 800479c:	40005000 	.word	0x40005000
 80047a0:	2310      	movs	r3, #16
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4aae      	ldr	r2, [pc, #696]	@ (8004a64 <UART_SetConfig+0x5bc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	f040 8097 	bne.w	80048e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d823      	bhi.n	8004802 <UART_SetConfig+0x35a>
 80047ba:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <UART_SetConfig+0x318>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	08004803 	.word	0x08004803
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	08004803 	.word	0x08004803
 80047d0:	080047f3 	.word	0x080047f3
 80047d4:	08004803 	.word	0x08004803
 80047d8:	08004803 	.word	0x08004803
 80047dc:	08004803 	.word	0x08004803
 80047e0:	080047fb 	.word	0x080047fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e4:	f7fe fbe2 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 80047e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ea:	e010      	b.n	800480e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ec:	4b9e      	ldr	r3, [pc, #632]	@ (8004a68 <UART_SetConfig+0x5c0>)
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047f0:	e00d      	b.n	800480e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f2:	f7fe fb6d 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 80047f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047f8:	e009      	b.n	800480e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004800:	e005      	b.n	800480e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800480c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8130 	beq.w	8004a76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	4a94      	ldr	r2, [pc, #592]	@ (8004a6c <UART_SetConfig+0x5c4>)
 800481c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004820:	461a      	mov	r2, r3
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	fbb3 f3f2 	udiv	r3, r3, r2
 8004828:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	429a      	cmp	r2, r3
 8004838:	d305      	bcc.n	8004846 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	429a      	cmp	r2, r3
 8004844:	d903      	bls.n	800484e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800484c:	e113      	b.n	8004a76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	2200      	movs	r2, #0
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	60fa      	str	r2, [r7, #12]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	4a84      	ldr	r2, [pc, #528]	@ (8004a6c <UART_SetConfig+0x5c4>)
 800485c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004860:	b29b      	uxth	r3, r3
 8004862:	2200      	movs	r2, #0
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800486c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004870:	f7fb fd26 	bl	80002c0 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4610      	mov	r0, r2
 800487a:	4619      	mov	r1, r3
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	020b      	lsls	r3, r1, #8
 8004886:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800488a:	0202      	lsls	r2, r0, #8
 800488c:	6979      	ldr	r1, [r7, #20]
 800488e:	6849      	ldr	r1, [r1, #4]
 8004890:	0849      	lsrs	r1, r1, #1
 8004892:	2000      	movs	r0, #0
 8004894:	460c      	mov	r4, r1
 8004896:	4605      	mov	r5, r0
 8004898:	eb12 0804 	adds.w	r8, r2, r4
 800489c:	eb43 0905 	adc.w	r9, r3, r5
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	469a      	mov	sl, r3
 80048a8:	4693      	mov	fp, r2
 80048aa:	4652      	mov	r2, sl
 80048ac:	465b      	mov	r3, fp
 80048ae:	4640      	mov	r0, r8
 80048b0:	4649      	mov	r1, r9
 80048b2:	f7fb fd05 	bl	80002c0 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4613      	mov	r3, r2
 80048bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048c4:	d308      	bcc.n	80048d8 <UART_SetConfig+0x430>
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048cc:	d204      	bcs.n	80048d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	e0ce      	b.n	8004a76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048de:	e0ca      	b.n	8004a76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048e8:	d166      	bne.n	80049b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80048ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d827      	bhi.n	8004942 <UART_SetConfig+0x49a>
 80048f2:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <UART_SetConfig+0x450>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	08004925 	.word	0x08004925
 8004900:	0800492d 	.word	0x0800492d
 8004904:	08004943 	.word	0x08004943
 8004908:	08004933 	.word	0x08004933
 800490c:	08004943 	.word	0x08004943
 8004910:	08004943 	.word	0x08004943
 8004914:	08004943 	.word	0x08004943
 8004918:	0800493b 	.word	0x0800493b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800491c:	f7fe fb46 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004920:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004922:	e014      	b.n	800494e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004924:	f7fe fb58 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8004928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800492a:	e010      	b.n	800494e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800492c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a68 <UART_SetConfig+0x5c0>)
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004930:	e00d      	b.n	800494e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fe facd 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8004936:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004938:	e009      	b.n	800494e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004940:	e005      	b.n	800494e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800494c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8090 	beq.w	8004a76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	4a44      	ldr	r2, [pc, #272]	@ (8004a6c <UART_SetConfig+0x5c4>)
 800495c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004960:	461a      	mov	r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	fbb3 f3f2 	udiv	r3, r3, r2
 8004968:	005a      	lsls	r2, r3, #1
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	441a      	add	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b0f      	cmp	r3, #15
 8004980:	d916      	bls.n	80049b0 <UART_SetConfig+0x508>
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004988:	d212      	bcs.n	80049b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f023 030f 	bic.w	r3, r3, #15
 8004992:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	b29b      	uxth	r3, r3
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	b29a      	uxth	r2, r3
 80049a0:	8bfb      	ldrh	r3, [r7, #30]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	8bfa      	ldrh	r2, [r7, #30]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	e062      	b.n	8004a76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049b6:	e05e      	b.n	8004a76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d828      	bhi.n	8004a12 <UART_SetConfig+0x56a>
 80049c0:	a201      	add	r2, pc, #4	@ (adr r2, 80049c8 <UART_SetConfig+0x520>)
 80049c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c6:	bf00      	nop
 80049c8:	080049ed 	.word	0x080049ed
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049fd 	.word	0x080049fd
 80049d4:	08004a13 	.word	0x08004a13
 80049d8:	08004a03 	.word	0x08004a03
 80049dc:	08004a13 	.word	0x08004a13
 80049e0:	08004a13 	.word	0x08004a13
 80049e4:	08004a13 	.word	0x08004a13
 80049e8:	08004a0b 	.word	0x08004a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ec:	f7fe fade 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 80049f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049f2:	e014      	b.n	8004a1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f4:	f7fe faf0 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 80049f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049fa:	e010      	b.n	8004a1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <UART_SetConfig+0x5c0>)
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a00:	e00d      	b.n	8004a1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a02:	f7fe fa65 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8004a06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a08:	e009      	b.n	8004a1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a10:	e005      	b.n	8004a1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d028      	beq.n	8004a76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	4a10      	ldr	r2, [pc, #64]	@ (8004a6c <UART_SetConfig+0x5c4>)
 8004a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	441a      	add	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	2b0f      	cmp	r3, #15
 8004a4c:	d910      	bls.n	8004a70 <UART_SetConfig+0x5c8>
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a54:	d20c      	bcs.n	8004a70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e009      	b.n	8004a76 <UART_SetConfig+0x5ce>
 8004a62:	bf00      	nop
 8004a64:	40008000 	.word	0x40008000
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	0800a1ac 	.word	0x0800a1ac
      }
      else
      {
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3730      	adds	r7, #48	@ 0x30
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b9e:	d10a      	bne.n	8004bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b098      	sub	sp, #96	@ 0x60
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bf4:	f7fc fae0 	bl	80011b8 <HAL_GetTick>
 8004bf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d12f      	bne.n	8004c68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c10:	2200      	movs	r2, #0
 8004c12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f88e 	bl	8004d38 <UART_WaitOnFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d022      	beq.n	8004c68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e6      	bne.n	8004c22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e063      	b.n	8004d30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d149      	bne.n	8004d0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f857 	bl	8004d38 <UART_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d03c      	beq.n	8004d0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e6      	bne.n	8004c90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3308      	adds	r3, #8
 8004ce0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ce2:	61fa      	str	r2, [r7, #28]
 8004ce4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	69b9      	ldr	r1, [r7, #24]
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e012      	b.n	8004d30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3758      	adds	r7, #88	@ 0x58
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d48:	e04f      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d50:	d04b      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7fc fa31 	bl	80011b8 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e04e      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d037      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b80      	cmp	r3, #128	@ 0x80
 8004d7e:	d034      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b40      	cmp	r3, #64	@ 0x40
 8004d84:	d031      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d110      	bne.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2208      	movs	r2, #8
 8004d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f838 	bl	8004e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2208      	movs	r2, #8
 8004da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e029      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc4:	d111      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f81e 	bl	8004e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e00f      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	bf0c      	ite	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2300      	movne	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d0a0      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b095      	sub	sp, #84	@ 0x54
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e6      	bne.n	8004e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e3      	bne.n	8004e4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d118      	bne.n	8004ebe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 0310 	bic.w	r3, r3, #16
 8004ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ed2:	bf00      	nop
 8004ed4:	3754      	adds	r7, #84	@ 0x54
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff fac1 	bl	800447c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b088      	sub	sp, #32
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	613b      	str	r3, [r7, #16]
   return(result);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e6      	bne.n	8004f0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fa8c 	bl	8004468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f50:	bf00      	nop
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_UARTEx_DisableFifoMode+0x16>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e027      	b.n	8004ffa <HAL_UARTEx_DisableFifoMode+0x66>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2224      	movs	r2, #36	@ 0x24
 8004fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004fd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800501a:	2302      	movs	r3, #2
 800501c:	e02d      	b.n	800507a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2224      	movs	r2, #36	@ 0x24
 800502a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0201 	bic.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f850 	bl	8005100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005096:	2302      	movs	r3, #2
 8005098:	e02d      	b.n	80050f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2224      	movs	r2, #36	@ 0x24
 80050a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f812 	bl	8005100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800510c:	2b00      	cmp	r3, #0
 800510e:	d108      	bne.n	8005122 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005120:	e031      	b.n	8005186 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005122:	2308      	movs	r3, #8
 8005124:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005126:	2308      	movs	r3, #8
 8005128:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	0e5b      	lsrs	r3, r3, #25
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	0f5b      	lsrs	r3, r3, #29
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800514a:	7bbb      	ldrb	r3, [r7, #14]
 800514c:	7b3a      	ldrb	r2, [r7, #12]
 800514e:	4911      	ldr	r1, [pc, #68]	@ (8005194 <UARTEx_SetNbDataToProcess+0x94>)
 8005150:	5c8a      	ldrb	r2, [r1, r2]
 8005152:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005156:	7b3a      	ldrb	r2, [r7, #12]
 8005158:	490f      	ldr	r1, [pc, #60]	@ (8005198 <UARTEx_SetNbDataToProcess+0x98>)
 800515a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800515c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	7b7a      	ldrb	r2, [r7, #13]
 800516c:	4909      	ldr	r1, [pc, #36]	@ (8005194 <UARTEx_SetNbDataToProcess+0x94>)
 800516e:	5c8a      	ldrb	r2, [r1, r2]
 8005170:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005174:	7b7a      	ldrb	r2, [r7, #13]
 8005176:	4908      	ldr	r1, [pc, #32]	@ (8005198 <UARTEx_SetNbDataToProcess+0x98>)
 8005178:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800517a:	fb93 f3f2 	sdiv	r3, r3, r2
 800517e:	b29a      	uxth	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	0800a1c4 	.word	0x0800a1c4
 8005198:	0800a1cc 	.word	0x0800a1cc

0800519c <__NVIC_SetPriority>:
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	db0a      	blt.n	80051c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	490c      	ldr	r1, [pc, #48]	@ (80051e8 <__NVIC_SetPriority+0x4c>)
 80051b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ba:	0112      	lsls	r2, r2, #4
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	440b      	add	r3, r1
 80051c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80051c4:	e00a      	b.n	80051dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	4908      	ldr	r1, [pc, #32]	@ (80051ec <__NVIC_SetPriority+0x50>)
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	3b04      	subs	r3, #4
 80051d4:	0112      	lsls	r2, r2, #4
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	440b      	add	r3, r1
 80051da:	761a      	strb	r2, [r3, #24]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	e000e100 	.word	0xe000e100
 80051ec:	e000ed00 	.word	0xe000ed00

080051f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <SysTick_Handler+0x1c>)
 80051f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80051f8:	f002 fc70 	bl	8007adc <xTaskGetSchedulerState>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d001      	beq.n	8005206 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005202:	f003 fb69 	bl	80088d8 <xPortSysTickHandler>
  }
}
 8005206:	bf00      	nop
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	e000e010 	.word	0xe000e010

08005210 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005214:	2100      	movs	r1, #0
 8005216:	f06f 0004 	mvn.w	r0, #4
 800521a:	f7ff ffbf 	bl	800519c <__NVIC_SetPriority>
#endif
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800522a:	f3ef 8305 	mrs	r3, IPSR
 800522e:	603b      	str	r3, [r7, #0]
  return(result);
 8005230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005236:	f06f 0305 	mvn.w	r3, #5
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	e00c      	b.n	8005258 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800523e:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <osKernelInitialize+0x44>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d105      	bne.n	8005252 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005246:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <osKernelInitialize+0x44>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800524c:	2300      	movs	r3, #0
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	e002      	b.n	8005258 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005258:	687b      	ldr	r3, [r7, #4]
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000200 	.word	0x20000200

0800526c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005272:	f3ef 8305 	mrs	r3, IPSR
 8005276:	603b      	str	r3, [r7, #0]
  return(result);
 8005278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <osKernelStart+0x1a>
    stat = osErrorISR;
 800527e:	f06f 0305 	mvn.w	r3, #5
 8005282:	607b      	str	r3, [r7, #4]
 8005284:	e010      	b.n	80052a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <osKernelStart+0x48>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d109      	bne.n	80052a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800528e:	f7ff ffbf 	bl	8005210 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005292:	4b08      	ldr	r3, [pc, #32]	@ (80052b4 <osKernelStart+0x48>)
 8005294:	2202      	movs	r2, #2
 8005296:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005298:	f001 ffc2 	bl	8007220 <vTaskStartScheduler>
      stat = osOK;
 800529c:	2300      	movs	r3, #0
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	e002      	b.n	80052a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80052a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052a8:	687b      	ldr	r3, [r7, #4]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000200 	.word	0x20000200

080052b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08e      	sub	sp, #56	@ 0x38
 80052bc:	af04      	add	r7, sp, #16
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c8:	f3ef 8305 	mrs	r3, IPSR
 80052cc:	617b      	str	r3, [r7, #20]
  return(result);
 80052ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d17e      	bne.n	80053d2 <osThreadNew+0x11a>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d07b      	beq.n	80053d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80052da:	2380      	movs	r3, #128	@ 0x80
 80052dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80052de:	2318      	movs	r3, #24
 80052e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d045      	beq.n	800537e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <osThreadNew+0x48>
        name = attr->name;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <osThreadNew+0x6e>
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2b38      	cmp	r3, #56	@ 0x38
 8005318:	d805      	bhi.n	8005326 <osThreadNew+0x6e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <osThreadNew+0x72>
        return (NULL);
 8005326:	2300      	movs	r3, #0
 8005328:	e054      	b.n	80053d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <osThreadNew+0xa8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b5b      	cmp	r3, #91	@ 0x5b
 8005348:	d90a      	bls.n	8005360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800534e:	2b00      	cmp	r3, #0
 8005350:	d006      	beq.n	8005360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <osThreadNew+0xa8>
        mem = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e010      	b.n	8005382 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10c      	bne.n	8005382 <osThreadNew+0xca>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <osThreadNew+0xca>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d104      	bne.n	8005382 <osThreadNew+0xca>
          mem = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	e001      	b.n	8005382 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d110      	bne.n	80053aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005390:	9202      	str	r2, [sp, #8]
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6a3a      	ldr	r2, [r7, #32]
 800539c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f001 fd62 	bl	8006e68 <xTaskCreateStatic>
 80053a4:	4603      	mov	r3, r0
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	e013      	b.n	80053d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d110      	bne.n	80053d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	f107 0310 	add.w	r3, r7, #16
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f001 fdb0 	bl	8006f28 <xTaskCreate>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d001      	beq.n	80053d2 <osThreadNew+0x11a>
            hTask = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053d2:	693b      	ldr	r3, [r7, #16]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3728      	adds	r7, #40	@ 0x28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e4:	f3ef 8305 	mrs	r3, IPSR
 80053e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80053ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <osDelay+0x1c>
    stat = osErrorISR;
 80053f0:	f06f 0305 	mvn.w	r3, #5
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e007      	b.n	8005408 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fed6 	bl	80071b4 <vTaskDelay>
    }
  }

  return (stat);
 8005408:	68fb      	ldr	r3, [r7, #12]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005412:	b580      	push	{r7, lr}
 8005414:	b088      	sub	sp, #32
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541e:	f3ef 8305 	mrs	r3, IPSR
 8005422:	60bb      	str	r3, [r7, #8]
  return(result);
 8005424:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005426:	2b00      	cmp	r3, #0
 8005428:	d174      	bne.n	8005514 <osMutexNew+0x102>
    if (attr != NULL) {
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e001      	b.n	800543c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <osMutexNew+0x3a>
      rmtx = 1U;
 8005446:	2301      	movs	r3, #1
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	e001      	b.n	8005450 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d15c      	bne.n	8005514 <osMutexNew+0x102>
      mem = -1;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800545e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d015      	beq.n	8005492 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d006      	beq.n	800547c <osMutexNew+0x6a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	2b4f      	cmp	r3, #79	@ 0x4f
 8005474:	d902      	bls.n	800547c <osMutexNew+0x6a>
          mem = 1;
 8005476:	2301      	movs	r3, #1
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	e00c      	b.n	8005496 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <osMutexNew+0x84>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <osMutexNew+0x84>
            mem = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	e001      	b.n	8005496 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d112      	bne.n	80054c2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4619      	mov	r1, r3
 80054a8:	2004      	movs	r0, #4
 80054aa:	f000 fd70 	bl	8005f8e <xQueueCreateMutexStatic>
 80054ae:	61f8      	str	r0, [r7, #28]
 80054b0:	e016      	b.n	80054e0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	4619      	mov	r1, r3
 80054b8:	2001      	movs	r0, #1
 80054ba:	f000 fd68 	bl	8005f8e <xQueueCreateMutexStatic>
 80054be:	61f8      	str	r0, [r7, #28]
 80054c0:	e00e      	b.n	80054e0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10b      	bne.n	80054e0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80054ce:	2004      	movs	r0, #4
 80054d0:	f000 fd45 	bl	8005f5e <xQueueCreateMutex>
 80054d4:	61f8      	str	r0, [r7, #28]
 80054d6:	e003      	b.n	80054e0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80054d8:	2001      	movs	r0, #1
 80054da:	f000 fd40 	bl	8005f5e <xQueueCreateMutex>
 80054de:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00c      	beq.n	8005500 <osMutexNew+0xee>
        if (attr != NULL) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <osMutexNew+0xe2>
          name = attr->name;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e001      	b.n	80054f8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	69f8      	ldr	r0, [r7, #28]
 80054fc:	f001 fc2c 	bl	8006d58 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d006      	beq.n	8005514 <osMutexNew+0x102>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005514:	69fb      	ldr	r3, [r7, #28]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3720      	adds	r7, #32
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553c:	f3ef 8305 	mrs	r3, IPSR
 8005540:	60bb      	str	r3, [r7, #8]
  return(result);
 8005542:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005548:	f06f 0305 	mvn.w	r3, #5
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e02c      	b.n	80055aa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005556:	f06f 0303 	mvn.w	r3, #3
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e025      	b.n	80055aa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d011      	beq.n	8005588 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6938      	ldr	r0, [r7, #16]
 8005568:	f000 fd61 	bl	800602e <xQueueTakeMutexRecursive>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d01b      	beq.n	80055aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005578:	f06f 0301 	mvn.w	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	e014      	b.n	80055aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005580:	f06f 0302 	mvn.w	r3, #2
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e010      	b.n	80055aa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	6938      	ldr	r0, [r7, #16]
 800558c:	f001 f906 	bl	800679c <xQueueSemaphoreTake>
 8005590:	4603      	mov	r3, r0
 8005592:	2b01      	cmp	r3, #1
 8005594:	d009      	beq.n	80055aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800559c:	f06f 0301 	mvn.w	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e002      	b.n	80055aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80055a4:	f06f 0302 	mvn.w	r3, #2
 80055a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80055aa:	697b      	ldr	r3, [r7, #20]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055d0:	f3ef 8305 	mrs	r3, IPSR
 80055d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80055d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80055dc:	f06f 0305 	mvn.w	r3, #5
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e01f      	b.n	8005624 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80055ea:	f06f 0303 	mvn.w	r3, #3
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	e018      	b.n	8005624 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d009      	beq.n	800560c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80055f8:	6938      	ldr	r0, [r7, #16]
 80055fa:	f000 fce3 	bl	8005fc4 <xQueueGiveMutexRecursive>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b01      	cmp	r3, #1
 8005602:	d00f      	beq.n	8005624 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005604:	f06f 0302 	mvn.w	r3, #2
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e00b      	b.n	8005624 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800560c:	2300      	movs	r3, #0
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	6938      	ldr	r0, [r7, #16]
 8005614:	f000 fdb0 	bl	8006178 <xQueueGenericSend>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d002      	beq.n	8005624 <osMutexRelease+0x70>
        stat = osErrorResource;
 800561e:	f06f 0302 	mvn.w	r3, #2
 8005622:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005624:	697b      	ldr	r3, [r7, #20]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800562e:	b580      	push	{r7, lr}
 8005630:	b08a      	sub	sp, #40	@ 0x28
 8005632:	af02      	add	r7, sp, #8
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563e:	f3ef 8305 	mrs	r3, IPSR
 8005642:	613b      	str	r3, [r7, #16]
  return(result);
 8005644:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005646:	2b00      	cmp	r3, #0
 8005648:	d175      	bne.n	8005736 <osSemaphoreNew+0x108>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d072      	beq.n	8005736 <osSemaphoreNew+0x108>
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	429a      	cmp	r2, r3
 8005656:	d86e      	bhi.n	8005736 <osSemaphoreNew+0x108>
    mem = -1;
 8005658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800565c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d006      	beq.n	800567a <osSemaphoreNew+0x4c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b4f      	cmp	r3, #79	@ 0x4f
 8005672:	d902      	bls.n	800567a <osSemaphoreNew+0x4c>
        mem = 1;
 8005674:	2301      	movs	r3, #1
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	e00c      	b.n	8005694 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d108      	bne.n	8005694 <osSemaphoreNew+0x66>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <osSemaphoreNew+0x66>
          mem = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	e001      	b.n	8005694 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800569a:	d04c      	beq.n	8005736 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d128      	bne.n	80056f4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10a      	bne.n	80056be <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2203      	movs	r2, #3
 80056ae:	9200      	str	r2, [sp, #0]
 80056b0:	2200      	movs	r2, #0
 80056b2:	2100      	movs	r1, #0
 80056b4:	2001      	movs	r0, #1
 80056b6:	f000 fb5d 	bl	8005d74 <xQueueGenericCreateStatic>
 80056ba:	61f8      	str	r0, [r7, #28]
 80056bc:	e005      	b.n	80056ca <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80056be:	2203      	movs	r2, #3
 80056c0:	2100      	movs	r1, #0
 80056c2:	2001      	movs	r0, #1
 80056c4:	f000 fbd3 	bl	8005e6e <xQueueGenericCreate>
 80056c8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d022      	beq.n	8005716 <osSemaphoreNew+0xe8>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01f      	beq.n	8005716 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056d6:	2300      	movs	r3, #0
 80056d8:	2200      	movs	r2, #0
 80056da:	2100      	movs	r1, #0
 80056dc:	69f8      	ldr	r0, [r7, #28]
 80056de:	f000 fd4b 	bl	8006178 <xQueueGenericSend>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d016      	beq.n	8005716 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80056e8:	69f8      	ldr	r0, [r7, #28]
 80056ea:	f001 f9e9 	bl	8006ac0 <vQueueDelete>
            hSemaphore = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	e010      	b.n	8005716 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d108      	bne.n	800570c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	461a      	mov	r2, r3
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fcca 	bl	800609c <xQueueCreateCountingSemaphoreStatic>
 8005708:	61f8      	str	r0, [r7, #28]
 800570a:	e004      	b.n	8005716 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fcfd 	bl	800610e <xQueueCreateCountingSemaphore>
 8005714:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <osSemaphoreNew+0xfc>
          name = attr->name;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e001      	b.n	800572e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	69f8      	ldr	r0, [r7, #28]
 8005732:	f001 fb11 	bl	8006d58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005736:	69fb      	ldr	r3, [r7, #28]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005758:	f06f 0303 	mvn.w	r3, #3
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e039      	b.n	80057d4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005760:	f3ef 8305 	mrs	r3, IPSR
 8005764:	60fb      	str	r3, [r7, #12]
  return(result);
 8005766:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005768:	2b00      	cmp	r3, #0
 800576a:	d022      	beq.n	80057b2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005772:	f06f 0303 	mvn.w	r3, #3
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e02c      	b.n	80057d4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	461a      	mov	r2, r3
 8005784:	2100      	movs	r1, #0
 8005786:	6938      	ldr	r0, [r7, #16]
 8005788:	f001 f918 	bl	80069bc <xQueueReceiveFromISR>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d003      	beq.n	800579a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005792:	f06f 0302 	mvn.w	r3, #2
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	e01c      	b.n	80057d4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d019      	beq.n	80057d4 <osSemaphoreAcquire+0x94>
 80057a0:	4b0f      	ldr	r3, [pc, #60]	@ (80057e0 <osSemaphoreAcquire+0xa0>)
 80057a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	e010      	b.n	80057d4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6938      	ldr	r0, [r7, #16]
 80057b6:	f000 fff1 	bl	800679c <xQueueSemaphoreTake>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d009      	beq.n	80057d4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80057c6:	f06f 0301 	mvn.w	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e002      	b.n	80057d4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80057ce:	f06f 0302 	mvn.w	r3, #2
 80057d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80057d4:	697b      	ldr	r3, [r7, #20]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d103      	bne.n	8005802 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80057fa:	f06f 0303 	mvn.w	r3, #3
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e02c      	b.n	800585c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005802:	f3ef 8305 	mrs	r3, IPSR
 8005806:	60fb      	str	r3, [r7, #12]
  return(result);
 8005808:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01a      	beq.n	8005844 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	4619      	mov	r1, r3
 8005818:	6938      	ldr	r0, [r7, #16]
 800581a:	f000 fe4d 	bl	80064b8 <xQueueGiveFromISR>
 800581e:	4603      	mov	r3, r0
 8005820:	2b01      	cmp	r3, #1
 8005822:	d003      	beq.n	800582c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005824:	f06f 0302 	mvn.w	r3, #2
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e017      	b.n	800585c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d014      	beq.n	800585c <osSemaphoreRelease+0x78>
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <osSemaphoreRelease+0x84>)
 8005834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	e00b      	b.n	800585c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005844:	2300      	movs	r3, #0
 8005846:	2200      	movs	r2, #0
 8005848:	2100      	movs	r1, #0
 800584a:	6938      	ldr	r0, [r7, #16]
 800584c:	f000 fc94 	bl	8006178 <xQueueGenericSend>
 8005850:	4603      	mov	r3, r0
 8005852:	2b01      	cmp	r3, #1
 8005854:	d002      	beq.n	800585c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005856:	f06f 0302 	mvn.w	r3, #2
 800585a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800585c:	697b      	ldr	r3, [r7, #20]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	@ 0x28
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800587c:	f3ef 8305 	mrs	r3, IPSR
 8005880:	613b      	str	r3, [r7, #16]
  return(result);
 8005882:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005884:	2b00      	cmp	r3, #0
 8005886:	d15f      	bne.n	8005948 <osMessageQueueNew+0xdc>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d05c      	beq.n	8005948 <osMessageQueueNew+0xdc>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d059      	beq.n	8005948 <osMessageQueueNew+0xdc>
    mem = -1;
 8005894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005898:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d029      	beq.n	80058f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d012      	beq.n	80058ce <osMessageQueueNew+0x62>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b4f      	cmp	r3, #79	@ 0x4f
 80058ae:	d90e      	bls.n	80058ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <osMessageQueueNew+0x62>
        mem = 1;
 80058c8:	2301      	movs	r3, #1
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e014      	b.n	80058f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d110      	bne.n	80058f8 <osMessageQueueNew+0x8c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10c      	bne.n	80058f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e001      	b.n	80058f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10b      	bne.n	8005916 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2100      	movs	r1, #0
 8005908:	9100      	str	r1, [sp, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fa31 	bl	8005d74 <xQueueGenericCreateStatic>
 8005912:	61f8      	str	r0, [r7, #28]
 8005914:	e008      	b.n	8005928 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800591c:	2200      	movs	r2, #0
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 faa4 	bl	8005e6e <xQueueGenericCreate>
 8005926:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00c      	beq.n	8005948 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e001      	b.n	8005940 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005940:	6979      	ldr	r1, [r7, #20]
 8005942:	69f8      	ldr	r0, [r7, #28]
 8005944:	f001 fa08 	bl	8006d58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005948:	69fb      	ldr	r3, [r7, #28]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005968:	2300      	movs	r3, #0
 800596a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800596c:	f3ef 8305 	mrs	r3, IPSR
 8005970:	617b      	str	r3, [r7, #20]
  return(result);
 8005972:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005974:	2b00      	cmp	r3, #0
 8005976:	d028      	beq.n	80059ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <osMessageQueuePut+0x36>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <osMessageQueuePut+0x36>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800598a:	f06f 0303 	mvn.w	r3, #3
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	e038      	b.n	8005a04 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005996:	f107 0210 	add.w	r2, r7, #16
 800599a:	2300      	movs	r3, #0
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	69b8      	ldr	r0, [r7, #24]
 80059a0:	f000 fcec 	bl	800637c <xQueueGenericSendFromISR>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d003      	beq.n	80059b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80059aa:	f06f 0302 	mvn.w	r3, #2
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	e028      	b.n	8005a04 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d025      	beq.n	8005a04 <osMessageQueuePut+0xb0>
 80059b8:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <osMessageQueuePut+0xbc>)
 80059ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	e01c      	b.n	8005a04 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <osMessageQueuePut+0x82>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80059d6:	f06f 0303 	mvn.w	r3, #3
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	e012      	b.n	8005a04 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80059de:	2300      	movs	r3, #0
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	69b8      	ldr	r0, [r7, #24]
 80059e6:	f000 fbc7 	bl	8006178 <xQueueGenericSend>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d009      	beq.n	8005a04 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80059f6:	f06f 0301 	mvn.w	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	e002      	b.n	8005a04 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80059fe:	f06f 0302 	mvn.w	r3, #2
 8005a02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005a04:	69fb      	ldr	r3, [r7, #28]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a2a:	f3ef 8305 	mrs	r3, IPSR
 8005a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8005a30:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d028      	beq.n	8005a88 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <osMessageQueueGet+0x34>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <osMessageQueueGet+0x34>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005a48:	f06f 0303 	mvn.w	r3, #3
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	e037      	b.n	8005ac0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005a54:	f107 0310 	add.w	r3, r7, #16
 8005a58:	461a      	mov	r2, r3
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	69b8      	ldr	r0, [r7, #24]
 8005a5e:	f000 ffad 	bl	80069bc <xQueueReceiveFromISR>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d003      	beq.n	8005a70 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005a68:	f06f 0302 	mvn.w	r3, #2
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	e027      	b.n	8005ac0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d024      	beq.n	8005ac0 <osMessageQueueGet+0xac>
 8005a76:	4b15      	ldr	r3, [pc, #84]	@ (8005acc <osMessageQueueGet+0xb8>)
 8005a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	e01b      	b.n	8005ac0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <osMessageQueueGet+0x80>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005a94:	f06f 0303 	mvn.w	r3, #3
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	e011      	b.n	8005ac0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	69b8      	ldr	r0, [r7, #24]
 8005aa2:	f000 fd99 	bl	80065d8 <xQueueReceive>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d009      	beq.n	8005ac0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005ab2:	f06f 0301 	mvn.w	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	e002      	b.n	8005ac0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005aba:	f06f 0302 	mvn.w	r3, #2
 8005abe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a07      	ldr	r2, [pc, #28]	@ (8005afc <vApplicationGetIdleTaskMemory+0x2c>)
 8005ae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4a06      	ldr	r2, [pc, #24]	@ (8005b00 <vApplicationGetIdleTaskMemory+0x30>)
 8005ae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2280      	movs	r2, #128	@ 0x80
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	20000204 	.word	0x20000204
 8005b00:	20000260 	.word	0x20000260

08005b04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a07      	ldr	r2, [pc, #28]	@ (8005b30 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4a06      	ldr	r2, [pc, #24]	@ (8005b34 <vApplicationGetTimerTaskMemory+0x30>)
 8005b1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b22:	601a      	str	r2, [r3, #0]
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000460 	.word	0x20000460
 8005b34:	200004bc 	.word	0x200004bc

08005b38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f103 0208 	add.w	r2, r3, #8
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f103 0208 	add.w	r2, r3, #8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f103 0208 	add.w	r2, r3, #8
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bf0:	d103      	bne.n	8005bfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e00c      	b.n	8005c14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e002      	b.n	8005c08 <vListInsert+0x2e>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d2f6      	bcs.n	8005c02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6892      	ldr	r2, [r2, #8]
 8005c62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6852      	ldr	r2, [r2, #4]
 8005c6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d103      	bne.n	8005c80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	1e5a      	subs	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ccc:	f002 fd74 	bl	80087b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd8:	68f9      	ldr	r1, [r7, #12]
 8005cda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	441a      	add	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	22ff      	movs	r2, #255	@ 0xff
 8005d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	22ff      	movs	r2, #255	@ 0xff
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d114      	bne.n	8005d4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01a      	beq.n	8005d60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3310      	adds	r3, #16
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fd04 	bl	800773c <xTaskRemoveFromEventList>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d012      	beq.n	8005d60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <xQueueGenericReset+0xd0>)
 8005d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	e009      	b.n	8005d60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3310      	adds	r3, #16
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fef1 	bl	8005b38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3324      	adds	r3, #36	@ 0x24
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff feec 	bl	8005b38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d60:	f002 fd5c 	bl	800881c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d64:	2301      	movs	r3, #1
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08e      	sub	sp, #56	@ 0x38
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	e7fd      	b.n	8005d9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <xQueueGenericCreateStatic+0x56>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <xQueueGenericCreateStatic+0x5a>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <xQueueGenericCreateStatic+0x5c>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	623b      	str	r3, [r7, #32]
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <xQueueGenericCreateStatic+0x84>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <xQueueGenericCreateStatic+0x88>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <xQueueGenericCreateStatic+0x8a>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10b      	bne.n	8005e1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	61fb      	str	r3, [r7, #28]
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	e7fd      	b.n	8005e16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e1a:	2350      	movs	r3, #80	@ 0x50
 8005e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b50      	cmp	r3, #80	@ 0x50
 8005e22:	d00b      	beq.n	8005e3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	61bb      	str	r3, [r7, #24]
}
 8005e36:	bf00      	nop
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00d      	beq.n	8005e64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f840 	bl	8005ee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3730      	adds	r7, #48	@ 0x30
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b08a      	sub	sp, #40	@ 0x28
 8005e72:	af02      	add	r7, sp, #8
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	613b      	str	r3, [r7, #16]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	3350      	adds	r3, #80	@ 0x50
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f002 fda7 	bl	80089fc <pvPortMalloc>
 8005eae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d011      	beq.n	8005eda <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	3350      	adds	r3, #80	@ 0x50
 8005ebe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ec8:	79fa      	ldrb	r2, [r7, #7]
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f805 	bl	8005ee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005eda:	69bb      	ldr	r3, [r7, #24]
	}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d103      	bne.n	8005f00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f12:	2101      	movs	r1, #1
 8005f14:	69b8      	ldr	r0, [r7, #24]
 8005f16:	f7ff fec3 	bl	8005ca0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2100      	movs	r1, #0
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f911 	bl	8006178 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	4603      	mov	r3, r0
 8005f66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	461a      	mov	r2, r3
 8005f74:	6939      	ldr	r1, [r7, #16]
 8005f76:	6978      	ldr	r0, [r7, #20]
 8005f78:	f7ff ff79 	bl	8005e6e <xQueueGenericCreate>
 8005f7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff ffd3 	bl	8005f2a <prvInitialiseMutex>

		return xNewQueue;
 8005f84:	68fb      	ldr	r3, [r7, #12]
	}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b088      	sub	sp, #32
 8005f92:	af02      	add	r7, sp, #8
 8005f94:	4603      	mov	r3, r0
 8005f96:	6039      	str	r1, [r7, #0]
 8005f98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	6939      	ldr	r1, [r7, #16]
 8005fac:	6978      	ldr	r0, [r7, #20]
 8005fae:	f7ff fee1 	bl	8005d74 <xQueueGenericCreateStatic>
 8005fb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff ffb8 	bl	8005f2a <prvInitialiseMutex>

		return xNewQueue;
 8005fba:	68fb      	ldr	r3, [r7, #12]
	}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60fb      	str	r3, [r7, #12]
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	689c      	ldr	r4, [r3, #8]
 8005ff2:	f001 fd63 	bl	8007abc <xTaskGetCurrentTaskHandle>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	d111      	bne.n	8006020 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	1e5a      	subs	r2, r3, #1
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800600e:	2300      	movs	r3, #0
 8006010:	2200      	movs	r2, #0
 8006012:	2100      	movs	r1, #0
 8006014:	6938      	ldr	r0, [r7, #16]
 8006016:	f000 f8af 	bl	8006178 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800601a:	2301      	movs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e001      	b.n	8006024 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006024:	697b      	ldr	r3, [r7, #20]
	}
 8006026:	4618      	mov	r0, r3
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	bd90      	pop	{r4, r7, pc}

0800602e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800602e:	b590      	push	{r4, r7, lr}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	60fb      	str	r3, [r7, #12]
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	e7fd      	b.n	8006056 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	689c      	ldr	r4, [r3, #8]
 800605e:	f001 fd2d 	bl	8007abc <xTaskGetCurrentTaskHandle>
 8006062:	4603      	mov	r3, r0
 8006064:	429c      	cmp	r4, r3
 8006066:	d107      	bne.n	8006078 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006072:	2301      	movs	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e00c      	b.n	8006092 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f000 fb8e 	bl	800679c <xQueueSemaphoreTake>
 8006080:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006092:	697b      	ldr	r3, [r7, #20]
	}
 8006094:	4618      	mov	r0, r3
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	bd90      	pop	{r4, r7, pc}

0800609c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	@ 0x28
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10b      	bne.n	80060c6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	61bb      	str	r3, [r7, #24]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d90b      	bls.n	80060e6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	617b      	str	r3, [r7, #20]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80060e6:	2302      	movs	r3, #2
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	2100      	movs	r1, #0
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff fe3f 	bl	8005d74 <xQueueGenericCreateStatic>
 80060f6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006104:	69fb      	ldr	r3, [r7, #28]
	}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	613b      	str	r3, [r7, #16]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d90b      	bls.n	8006156 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60fb      	str	r3, [r7, #12]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006156:	2202      	movs	r2, #2
 8006158:	2100      	movs	r1, #0
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fe87 	bl	8005e6e <xQueueGenericCreate>
 8006160:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800616e:	697b      	ldr	r3, [r7, #20]
	}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08e      	sub	sp, #56	@ 0x38
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006186:	2300      	movs	r3, #0
 8006188:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <xQueueGenericSend+0x34>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <xQueueGenericSend+0x42>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <xQueueGenericSend+0x46>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <xQueueGenericSend+0x48>
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10b      	bne.n	80061dc <xQueueGenericSend+0x64>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061d6:	bf00      	nop
 80061d8:	bf00      	nop
 80061da:	e7fd      	b.n	80061d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d103      	bne.n	80061ea <xQueueGenericSend+0x72>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <xQueueGenericSend+0x76>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <xQueueGenericSend+0x78>
 80061ee:	2300      	movs	r3, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <xQueueGenericSend+0x94>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	623b      	str	r3, [r7, #32]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800620c:	f001 fc66 	bl	8007adc <xTaskGetSchedulerState>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <xQueueGenericSend+0xa4>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <xQueueGenericSend+0xa8>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <xQueueGenericSend+0xaa>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <xQueueGenericSend+0xc6>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	61fb      	str	r3, [r7, #28]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800623e:	f002 fabb 	bl	80087b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624a:	429a      	cmp	r2, r3
 800624c:	d302      	bcc.n	8006254 <xQueueGenericSend+0xdc>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d129      	bne.n	80062a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800625a:	f000 fc6d 	bl	8006b38 <prvCopyDataToQueue>
 800625e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	2b00      	cmp	r3, #0
 8006266:	d010      	beq.n	800628a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	3324      	adds	r3, #36	@ 0x24
 800626c:	4618      	mov	r0, r3
 800626e:	f001 fa65 	bl	800773c <xTaskRemoveFromEventList>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006278:	4b3f      	ldr	r3, [pc, #252]	@ (8006378 <xQueueGenericSend+0x200>)
 800627a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	e00a      	b.n	80062a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d007      	beq.n	80062a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006290:	4b39      	ldr	r3, [pc, #228]	@ (8006378 <xQueueGenericSend+0x200>)
 8006292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062a0:	f002 fabc 	bl	800881c <vPortExitCritical>
				return pdPASS;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e063      	b.n	8006370 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d103      	bne.n	80062b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062ae:	f002 fab5 	bl	800881c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e05c      	b.n	8006370 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062bc:	f107 0314 	add.w	r3, r7, #20
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 fa9f 	bl	8007804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062c6:	2301      	movs	r3, #1
 80062c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ca:	f002 faa7 	bl	800881c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ce:	f001 f80f 	bl	80072f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062d2:	f002 fa71 	bl	80087b8 <vPortEnterCritical>
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062dc:	b25b      	sxtb	r3, r3
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062e2:	d103      	bne.n	80062ec <xQueueGenericSend+0x174>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062f2:	b25b      	sxtb	r3, r3
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062f8:	d103      	bne.n	8006302 <xQueueGenericSend+0x18a>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006302:	f002 fa8b 	bl	800881c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006306:	1d3a      	adds	r2, r7, #4
 8006308:	f107 0314 	add.w	r3, r7, #20
 800630c:	4611      	mov	r1, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fa8e 	bl	8007830 <xTaskCheckForTimeOut>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d124      	bne.n	8006364 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800631a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800631c:	f000 fd04 	bl	8006d28 <prvIsQueueFull>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d018      	beq.n	8006358 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	3310      	adds	r3, #16
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	4611      	mov	r1, r2
 800632e:	4618      	mov	r0, r3
 8006330:	f001 f9b2 	bl	8007698 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006336:	f000 fc8f 	bl	8006c58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800633a:	f000 ffe7 	bl	800730c <xTaskResumeAll>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	f47f af7c 	bne.w	800623e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006346:	4b0c      	ldr	r3, [pc, #48]	@ (8006378 <xQueueGenericSend+0x200>)
 8006348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	e772      	b.n	800623e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006358:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800635a:	f000 fc7d 	bl	8006c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800635e:	f000 ffd5 	bl	800730c <xTaskResumeAll>
 8006362:	e76c      	b.n	800623e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006366:	f000 fc77 	bl	8006c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800636a:	f000 ffcf 	bl	800730c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800636e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006370:	4618      	mov	r0, r3
 8006372:	3738      	adds	r7, #56	@ 0x38
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b090      	sub	sp, #64	@ 0x40
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d103      	bne.n	80063ba <xQueueGenericSendFromISR+0x3e>
 80063b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <xQueueGenericSendFromISR+0x42>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <xQueueGenericSendFromISR+0x44>
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d103      	bne.n	80063ea <xQueueGenericSendFromISR+0x6e>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <xQueueGenericSendFromISR+0x72>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xQueueGenericSendFromISR+0x74>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	623b      	str	r3, [r7, #32]
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800640c:	f002 fab4 	bl	8008978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006410:	f3ef 8211 	mrs	r2, BASEPRI
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	61fa      	str	r2, [r7, #28]
 8006426:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006428:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006434:	429a      	cmp	r2, r3
 8006436:	d302      	bcc.n	800643e <xQueueGenericSendFromISR+0xc2>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d12f      	bne.n	800649e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800643e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006440:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006444:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	68b9      	ldr	r1, [r7, #8]
 8006452:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006454:	f000 fb70 	bl	8006b38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006458:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006460:	d112      	bne.n	8006488 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	3324      	adds	r3, #36	@ 0x24
 800646e:	4618      	mov	r0, r3
 8006470:	f001 f964 	bl	800773c <xTaskRemoveFromEventList>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e007      	b.n	8006498 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006488:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800648c:	3301      	adds	r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	b25a      	sxtb	r2, r3
 8006492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006498:	2301      	movs	r3, #1
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800649c:	e001      	b.n	80064a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3740      	adds	r7, #64	@ 0x40
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08e      	sub	sp, #56	@ 0x38
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	623b      	str	r3, [r7, #32]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	61fb      	str	r3, [r7, #28]
}
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	e7fd      	b.n	8006500 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <xQueueGiveFromISR+0x5c>
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <xQueueGiveFromISR+0x60>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <xQueueGiveFromISR+0x62>
 8006518:	2300      	movs	r3, #0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	61bb      	str	r3, [r7, #24]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006536:	f002 fa1f 	bl	8008978 <vPortValidateInterruptPriority>
	__asm volatile
 800653a:	f3ef 8211 	mrs	r2, BASEPRI
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	617a      	str	r2, [r7, #20]
 8006550:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006552:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006554:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006562:	429a      	cmp	r2, r3
 8006564:	d22b      	bcs.n	80065be <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800656c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006578:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006580:	d112      	bne.n	80065a8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	d016      	beq.n	80065b8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	3324      	adds	r3, #36	@ 0x24
 800658e:	4618      	mov	r0, r3
 8006590:	f001 f8d4 	bl	800773c <xTaskRemoveFromEventList>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00e      	beq.n	80065b8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2201      	movs	r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e007      	b.n	80065b8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ac:	3301      	adds	r3, #1
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	b25a      	sxtb	r2, r3
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80065b8:	2301      	movs	r3, #1
 80065ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80065bc:	e001      	b.n	80065c2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f383 8811 	msr	BASEPRI, r3
}
 80065cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3738      	adds	r7, #56	@ 0x38
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	@ 0x30
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065e4:	2300      	movs	r3, #0
 80065e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10b      	bne.n	800660a <xQueueReceive+0x32>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	623b      	str	r3, [r7, #32]
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	e7fd      	b.n	8006606 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d103      	bne.n	8006618 <xQueueReceive+0x40>
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <xQueueReceive+0x44>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <xQueueReceive+0x46>
 800661c:	2300      	movs	r3, #0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <xQueueReceive+0x62>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	61fb      	str	r3, [r7, #28]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800663a:	f001 fa4f 	bl	8007adc <xTaskGetSchedulerState>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d102      	bne.n	800664a <xQueueReceive+0x72>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <xQueueReceive+0x76>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <xQueueReceive+0x78>
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <xQueueReceive+0x94>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	61bb      	str	r3, [r7, #24]
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800666c:	f002 f8a4 	bl	80087b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006674:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01f      	beq.n	80066bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006680:	f000 fac4 	bl	8006c0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	1e5a      	subs	r2, r3, #1
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00f      	beq.n	80066b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	3310      	adds	r3, #16
 8006698:	4618      	mov	r0, r3
 800669a:	f001 f84f 	bl	800773c <xTaskRemoveFromEventList>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006798 <xQueueReceive+0x1c0>)
 80066a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066b4:	f002 f8b2 	bl	800881c <vPortExitCritical>
				return pdPASS;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e069      	b.n	8006790 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066c2:	f002 f8ab 	bl	800881c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e062      	b.n	8006790 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066d0:	f107 0310 	add.w	r3, r7, #16
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 f895 	bl	8007804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066de:	f002 f89d 	bl	800881c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066e2:	f000 fe05 	bl	80072f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066e6:	f002 f867 	bl	80087b8 <vPortEnterCritical>
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066f0:	b25b      	sxtb	r3, r3
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066f6:	d103      	bne.n	8006700 <xQueueReceive+0x128>
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006706:	b25b      	sxtb	r3, r3
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800670c:	d103      	bne.n	8006716 <xQueueReceive+0x13e>
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006716:	f002 f881 	bl	800881c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800671a:	1d3a      	adds	r2, r7, #4
 800671c:	f107 0310 	add.w	r3, r7, #16
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f001 f884 	bl	8007830 <xTaskCheckForTimeOut>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d123      	bne.n	8006776 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800672e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006730:	f000 fae4 	bl	8006cfc <prvIsQueueEmpty>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d017      	beq.n	800676a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	3324      	adds	r3, #36	@ 0x24
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4611      	mov	r1, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f000 ffa8 	bl	8007698 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800674a:	f000 fa85 	bl	8006c58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800674e:	f000 fddd 	bl	800730c <xTaskResumeAll>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d189      	bne.n	800666c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006758:	4b0f      	ldr	r3, [pc, #60]	@ (8006798 <xQueueReceive+0x1c0>)
 800675a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	e780      	b.n	800666c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800676a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800676c:	f000 fa74 	bl	8006c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006770:	f000 fdcc 	bl	800730c <xTaskResumeAll>
 8006774:	e77a      	b.n	800666c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006778:	f000 fa6e 	bl	8006c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800677c:	f000 fdc6 	bl	800730c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006780:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006782:	f000 fabb 	bl	8006cfc <prvIsQueueEmpty>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	f43f af6f 	beq.w	800666c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800678e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006790:	4618      	mov	r0, r3
 8006792:	3730      	adds	r7, #48	@ 0x30
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08e      	sub	sp, #56	@ 0x38
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067a6:	2300      	movs	r3, #0
 80067a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	623b      	str	r3, [r7, #32]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	61fb      	str	r3, [r7, #28]
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	e7fd      	b.n	80067ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067f0:	f001 f974 	bl	8007adc <xTaskGetSchedulerState>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <xQueueSemaphoreTake+0x64>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <xQueueSemaphoreTake+0x68>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <xQueueSemaphoreTake+0x6a>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	61bb      	str	r3, [r7, #24]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006822:	f001 ffc9 	bl	80087b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d024      	beq.n	800687c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	1e5a      	subs	r2, r3, #1
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800683a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006842:	f001 fac5 	bl	8007dd0 <pvTaskIncrementMutexHeldCount>
 8006846:	4602      	mov	r2, r0
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800684c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00f      	beq.n	8006874 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	3310      	adds	r3, #16
 8006858:	4618      	mov	r0, r3
 800685a:	f000 ff6f 	bl	800773c <xTaskRemoveFromEventList>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006864:	4b54      	ldr	r3, [pc, #336]	@ (80069b8 <xQueueSemaphoreTake+0x21c>)
 8006866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006874:	f001 ffd2 	bl	800881c <vPortExitCritical>
				return pdPASS;
 8006878:	2301      	movs	r3, #1
 800687a:	e098      	b.n	80069ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d112      	bne.n	80068a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	617b      	str	r3, [r7, #20]
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	e7fd      	b.n	800689c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80068a0:	f001 ffbc 	bl	800881c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e082      	b.n	80069ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068ae:	f107 030c 	add.w	r3, r7, #12
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 ffa6 	bl	8007804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068bc:	f001 ffae 	bl	800881c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068c0:	f000 fd16 	bl	80072f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068c4:	f001 ff78 	bl	80087b8 <vPortEnterCritical>
 80068c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068ce:	b25b      	sxtb	r3, r3
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068d4:	d103      	bne.n	80068de <xQueueSemaphoreTake+0x142>
 80068d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068ea:	d103      	bne.n	80068f4 <xQueueSemaphoreTake+0x158>
 80068ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068f4:	f001 ff92 	bl	800881c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068f8:	463a      	mov	r2, r7
 80068fa:	f107 030c 	add.w	r3, r7, #12
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f000 ff95 	bl	8007830 <xTaskCheckForTimeOut>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d132      	bne.n	8006972 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800690c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800690e:	f000 f9f5 	bl	8006cfc <prvIsQueueEmpty>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d026      	beq.n	8006966 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006920:	f001 ff4a 	bl	80087b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	4618      	mov	r0, r3
 800692a:	f001 f8f5 	bl	8007b18 <xTaskPriorityInherit>
 800692e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006930:	f001 ff74 	bl	800881c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006936:	3324      	adds	r3, #36	@ 0x24
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	4611      	mov	r1, r2
 800693c:	4618      	mov	r0, r3
 800693e:	f000 feab 	bl	8007698 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006942:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006944:	f000 f988 	bl	8006c58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006948:	f000 fce0 	bl	800730c <xTaskResumeAll>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	f47f af67 	bne.w	8006822 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006954:	4b18      	ldr	r3, [pc, #96]	@ (80069b8 <xQueueSemaphoreTake+0x21c>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	e75d      	b.n	8006822 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006966:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006968:	f000 f976 	bl	8006c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800696c:	f000 fcce 	bl	800730c <xTaskResumeAll>
 8006970:	e757      	b.n	8006822 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006972:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006974:	f000 f970 	bl	8006c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006978:	f000 fcc8 	bl	800730c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800697c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800697e:	f000 f9bd 	bl	8006cfc <prvIsQueueEmpty>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	f43f af4c 	beq.w	8006822 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00d      	beq.n	80069ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006990:	f001 ff12 	bl	80087b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006994:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006996:	f000 f8b7 	bl	8006b08 <prvGetDisinheritPriorityAfterTimeout>
 800699a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800699c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 f990 	bl	8007cc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80069a8:	f001 ff38 	bl	800881c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3738      	adds	r7, #56	@ 0x38
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	@ 0x38
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	623b      	str	r3, [r7, #32]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <xQueueReceiveFromISR+0x3c>
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <xQueueReceiveFromISR+0x40>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <xQueueReceiveFromISR+0x42>
 80069fc:	2300      	movs	r3, #0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	61fb      	str	r3, [r7, #28]
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop
 8006a18:	e7fd      	b.n	8006a16 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a1a:	f001 ffad 	bl	8008978 <vPortValidateInterruptPriority>
	__asm volatile
 8006a1e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	61ba      	str	r2, [r7, #24]
 8006a34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d02f      	beq.n	8006aa6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a54:	f000 f8da 	bl	8006c0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	1e5a      	subs	r2, r3, #1
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a68:	d112      	bne.n	8006a90 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d016      	beq.n	8006aa0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	3310      	adds	r3, #16
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fe60 	bl	800773c <xTaskRemoveFromEventList>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e007      	b.n	8006aa0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a94:	3301      	adds	r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	b25a      	sxtb	r2, r3
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa4:	e001      	b.n	8006aaa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f383 8811 	msr	BASEPRI, r3
}
 8006ab4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3738      	adds	r7, #56	@ 0x38
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <vQueueDelete+0x2a>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60bb      	str	r3, [r7, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f95e 	bl	8006dac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d102      	bne.n	8006b00 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f002 f84c 	bl	8008b98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006b00:	bf00      	nop
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d006      	beq.n	8006b26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e001      	b.n	8006b2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
	}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10d      	bne.n	8006b72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d14d      	bne.n	8006bfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 f840 	bl	8007be8 <xTaskPriorityDisinherit>
 8006b68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	609a      	str	r2, [r3, #8]
 8006b70:	e043      	b.n	8006bfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d119      	bne.n	8006bac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6858      	ldr	r0, [r3, #4]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	461a      	mov	r2, r3
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	f002 fe0f 	bl	80097a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d32b      	bcc.n	8006bfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	e026      	b.n	8006bfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68d8      	ldr	r0, [r3, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	f002 fdf5 	bl	80097a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc4:	425b      	negs	r3, r3
 8006bc6:	441a      	add	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d207      	bcs.n	8006be8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be0:	425b      	negs	r3, r3
 8006be2:	441a      	add	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d105      	bne.n	8006bfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c02:	697b      	ldr	r3, [r7, #20]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d018      	beq.n	8006c50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c26:	441a      	add	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d303      	bcc.n	8006c40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68d9      	ldr	r1, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6838      	ldr	r0, [r7, #0]
 8006c4c:	f002 fdab 	bl	80097a6 <memcpy>
	}
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c60:	f001 fdaa 	bl	80087b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c6c:	e011      	b.n	8006c92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d012      	beq.n	8006c9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3324      	adds	r3, #36	@ 0x24
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fd5e 	bl	800773c <xTaskRemoveFromEventList>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c86:	f000 fe37 	bl	80078f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dce9      	bgt.n	8006c6e <prvUnlockQueue+0x16>
 8006c9a:	e000      	b.n	8006c9e <prvUnlockQueue+0x46>
					break;
 8006c9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	22ff      	movs	r2, #255	@ 0xff
 8006ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ca6:	f001 fdb9 	bl	800881c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006caa:	f001 fd85 	bl	80087b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cb6:	e011      	b.n	8006cdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d012      	beq.n	8006ce6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3310      	adds	r3, #16
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fd39 	bl	800773c <xTaskRemoveFromEventList>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cd0:	f000 fe12 	bl	80078f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	dce9      	bgt.n	8006cb8 <prvUnlockQueue+0x60>
 8006ce4:	e000      	b.n	8006ce8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ce6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	22ff      	movs	r2, #255	@ 0xff
 8006cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006cf0:	f001 fd94 	bl	800881c <vPortExitCritical>
}
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d04:	f001 fd58 	bl	80087b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d10:	2301      	movs	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	e001      	b.n	8006d1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d1a:	f001 fd7f 	bl	800881c <vPortExitCritical>

	return xReturn;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d30:	f001 fd42 	bl	80087b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d102      	bne.n	8006d46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d40:	2301      	movs	r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e001      	b.n	8006d4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d4a:	f001 fd67 	bl	800881c <vPortExitCritical>

	return xReturn;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	e014      	b.n	8006d92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d68:	4a0f      	ldr	r2, [pc, #60]	@ (8006da8 <vQueueAddToRegistry+0x50>)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10b      	bne.n	8006d8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d74:	490c      	ldr	r1, [pc, #48]	@ (8006da8 <vQueueAddToRegistry+0x50>)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006da8 <vQueueAddToRegistry+0x50>)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	4413      	add	r3, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d8a:	e006      	b.n	8006d9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b07      	cmp	r3, #7
 8006d96:	d9e7      	bls.n	8006d68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	200008bc 	.word	0x200008bc

08006dac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	e016      	b.n	8006de8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006dba:	4a10      	ldr	r2, [pc, #64]	@ (8006dfc <vQueueUnregisterQueue+0x50>)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	4413      	add	r3, r2
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d10b      	bne.n	8006de2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006dca:	4a0c      	ldr	r2, [pc, #48]	@ (8006dfc <vQueueUnregisterQueue+0x50>)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2100      	movs	r1, #0
 8006dd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006dd4:	4a09      	ldr	r2, [pc, #36]	@ (8006dfc <vQueueUnregisterQueue+0x50>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4413      	add	r3, r2
 8006ddc:	2200      	movs	r2, #0
 8006dde:	605a      	str	r2, [r3, #4]
				break;
 8006de0:	e006      	b.n	8006df0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b07      	cmp	r3, #7
 8006dec:	d9e5      	bls.n	8006dba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	200008bc 	.word	0x200008bc

08006e00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e10:	f001 fcd2 	bl	80087b8 <vPortEnterCritical>
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e1a:	b25b      	sxtb	r3, r3
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e20:	d103      	bne.n	8006e2a <vQueueWaitForMessageRestricted+0x2a>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e30:	b25b      	sxtb	r3, r3
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e36:	d103      	bne.n	8006e40 <vQueueWaitForMessageRestricted+0x40>
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e40:	f001 fcec 	bl	800881c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d106      	bne.n	8006e5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	3324      	adds	r3, #36	@ 0x24
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	68b9      	ldr	r1, [r7, #8]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fc45 	bl	80076e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e5a:	6978      	ldr	r0, [r7, #20]
 8006e5c:	f7ff fefc 	bl	8006c58 <prvUnlockQueue>
	}
 8006e60:	bf00      	nop
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08e      	sub	sp, #56	@ 0x38
 8006e6c:	af04      	add	r7, sp, #16
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	623b      	str	r3, [r7, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	e7fd      	b.n	8006e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10b      	bne.n	8006eb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	61fb      	str	r3, [r7, #28]
}
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	e7fd      	b.n	8006eae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eb2:	235c      	movs	r3, #92	@ 0x5c
 8006eb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b5c      	cmp	r3, #92	@ 0x5c
 8006eba:	d00b      	beq.n	8006ed4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	61bb      	str	r3, [r7, #24]
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ed4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01e      	beq.n	8006f1a <xTaskCreateStatic+0xb2>
 8006edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01b      	beq.n	8006f1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	9303      	str	r3, [sp, #12]
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	9302      	str	r3, [sp, #8]
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f850 	bl	8006fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f14:	f000 f8de 	bl	80070d4 <prvAddNewTaskToReadyList>
 8006f18:	e001      	b.n	8006f1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f1e:	697b      	ldr	r3, [r7, #20]
	}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3728      	adds	r7, #40	@ 0x28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08c      	sub	sp, #48	@ 0x30
 8006f2c:	af04      	add	r7, sp, #16
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	4613      	mov	r3, r2
 8006f36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 fd5d 	bl	80089fc <pvPortMalloc>
 8006f42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00e      	beq.n	8006f68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f4a:	205c      	movs	r0, #92	@ 0x5c
 8006f4c:	f001 fd56 	bl	80089fc <pvPortMalloc>
 8006f50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f5e:	e005      	b.n	8006f6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f60:	6978      	ldr	r0, [r7, #20]
 8006f62:	f001 fe19 	bl	8008b98 <vPortFree>
 8006f66:	e001      	b.n	8006f6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d017      	beq.n	8006fa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9303      	str	r3, [sp, #12]
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f80e 	bl	8006fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f96:	69f8      	ldr	r0, [r7, #28]
 8006f98:	f000 f89c 	bl	80070d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	e002      	b.n	8006fa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
	}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b088      	sub	sp, #32
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
 8006fbe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	21a5      	movs	r1, #165	@ 0xa5
 8006fcc:	f002 fb60 	bl	8009690 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f023 0307 	bic.w	r3, r3, #7
 8006fe8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	617b      	str	r3, [r7, #20]
}
 8007006:	bf00      	nop
 8007008:	bf00      	nop
 800700a:	e7fd      	b.n	8007008 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d01f      	beq.n	8007052 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	e012      	b.n	800703e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	7819      	ldrb	r1, [r3, #0]
 8007020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	3334      	adds	r3, #52	@ 0x34
 8007028:	460a      	mov	r2, r1
 800702a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d006      	beq.n	8007046 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	3301      	adds	r3, #1
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2b0f      	cmp	r3, #15
 8007042:	d9e9      	bls.n	8007018 <prvInitialiseNewTask+0x66>
 8007044:	e000      	b.n	8007048 <prvInitialiseNewTask+0x96>
			{
				break;
 8007046:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007050:	e003      	b.n	800705a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705c:	2b37      	cmp	r3, #55	@ 0x37
 800705e:	d901      	bls.n	8007064 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007060:	2337      	movs	r3, #55	@ 0x37
 8007062:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007068:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800706e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	2200      	movs	r2, #0
 8007074:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	3304      	adds	r3, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fd7c 	bl	8005b78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	3318      	adds	r3, #24
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe fd77 	bl	8005b78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800709e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	2200      	movs	r2, #0
 80070a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	68f9      	ldr	r1, [r7, #12]
 80070b2:	69b8      	ldr	r0, [r7, #24]
 80070b4:	f001 fa4e 	bl	8008554 <pxPortInitialiseStack>
 80070b8:	4602      	mov	r2, r0
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ca:	bf00      	nop
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070dc:	f001 fb6c 	bl	80087b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007198 <prvAddNewTaskToReadyList+0xc4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007198 <prvAddNewTaskToReadyList+0xc4>)
 80070e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070ea:	4b2c      	ldr	r3, [pc, #176]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070f2:	4a2a      	ldr	r2, [pc, #168]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070f8:	4b27      	ldr	r3, [pc, #156]	@ (8007198 <prvAddNewTaskToReadyList+0xc4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d110      	bne.n	8007122 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007100:	f000 fc1e 	bl	8007940 <prvInitialiseTaskLists>
 8007104:	e00d      	b.n	8007122 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007106:	4b26      	ldr	r3, [pc, #152]	@ (80071a0 <prvAddNewTaskToReadyList+0xcc>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800710e:	4b23      	ldr	r3, [pc, #140]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	429a      	cmp	r2, r3
 800711a:	d802      	bhi.n	8007122 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800711c:	4a1f      	ldr	r2, [pc, #124]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007122:	4b20      	ldr	r3, [pc, #128]	@ (80071a4 <prvAddNewTaskToReadyList+0xd0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	4a1e      	ldr	r2, [pc, #120]	@ (80071a4 <prvAddNewTaskToReadyList+0xd0>)
 800712a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800712c:	4b1d      	ldr	r3, [pc, #116]	@ (80071a4 <prvAddNewTaskToReadyList+0xd0>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007138:	4b1b      	ldr	r3, [pc, #108]	@ (80071a8 <prvAddNewTaskToReadyList+0xd4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d903      	bls.n	8007148 <prvAddNewTaskToReadyList+0x74>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	4a18      	ldr	r2, [pc, #96]	@ (80071a8 <prvAddNewTaskToReadyList+0xd4>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4a15      	ldr	r2, [pc, #84]	@ (80071ac <prvAddNewTaskToReadyList+0xd8>)
 8007156:	441a      	add	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f7fe fd17 	bl	8005b92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007164:	f001 fb5a 	bl	800881c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007168:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <prvAddNewTaskToReadyList+0xcc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00e      	beq.n	800718e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007170:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <prvAddNewTaskToReadyList+0xc8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	429a      	cmp	r2, r3
 800717c:	d207      	bcs.n	800718e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800717e:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <prvAddNewTaskToReadyList+0xdc>)
 8007180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000dd0 	.word	0x20000dd0
 800719c:	200008fc 	.word	0x200008fc
 80071a0:	20000ddc 	.word	0x20000ddc
 80071a4:	20000dec 	.word	0x20000dec
 80071a8:	20000dd8 	.word	0x20000dd8
 80071ac:	20000900 	.word	0x20000900
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d018      	beq.n	80071f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071c6:	4b14      	ldr	r3, [pc, #80]	@ (8007218 <vTaskDelay+0x64>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <vTaskDelay+0x32>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60bb      	str	r3, [r7, #8]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071e6:	f000 f883 	bl	80072f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fe03 	bl	8007df8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071f2:	f000 f88b 	bl	800730c <xTaskResumeAll>
 80071f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d107      	bne.n	800720e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80071fe:	4b07      	ldr	r3, [pc, #28]	@ (800721c <vTaskDelay+0x68>)
 8007200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000df8 	.word	0x20000df8
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08a      	sub	sp, #40	@ 0x28
 8007224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800722e:	463a      	mov	r2, r7
 8007230:	1d39      	adds	r1, r7, #4
 8007232:	f107 0308 	add.w	r3, r7, #8
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fc4a 	bl	8005ad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	9202      	str	r2, [sp, #8]
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	2300      	movs	r3, #0
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	2300      	movs	r3, #0
 800724c:	460a      	mov	r2, r1
 800724e:	4922      	ldr	r1, [pc, #136]	@ (80072d8 <vTaskStartScheduler+0xb8>)
 8007250:	4822      	ldr	r0, [pc, #136]	@ (80072dc <vTaskStartScheduler+0xbc>)
 8007252:	f7ff fe09 	bl	8006e68 <xTaskCreateStatic>
 8007256:	4603      	mov	r3, r0
 8007258:	4a21      	ldr	r2, [pc, #132]	@ (80072e0 <vTaskStartScheduler+0xc0>)
 800725a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800725c:	4b20      	ldr	r3, [pc, #128]	@ (80072e0 <vTaskStartScheduler+0xc0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e001      	b.n	800726e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d102      	bne.n	800727a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007274:	f000 fe14 	bl	8007ea0 <xTimerCreateTimerTask>
 8007278:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d116      	bne.n	80072ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	613b      	str	r3, [r7, #16]
}
 8007292:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007294:	4b13      	ldr	r3, [pc, #76]	@ (80072e4 <vTaskStartScheduler+0xc4>)
 8007296:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800729a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800729c:	4b12      	ldr	r3, [pc, #72]	@ (80072e8 <vTaskStartScheduler+0xc8>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072a2:	4b12      	ldr	r3, [pc, #72]	@ (80072ec <vTaskStartScheduler+0xcc>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072a8:	f001 f9e2 	bl	8008670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072ac:	e00f      	b.n	80072ce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b4:	d10b      	bne.n	80072ce <vTaskStartScheduler+0xae>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60fb      	str	r3, [r7, #12]
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	e7fd      	b.n	80072ca <vTaskStartScheduler+0xaa>
}
 80072ce:	bf00      	nop
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	0800a0c8 	.word	0x0800a0c8
 80072dc:	08007911 	.word	0x08007911
 80072e0:	20000df4 	.word	0x20000df4
 80072e4:	20000df0 	.word	0x20000df0
 80072e8:	20000ddc 	.word	0x20000ddc
 80072ec:	20000dd4 	.word	0x20000dd4

080072f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072f4:	4b04      	ldr	r3, [pc, #16]	@ (8007308 <vTaskSuspendAll+0x18>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a03      	ldr	r2, [pc, #12]	@ (8007308 <vTaskSuspendAll+0x18>)
 80072fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072fe:	bf00      	nop
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	20000df8 	.word	0x20000df8

0800730c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800731a:	4b42      	ldr	r3, [pc, #264]	@ (8007424 <xTaskResumeAll+0x118>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <xTaskResumeAll+0x2e>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	603b      	str	r3, [r7, #0]
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	e7fd      	b.n	8007336 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800733a:	f001 fa3d 	bl	80087b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800733e:	4b39      	ldr	r3, [pc, #228]	@ (8007424 <xTaskResumeAll+0x118>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3b01      	subs	r3, #1
 8007344:	4a37      	ldr	r2, [pc, #220]	@ (8007424 <xTaskResumeAll+0x118>)
 8007346:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007348:	4b36      	ldr	r3, [pc, #216]	@ (8007424 <xTaskResumeAll+0x118>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d162      	bne.n	8007416 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007350:	4b35      	ldr	r3, [pc, #212]	@ (8007428 <xTaskResumeAll+0x11c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d05e      	beq.n	8007416 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007358:	e02f      	b.n	80073ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800735a:	4b34      	ldr	r3, [pc, #208]	@ (800742c <xTaskResumeAll+0x120>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3318      	adds	r3, #24
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fc70 	bl	8005c4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3304      	adds	r3, #4
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fc6b 	bl	8005c4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737a:	4b2d      	ldr	r3, [pc, #180]	@ (8007430 <xTaskResumeAll+0x124>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d903      	bls.n	800738a <xTaskResumeAll+0x7e>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007386:	4a2a      	ldr	r2, [pc, #168]	@ (8007430 <xTaskResumeAll+0x124>)
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4a27      	ldr	r2, [pc, #156]	@ (8007434 <xTaskResumeAll+0x128>)
 8007398:	441a      	add	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fe fbf6 	bl	8005b92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073aa:	4b23      	ldr	r3, [pc, #140]	@ (8007438 <xTaskResumeAll+0x12c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d302      	bcc.n	80073ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80073b4:	4b21      	ldr	r3, [pc, #132]	@ (800743c <xTaskResumeAll+0x130>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073ba:	4b1c      	ldr	r3, [pc, #112]	@ (800742c <xTaskResumeAll+0x120>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1cb      	bne.n	800735a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073c8:	f000 fb58 	bl	8007a7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007440 <xTaskResumeAll+0x134>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073d8:	f000 f846 	bl	8007468 <xTaskIncrementTick>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80073e2:	4b16      	ldr	r3, [pc, #88]	@ (800743c <xTaskResumeAll+0x130>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f1      	bne.n	80073d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80073f4:	4b12      	ldr	r3, [pc, #72]	@ (8007440 <xTaskResumeAll+0x134>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073fa:	4b10      	ldr	r3, [pc, #64]	@ (800743c <xTaskResumeAll+0x130>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007402:	2301      	movs	r3, #1
 8007404:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007406:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <xTaskResumeAll+0x138>)
 8007408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007416:	f001 fa01 	bl	800881c <vPortExitCritical>

	return xAlreadyYielded;
 800741a:	68bb      	ldr	r3, [r7, #8]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000df8 	.word	0x20000df8
 8007428:	20000dd0 	.word	0x20000dd0
 800742c:	20000d90 	.word	0x20000d90
 8007430:	20000dd8 	.word	0x20000dd8
 8007434:	20000900 	.word	0x20000900
 8007438:	200008fc 	.word	0x200008fc
 800743c:	20000de4 	.word	0x20000de4
 8007440:	20000de0 	.word	0x20000de0
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800744e:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <xTaskGetTickCount+0x1c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007454:	687b      	ldr	r3, [r7, #4]
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	20000dd4 	.word	0x20000dd4

08007468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007472:	4b4f      	ldr	r3, [pc, #316]	@ (80075b0 <xTaskIncrementTick+0x148>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f040 8090 	bne.w	800759c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800747c:	4b4d      	ldr	r3, [pc, #308]	@ (80075b4 <xTaskIncrementTick+0x14c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007484:	4a4b      	ldr	r2, [pc, #300]	@ (80075b4 <xTaskIncrementTick+0x14c>)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d121      	bne.n	80074d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007490:	4b49      	ldr	r3, [pc, #292]	@ (80075b8 <xTaskIncrementTick+0x150>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	603b      	str	r3, [r7, #0]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <xTaskIncrementTick+0x46>
 80074b2:	4b41      	ldr	r3, [pc, #260]	@ (80075b8 <xTaskIncrementTick+0x150>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	4b40      	ldr	r3, [pc, #256]	@ (80075bc <xTaskIncrementTick+0x154>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a3e      	ldr	r2, [pc, #248]	@ (80075b8 <xTaskIncrementTick+0x150>)
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	4a3e      	ldr	r2, [pc, #248]	@ (80075bc <xTaskIncrementTick+0x154>)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	4b3e      	ldr	r3, [pc, #248]	@ (80075c0 <xTaskIncrementTick+0x158>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3301      	adds	r3, #1
 80074cc:	4a3c      	ldr	r2, [pc, #240]	@ (80075c0 <xTaskIncrementTick+0x158>)
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	f000 fad4 	bl	8007a7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074d4:	4b3b      	ldr	r3, [pc, #236]	@ (80075c4 <xTaskIncrementTick+0x15c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d349      	bcc.n	8007572 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074de:	4b36      	ldr	r3, [pc, #216]	@ (80075b8 <xTaskIncrementTick+0x150>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d104      	bne.n	80074f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e8:	4b36      	ldr	r3, [pc, #216]	@ (80075c4 <xTaskIncrementTick+0x15c>)
 80074ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074ee:	601a      	str	r2, [r3, #0]
					break;
 80074f0:	e03f      	b.n	8007572 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f2:	4b31      	ldr	r3, [pc, #196]	@ (80075b8 <xTaskIncrementTick+0x150>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	429a      	cmp	r2, r3
 8007508:	d203      	bcs.n	8007512 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800750a:	4a2e      	ldr	r2, [pc, #184]	@ (80075c4 <xTaskIncrementTick+0x15c>)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007510:	e02f      	b.n	8007572 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	3304      	adds	r3, #4
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe fb98 	bl	8005c4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	d004      	beq.n	800752e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	3318      	adds	r3, #24
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe fb8f 	bl	8005c4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007532:	4b25      	ldr	r3, [pc, #148]	@ (80075c8 <xTaskIncrementTick+0x160>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d903      	bls.n	8007542 <xTaskIncrementTick+0xda>
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753e:	4a22      	ldr	r2, [pc, #136]	@ (80075c8 <xTaskIncrementTick+0x160>)
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4a1f      	ldr	r2, [pc, #124]	@ (80075cc <xTaskIncrementTick+0x164>)
 8007550:	441a      	add	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	3304      	adds	r3, #4
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f7fe fb1a 	bl	8005b92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007562:	4b1b      	ldr	r3, [pc, #108]	@ (80075d0 <xTaskIncrementTick+0x168>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	429a      	cmp	r2, r3
 800756a:	d3b8      	bcc.n	80074de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800756c:	2301      	movs	r3, #1
 800756e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007570:	e7b5      	b.n	80074de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007572:	4b17      	ldr	r3, [pc, #92]	@ (80075d0 <xTaskIncrementTick+0x168>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007578:	4914      	ldr	r1, [pc, #80]	@ (80075cc <xTaskIncrementTick+0x164>)
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d901      	bls.n	800758e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800758a:	2301      	movs	r3, #1
 800758c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800758e:	4b11      	ldr	r3, [pc, #68]	@ (80075d4 <xTaskIncrementTick+0x16c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007596:	2301      	movs	r3, #1
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	e004      	b.n	80075a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800759c:	4b0e      	ldr	r3, [pc, #56]	@ (80075d8 <xTaskIncrementTick+0x170>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	4a0d      	ldr	r2, [pc, #52]	@ (80075d8 <xTaskIncrementTick+0x170>)
 80075a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075a6:	697b      	ldr	r3, [r7, #20]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000df8 	.word	0x20000df8
 80075b4:	20000dd4 	.word	0x20000dd4
 80075b8:	20000d88 	.word	0x20000d88
 80075bc:	20000d8c 	.word	0x20000d8c
 80075c0:	20000de8 	.word	0x20000de8
 80075c4:	20000df0 	.word	0x20000df0
 80075c8:	20000dd8 	.word	0x20000dd8
 80075cc:	20000900 	.word	0x20000900
 80075d0:	200008fc 	.word	0x200008fc
 80075d4:	20000de4 	.word	0x20000de4
 80075d8:	20000de0 	.word	0x20000de0

080075dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075e2:	4b28      	ldr	r3, [pc, #160]	@ (8007684 <vTaskSwitchContext+0xa8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075ea:	4b27      	ldr	r3, [pc, #156]	@ (8007688 <vTaskSwitchContext+0xac>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075f0:	e042      	b.n	8007678 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80075f2:	4b25      	ldr	r3, [pc, #148]	@ (8007688 <vTaskSwitchContext+0xac>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f8:	4b24      	ldr	r3, [pc, #144]	@ (800768c <vTaskSwitchContext+0xb0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	e011      	b.n	8007624 <vTaskSwitchContext+0x48>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10b      	bne.n	800761e <vTaskSwitchContext+0x42>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	607b      	str	r3, [r7, #4]
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	e7fd      	b.n	800761a <vTaskSwitchContext+0x3e>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3b01      	subs	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	491a      	ldr	r1, [pc, #104]	@ (8007690 <vTaskSwitchContext+0xb4>)
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	440b      	add	r3, r1
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0e3      	beq.n	8007600 <vTaskSwitchContext+0x24>
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4a13      	ldr	r2, [pc, #76]	@ (8007690 <vTaskSwitchContext+0xb4>)
 8007644:	4413      	add	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	605a      	str	r2, [r3, #4]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	3308      	adds	r3, #8
 800765a:	429a      	cmp	r2, r3
 800765c:	d104      	bne.n	8007668 <vTaskSwitchContext+0x8c>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	605a      	str	r2, [r3, #4]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	4a09      	ldr	r2, [pc, #36]	@ (8007694 <vTaskSwitchContext+0xb8>)
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	4a06      	ldr	r2, [pc, #24]	@ (800768c <vTaskSwitchContext+0xb0>)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6013      	str	r3, [r2, #0]
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	20000df8 	.word	0x20000df8
 8007688:	20000de4 	.word	0x20000de4
 800768c:	20000dd8 	.word	0x20000dd8
 8007690:	20000900 	.word	0x20000900
 8007694:	200008fc 	.word	0x200008fc

08007698 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10b      	bne.n	80076c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60fb      	str	r3, [r7, #12]
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	e7fd      	b.n	80076bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076c0:	4b07      	ldr	r3, [pc, #28]	@ (80076e0 <vTaskPlaceOnEventList+0x48>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3318      	adds	r3, #24
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fe fa86 	bl	8005bda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076ce:	2101      	movs	r1, #1
 80076d0:	6838      	ldr	r0, [r7, #0]
 80076d2:	f000 fb91 	bl	8007df8 <prvAddCurrentTaskToDelayedList>
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	200008fc 	.word	0x200008fc

080076e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	617b      	str	r3, [r7, #20]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800770e:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <vTaskPlaceOnEventListRestricted+0x54>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3318      	adds	r3, #24
 8007714:	4619      	mov	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7fe fa3b 	bl	8005b92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007726:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	68b8      	ldr	r0, [r7, #8]
 800772c:	f000 fb64 	bl	8007df8 <prvAddCurrentTaskToDelayedList>
	}
 8007730:	bf00      	nop
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	200008fc 	.word	0x200008fc

0800773c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10b      	bne.n	800776a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60fb      	str	r3, [r7, #12]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	3318      	adds	r3, #24
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fa6c 	bl	8005c4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007774:	4b1d      	ldr	r3, [pc, #116]	@ (80077ec <xTaskRemoveFromEventList+0xb0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d11d      	bne.n	80077b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	3304      	adds	r3, #4
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe fa63 	bl	8005c4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778a:	4b19      	ldr	r3, [pc, #100]	@ (80077f0 <xTaskRemoveFromEventList+0xb4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d903      	bls.n	800779a <xTaskRemoveFromEventList+0x5e>
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	4a16      	ldr	r2, [pc, #88]	@ (80077f0 <xTaskRemoveFromEventList+0xb4>)
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4a13      	ldr	r2, [pc, #76]	@ (80077f4 <xTaskRemoveFromEventList+0xb8>)
 80077a8:	441a      	add	r2, r3
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7fe f9ee 	bl	8005b92 <vListInsertEnd>
 80077b6:	e005      	b.n	80077c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	3318      	adds	r3, #24
 80077bc:	4619      	mov	r1, r3
 80077be:	480e      	ldr	r0, [pc, #56]	@ (80077f8 <xTaskRemoveFromEventList+0xbc>)
 80077c0:	f7fe f9e7 	bl	8005b92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c8:	4b0c      	ldr	r3, [pc, #48]	@ (80077fc <xTaskRemoveFromEventList+0xc0>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d905      	bls.n	80077de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <xTaskRemoveFromEventList+0xc4>)
 80077d8:	2201      	movs	r2, #1
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	e001      	b.n	80077e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077e2:	697b      	ldr	r3, [r7, #20]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20000df8 	.word	0x20000df8
 80077f0:	20000dd8 	.word	0x20000dd8
 80077f4:	20000900 	.word	0x20000900
 80077f8:	20000d90 	.word	0x20000d90
 80077fc:	200008fc 	.word	0x200008fc
 8007800:	20000de4 	.word	0x20000de4

08007804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800780c:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <vTaskInternalSetTimeOutState+0x24>)
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007814:	4b05      	ldr	r3, [pc, #20]	@ (800782c <vTaskInternalSetTimeOutState+0x28>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	605a      	str	r2, [r3, #4]
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	20000de8 	.word	0x20000de8
 800782c:	20000dd4 	.word	0x20000dd4

08007830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	613b      	str	r3, [r7, #16]
}
 8007852:	bf00      	nop
 8007854:	bf00      	nop
 8007856:	e7fd      	b.n	8007854 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10b      	bne.n	8007876 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60fb      	str	r3, [r7, #12]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007876:	f000 ff9f 	bl	80087b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800787a:	4b1d      	ldr	r3, [pc, #116]	@ (80078f0 <xTaskCheckForTimeOut+0xc0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007892:	d102      	bne.n	800789a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]
 8007898:	e023      	b.n	80078e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b15      	ldr	r3, [pc, #84]	@ (80078f4 <xTaskCheckForTimeOut+0xc4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d007      	beq.n	80078b6 <xTaskCheckForTimeOut+0x86>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d302      	bcc.n	80078b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078b0:	2301      	movs	r3, #1
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	e015      	b.n	80078e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d20b      	bcs.n	80078d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ff99 	bl	8007804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	e004      	b.n	80078e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078e2:	f000 ff9b 	bl	800881c <vPortExitCritical>

	return xReturn;
 80078e6:	69fb      	ldr	r3, [r7, #28]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000dd4 	.word	0x20000dd4
 80078f4:	20000de8 	.word	0x20000de8

080078f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078fc:	4b03      	ldr	r3, [pc, #12]	@ (800790c <vTaskMissedYield+0x14>)
 80078fe:	2201      	movs	r2, #1
 8007900:	601a      	str	r2, [r3, #0]
}
 8007902:	bf00      	nop
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	20000de4 	.word	0x20000de4

08007910 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007918:	f000 f852 	bl	80079c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800791c:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <prvIdleTask+0x28>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d9f9      	bls.n	8007918 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007924:	4b05      	ldr	r3, [pc, #20]	@ (800793c <prvIdleTask+0x2c>)
 8007926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007934:	e7f0      	b.n	8007918 <prvIdleTask+0x8>
 8007936:	bf00      	nop
 8007938:	20000900 	.word	0x20000900
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007946:	2300      	movs	r3, #0
 8007948:	607b      	str	r3, [r7, #4]
 800794a:	e00c      	b.n	8007966 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a12      	ldr	r2, [pc, #72]	@ (80079a0 <prvInitialiseTaskLists+0x60>)
 8007958:	4413      	add	r3, r2
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe f8ec 	bl	8005b38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3301      	adds	r3, #1
 8007964:	607b      	str	r3, [r7, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b37      	cmp	r3, #55	@ 0x37
 800796a:	d9ef      	bls.n	800794c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800796c:	480d      	ldr	r0, [pc, #52]	@ (80079a4 <prvInitialiseTaskLists+0x64>)
 800796e:	f7fe f8e3 	bl	8005b38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007972:	480d      	ldr	r0, [pc, #52]	@ (80079a8 <prvInitialiseTaskLists+0x68>)
 8007974:	f7fe f8e0 	bl	8005b38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007978:	480c      	ldr	r0, [pc, #48]	@ (80079ac <prvInitialiseTaskLists+0x6c>)
 800797a:	f7fe f8dd 	bl	8005b38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800797e:	480c      	ldr	r0, [pc, #48]	@ (80079b0 <prvInitialiseTaskLists+0x70>)
 8007980:	f7fe f8da 	bl	8005b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007984:	480b      	ldr	r0, [pc, #44]	@ (80079b4 <prvInitialiseTaskLists+0x74>)
 8007986:	f7fe f8d7 	bl	8005b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800798a:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <prvInitialiseTaskLists+0x78>)
 800798c:	4a05      	ldr	r2, [pc, #20]	@ (80079a4 <prvInitialiseTaskLists+0x64>)
 800798e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007990:	4b0a      	ldr	r3, [pc, #40]	@ (80079bc <prvInitialiseTaskLists+0x7c>)
 8007992:	4a05      	ldr	r2, [pc, #20]	@ (80079a8 <prvInitialiseTaskLists+0x68>)
 8007994:	601a      	str	r2, [r3, #0]
}
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000900 	.word	0x20000900
 80079a4:	20000d60 	.word	0x20000d60
 80079a8:	20000d74 	.word	0x20000d74
 80079ac:	20000d90 	.word	0x20000d90
 80079b0:	20000da4 	.word	0x20000da4
 80079b4:	20000dbc 	.word	0x20000dbc
 80079b8:	20000d88 	.word	0x20000d88
 80079bc:	20000d8c 	.word	0x20000d8c

080079c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079c6:	e019      	b.n	80079fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079c8:	f000 fef6 	bl	80087b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079cc:	4b10      	ldr	r3, [pc, #64]	@ (8007a10 <prvCheckTasksWaitingTermination+0x50>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe f937 	bl	8005c4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079de:	4b0d      	ldr	r3, [pc, #52]	@ (8007a14 <prvCheckTasksWaitingTermination+0x54>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007a14 <prvCheckTasksWaitingTermination+0x54>)
 80079e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <prvCheckTasksWaitingTermination+0x58>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007a18 <prvCheckTasksWaitingTermination+0x58>)
 80079f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079f2:	f000 ff13 	bl	800881c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f810 	bl	8007a1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079fc:	4b06      	ldr	r3, [pc, #24]	@ (8007a18 <prvCheckTasksWaitingTermination+0x58>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e1      	bne.n	80079c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000da4 	.word	0x20000da4
 8007a14:	20000dd0 	.word	0x20000dd0
 8007a18:	20000db8 	.word	0x20000db8

08007a1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d108      	bne.n	8007a40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a32:	4618      	mov	r0, r3
 8007a34:	f001 f8b0 	bl	8008b98 <vPortFree>
				vPortFree( pxTCB );
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 f8ad 	bl	8008b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a3e:	e019      	b.n	8007a74 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d103      	bne.n	8007a52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 f8a4 	bl	8008b98 <vPortFree>
	}
 8007a50:	e010      	b.n	8007a74 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d00b      	beq.n	8007a74 <prvDeleteTCB+0x58>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60fb      	str	r3, [r7, #12]
}
 8007a6e:	bf00      	nop
 8007a70:	bf00      	nop
 8007a72:	e7fd      	b.n	8007a70 <prvDeleteTCB+0x54>
	}
 8007a74:	bf00      	nop
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a82:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <prvResetNextTaskUnblockTime+0x38>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab8 <prvResetNextTaskUnblockTime+0x3c>)
 8007a8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a94:	e008      	b.n	8007aa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a96:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <prvResetNextTaskUnblockTime+0x38>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	4a04      	ldr	r2, [pc, #16]	@ (8007ab8 <prvResetNextTaskUnblockTime+0x3c>)
 8007aa6:	6013      	str	r3, [r2, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	20000d88 	.word	0x20000d88
 8007ab8:	20000df0 	.word	0x20000df0

08007abc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007ac2:	4b05      	ldr	r3, [pc, #20]	@ (8007ad8 <xTaskGetCurrentTaskHandle+0x1c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007ac8:	687b      	ldr	r3, [r7, #4]
	}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	200008fc 	.word	0x200008fc

08007adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b10 <xTaskGetSchedulerState+0x34>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007aea:	2301      	movs	r3, #1
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	e008      	b.n	8007b02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007af0:	4b08      	ldr	r3, [pc, #32]	@ (8007b14 <xTaskGetSchedulerState+0x38>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d102      	bne.n	8007afe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007af8:	2302      	movs	r3, #2
 8007afa:	607b      	str	r3, [r7, #4]
 8007afc:	e001      	b.n	8007b02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007afe:	2300      	movs	r3, #0
 8007b00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b02:	687b      	ldr	r3, [r7, #4]
	}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	20000ddc 	.word	0x20000ddc
 8007b14:	20000df8 	.word	0x20000df8

08007b18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d051      	beq.n	8007bd2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b32:	4b2a      	ldr	r3, [pc, #168]	@ (8007bdc <xTaskPriorityInherit+0xc4>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d241      	bcs.n	8007bc0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	db06      	blt.n	8007b52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b44:	4b25      	ldr	r3, [pc, #148]	@ (8007bdc <xTaskPriorityInherit+0xc4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6959      	ldr	r1, [r3, #20]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4a1f      	ldr	r2, [pc, #124]	@ (8007be0 <xTaskPriorityInherit+0xc8>)
 8007b64:	4413      	add	r3, r2
 8007b66:	4299      	cmp	r1, r3
 8007b68:	d122      	bne.n	8007bb0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe f86c 	bl	8005c4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b74:	4b19      	ldr	r3, [pc, #100]	@ (8007bdc <xTaskPriorityInherit+0xc4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b82:	4b18      	ldr	r3, [pc, #96]	@ (8007be4 <xTaskPriorityInherit+0xcc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d903      	bls.n	8007b92 <xTaskPriorityInherit+0x7a>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8e:	4a15      	ldr	r2, [pc, #84]	@ (8007be4 <xTaskPriorityInherit+0xcc>)
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4a10      	ldr	r2, [pc, #64]	@ (8007be0 <xTaskPriorityInherit+0xc8>)
 8007ba0:	441a      	add	r2, r3
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7fd fff2 	bl	8005b92 <vListInsertEnd>
 8007bae:	e004      	b.n	8007bba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bdc <xTaskPriorityInherit+0xc4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e008      	b.n	8007bd2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bc4:	4b05      	ldr	r3, [pc, #20]	@ (8007bdc <xTaskPriorityInherit+0xc4>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d201      	bcs.n	8007bd2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
	}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	200008fc 	.word	0x200008fc
 8007be0:	20000900 	.word	0x20000900
 8007be4:	20000dd8 	.word	0x20000dd8

08007be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d058      	beq.n	8007cb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8007cbc <xTaskPriorityDisinherit+0xd4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d00b      	beq.n	8007c20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	60fb      	str	r3, [r7, #12]
}
 8007c1a:	bf00      	nop
 8007c1c:	bf00      	nop
 8007c1e:	e7fd      	b.n	8007c1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10b      	bne.n	8007c40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	60bb      	str	r3, [r7, #8]
}
 8007c3a:	bf00      	nop
 8007c3c:	bf00      	nop
 8007c3e:	e7fd      	b.n	8007c3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c44:	1e5a      	subs	r2, r3, #1
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d02c      	beq.n	8007cb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d128      	bne.n	8007cb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	3304      	adds	r3, #4
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fd fff2 	bl	8005c4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c80:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc0 <xTaskPriorityDisinherit+0xd8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d903      	bls.n	8007c90 <xTaskPriorityDisinherit+0xa8>
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc0 <xTaskPriorityDisinherit+0xd8>)
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4a09      	ldr	r2, [pc, #36]	@ (8007cc4 <xTaskPriorityDisinherit+0xdc>)
 8007c9e:	441a      	add	r2, r3
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f7fd ff73 	bl	8005b92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cac:	2301      	movs	r3, #1
 8007cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cb0:	697b      	ldr	r3, [r7, #20]
	}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	200008fc 	.word	0x200008fc
 8007cc0:	20000dd8 	.word	0x20000dd8
 8007cc4:	20000900 	.word	0x20000900

08007cc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d06c      	beq.n	8007dba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10b      	bne.n	8007d00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	60fb      	str	r3, [r7, #12]
}
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	e7fd      	b.n	8007cfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d902      	bls.n	8007d10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	e002      	b.n	8007d16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d04c      	beq.n	8007dba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d147      	bne.n	8007dba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d2a:	4b26      	ldr	r3, [pc, #152]	@ (8007dc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d10b      	bne.n	8007d4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	60bb      	str	r3, [r7, #8]
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	e7fd      	b.n	8007d48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	db04      	blt.n	8007d6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	6959      	ldr	r1, [r3, #20]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4a13      	ldr	r2, [pc, #76]	@ (8007dc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d7a:	4413      	add	r3, r2
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	d11c      	bne.n	8007dba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fd ff61 	bl	8005c4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007dcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d903      	bls.n	8007d9e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dcc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4a07      	ldr	r2, [pc, #28]	@ (8007dc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007dac:	441a      	add	r2, r3
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fd feec 	bl	8005b92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dba:	bf00      	nop
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	200008fc 	.word	0x200008fc
 8007dc8:	20000900 	.word	0x20000900
 8007dcc:	20000dd8 	.word	0x20000dd8

08007dd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007dd4:	4b07      	ldr	r3, [pc, #28]	@ (8007df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ddc:	4b05      	ldr	r3, [pc, #20]	@ (8007df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007de2:	3201      	adds	r2, #1
 8007de4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007de6:	4b03      	ldr	r3, [pc, #12]	@ (8007df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007de8:	681b      	ldr	r3, [r3, #0]
	}
 8007dea:	4618      	mov	r0, r3
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	200008fc 	.word	0x200008fc

08007df8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e02:	4b21      	ldr	r3, [pc, #132]	@ (8007e88 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e08:	4b20      	ldr	r3, [pc, #128]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fd ff1c 	bl	8005c4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e1a:	d10a      	bne.n	8007e32 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d007      	beq.n	8007e32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e22:	4b1a      	ldr	r3, [pc, #104]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4819      	ldr	r0, [pc, #100]	@ (8007e90 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e2c:	f7fd feb1 	bl	8005b92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e30:	e026      	b.n	8007e80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4413      	add	r3, r2
 8007e38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e3a:	4b14      	ldr	r3, [pc, #80]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d209      	bcs.n	8007e5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e4a:	4b12      	ldr	r3, [pc, #72]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3304      	adds	r3, #4
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7fd febf 	bl	8005bda <vListInsert>
}
 8007e5c:	e010      	b.n	8007e80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7fd feb5 	bl	8005bda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e70:	4b0a      	ldr	r3, [pc, #40]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d202      	bcs.n	8007e80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e7a:	4a08      	ldr	r2, [pc, #32]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	6013      	str	r3, [r2, #0]
}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000dd4 	.word	0x20000dd4
 8007e8c:	200008fc 	.word	0x200008fc
 8007e90:	20000dbc 	.word	0x20000dbc
 8007e94:	20000d8c 	.word	0x20000d8c
 8007e98:	20000d88 	.word	0x20000d88
 8007e9c:	20000df0 	.word	0x20000df0

08007ea0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08a      	sub	sp, #40	@ 0x28
 8007ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007eaa:	f000 fb13 	bl	80084d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007eae:	4b1d      	ldr	r3, [pc, #116]	@ (8007f24 <xTimerCreateTimerTask+0x84>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d021      	beq.n	8007efa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ebe:	1d3a      	adds	r2, r7, #4
 8007ec0:	f107 0108 	add.w	r1, r7, #8
 8007ec4:	f107 030c 	add.w	r3, r7, #12
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fd fe1b 	bl	8005b04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	9202      	str	r2, [sp, #8]
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	2302      	movs	r3, #2
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2300      	movs	r3, #0
 8007ede:	460a      	mov	r2, r1
 8007ee0:	4911      	ldr	r1, [pc, #68]	@ (8007f28 <xTimerCreateTimerTask+0x88>)
 8007ee2:	4812      	ldr	r0, [pc, #72]	@ (8007f2c <xTimerCreateTimerTask+0x8c>)
 8007ee4:	f7fe ffc0 	bl	8006e68 <xTaskCreateStatic>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	4a11      	ldr	r2, [pc, #68]	@ (8007f30 <xTimerCreateTimerTask+0x90>)
 8007eec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007eee:	4b10      	ldr	r3, [pc, #64]	@ (8007f30 <xTimerCreateTimerTask+0x90>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	613b      	str	r3, [r7, #16]
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	e7fd      	b.n	8007f14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f18:	697b      	ldr	r3, [r7, #20]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000e2c 	.word	0x20000e2c
 8007f28:	0800a0d0 	.word	0x0800a0d0
 8007f2c:	0800806d 	.word	0x0800806d
 8007f30:	20000e30 	.word	0x20000e30

08007f34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	@ 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10b      	bne.n	8007f64 <xTimerGenericCommand+0x30>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	623b      	str	r3, [r7, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f64:	4b19      	ldr	r3, [pc, #100]	@ (8007fcc <xTimerGenericCommand+0x98>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d02a      	beq.n	8007fc2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	dc18      	bgt.n	8007fb0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f7e:	f7ff fdad 	bl	8007adc <xTaskGetSchedulerState>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d109      	bne.n	8007f9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f88:	4b10      	ldr	r3, [pc, #64]	@ (8007fcc <xTimerGenericCommand+0x98>)
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	f107 0110 	add.w	r1, r7, #16
 8007f90:	2300      	movs	r3, #0
 8007f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f94:	f7fe f8f0 	bl	8006178 <xQueueGenericSend>
 8007f98:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f9a:	e012      	b.n	8007fc2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007fcc <xTimerGenericCommand+0x98>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	f107 0110 	add.w	r1, r7, #16
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f7fe f8e6 	bl	8006178 <xQueueGenericSend>
 8007fac:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fae:	e008      	b.n	8007fc2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fb0:	4b06      	ldr	r3, [pc, #24]	@ (8007fcc <xTimerGenericCommand+0x98>)
 8007fb2:	6818      	ldr	r0, [r3, #0]
 8007fb4:	f107 0110 	add.w	r1, r7, #16
 8007fb8:	2300      	movs	r3, #0
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	f7fe f9de 	bl	800637c <xQueueGenericSendFromISR>
 8007fc0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3728      	adds	r7, #40	@ 0x28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20000e2c 	.word	0x20000e2c

08007fd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fda:	4b23      	ldr	r3, [pc, #140]	@ (8008068 <prvProcessExpiredTimer+0x98>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fd fe2f 	bl	8005c4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d023      	beq.n	8008044 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	699a      	ldr	r2, [r3, #24]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	18d1      	adds	r1, r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	6978      	ldr	r0, [r7, #20]
 800800a:	f000 f8d5 	bl	80081b8 <prvInsertTimerInActiveList>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d020      	beq.n	8008056 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008014:	2300      	movs	r3, #0
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	2100      	movs	r1, #0
 800801e:	6978      	ldr	r0, [r7, #20]
 8008020:	f7ff ff88 	bl	8007f34 <xTimerGenericCommand>
 8008024:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d114      	bne.n	8008056 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	60fb      	str	r3, [r7, #12]
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	e7fd      	b.n	8008040 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	b2da      	uxtb	r2, r3
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	6978      	ldr	r0, [r7, #20]
 800805c:	4798      	blx	r3
}
 800805e:	bf00      	nop
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20000e24 	.word	0x20000e24

0800806c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008074:	f107 0308 	add.w	r3, r7, #8
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f859 	bl	8008130 <prvGetNextExpireTime>
 800807e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f805 	bl	8008094 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800808a:	f000 f8d7 	bl	800823c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800808e:	bf00      	nop
 8008090:	e7f0      	b.n	8008074 <prvTimerTask+0x8>
	...

08008094 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800809e:	f7ff f927 	bl	80072f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080a2:	f107 0308 	add.w	r3, r7, #8
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f866 	bl	8008178 <prvSampleTimeNow>
 80080ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d130      	bne.n	8008116 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <prvProcessTimerOrBlockTask+0x3c>
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d806      	bhi.n	80080d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080c2:	f7ff f923 	bl	800730c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080c6:	68f9      	ldr	r1, [r7, #12]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff ff81 	bl	8007fd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080ce:	e024      	b.n	800811a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080d6:	4b13      	ldr	r3, [pc, #76]	@ (8008124 <prvProcessTimerOrBlockTask+0x90>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <prvProcessTimerOrBlockTask+0x50>
 80080e0:	2301      	movs	r3, #1
 80080e2:	e000      	b.n	80080e6 <prvProcessTimerOrBlockTask+0x52>
 80080e4:	2300      	movs	r3, #0
 80080e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008128 <prvProcessTimerOrBlockTask+0x94>)
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	f7fe fe83 	bl	8006e00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080fa:	f7ff f907 	bl	800730c <xTaskResumeAll>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008104:	4b09      	ldr	r3, [pc, #36]	@ (800812c <prvProcessTimerOrBlockTask+0x98>)
 8008106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	f3bf 8f6f 	isb	sy
}
 8008114:	e001      	b.n	800811a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008116:	f7ff f8f9 	bl	800730c <xTaskResumeAll>
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000e28 	.word	0x20000e28
 8008128:	20000e2c 	.word	0x20000e2c
 800812c:	e000ed04 	.word	0xe000ed04

08008130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008138:	4b0e      	ldr	r3, [pc, #56]	@ (8008174 <prvGetNextExpireTime+0x44>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <prvGetNextExpireTime+0x16>
 8008142:	2201      	movs	r2, #1
 8008144:	e000      	b.n	8008148 <prvGetNextExpireTime+0x18>
 8008146:	2200      	movs	r2, #0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d105      	bne.n	8008160 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008154:	4b07      	ldr	r3, [pc, #28]	@ (8008174 <prvGetNextExpireTime+0x44>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	e001      	b.n	8008164 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008164:	68fb      	ldr	r3, [r7, #12]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20000e24 	.word	0x20000e24

08008178 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008180:	f7ff f962 	bl	8007448 <xTaskGetTickCount>
 8008184:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008186:	4b0b      	ldr	r3, [pc, #44]	@ (80081b4 <prvSampleTimeNow+0x3c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	429a      	cmp	r2, r3
 800818e:	d205      	bcs.n	800819c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008190:	f000 f93a 	bl	8008408 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e002      	b.n	80081a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081a2:	4a04      	ldr	r2, [pc, #16]	@ (80081b4 <prvSampleTimeNow+0x3c>)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081a8:	68fb      	ldr	r3, [r7, #12]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000e34 	.word	0x20000e34

080081b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d812      	bhi.n	8008204 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d302      	bcc.n	80081f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e01b      	b.n	800822a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081f2:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <prvInsertTimerInActiveList+0x7c>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3304      	adds	r3, #4
 80081fa:	4619      	mov	r1, r3
 80081fc:	4610      	mov	r0, r2
 80081fe:	f7fd fcec 	bl	8005bda <vListInsert>
 8008202:	e012      	b.n	800822a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d206      	bcs.n	800821a <prvInsertTimerInActiveList+0x62>
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d302      	bcc.n	800821a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008214:	2301      	movs	r3, #1
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	e007      	b.n	800822a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800821a:	4b07      	ldr	r3, [pc, #28]	@ (8008238 <prvInsertTimerInActiveList+0x80>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3304      	adds	r3, #4
 8008222:	4619      	mov	r1, r3
 8008224:	4610      	mov	r0, r2
 8008226:	f7fd fcd8 	bl	8005bda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800822a:	697b      	ldr	r3, [r7, #20]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20000e28 	.word	0x20000e28
 8008238:	20000e24 	.word	0x20000e24

0800823c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08e      	sub	sp, #56	@ 0x38
 8008240:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008242:	e0ce      	b.n	80083e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	da19      	bge.n	800827e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800824a:	1d3b      	adds	r3, r7, #4
 800824c:	3304      	adds	r3, #4
 800824e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10b      	bne.n	800826e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	61fb      	str	r3, [r7, #28]
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	e7fd      	b.n	800826a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800826e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008274:	6850      	ldr	r0, [r2, #4]
 8008276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008278:	6892      	ldr	r2, [r2, #8]
 800827a:	4611      	mov	r1, r2
 800827c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f2c0 80ae 	blt.w	80083e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008294:	3304      	adds	r3, #4
 8008296:	4618      	mov	r0, r3
 8008298:	f7fd fcd8 	bl	8005c4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800829c:	463b      	mov	r3, r7
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff ff6a 	bl	8008178 <prvSampleTimeNow>
 80082a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b09      	cmp	r3, #9
 80082aa:	f200 8097 	bhi.w	80083dc <prvProcessReceivedCommands+0x1a0>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <prvProcessReceivedCommands+0x78>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	08008353 	.word	0x08008353
 80082c4:	08008367 	.word	0x08008367
 80082c8:	080083b3 	.word	0x080083b3
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082dd 	.word	0x080082dd
 80082d4:	08008353 	.word	0x08008353
 80082d8:	08008367 	.word	0x08008367
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082e2:	f043 0301 	orr.w	r3, r3, #1
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	18d1      	adds	r1, r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082fc:	f7ff ff5c 	bl	80081b8 <prvInsertTimerInActiveList>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d06c      	beq.n	80083e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800830c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d061      	beq.n	80083e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	441a      	add	r2, r3
 8008324:	2300      	movs	r3, #0
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	2300      	movs	r3, #0
 800832a:	2100      	movs	r1, #0
 800832c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800832e:	f7ff fe01 	bl	8007f34 <xTimerGenericCommand>
 8008332:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d152      	bne.n	80083e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	61bb      	str	r3, [r7, #24]
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	e7fd      	b.n	800834e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	b2da      	uxtb	r2, r3
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008364:	e03d      	b.n	80083e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	b2da      	uxtb	r2, r3
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800837e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10b      	bne.n	800839e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	617b      	str	r3, [r7, #20]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	18d1      	adds	r1, r2, r3
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ac:	f7ff ff04 	bl	80081b8 <prvInsertTimerInActiveList>
					break;
 80083b0:	e017      	b.n	80083e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80083c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083c2:	f000 fbe9 	bl	8008b98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083c6:	e00c      	b.n	80083e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083da:	e002      	b.n	80083e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80083e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083e2:	4b08      	ldr	r3, [pc, #32]	@ (8008404 <prvProcessReceivedCommands+0x1c8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	1d39      	adds	r1, r7, #4
 80083e8:	2200      	movs	r2, #0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe f8f4 	bl	80065d8 <xQueueReceive>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f47f af26 	bne.w	8008244 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	3730      	adds	r7, #48	@ 0x30
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000e2c 	.word	0x20000e2c

08008408 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800840e:	e049      	b.n	80084a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008410:	4b2e      	ldr	r3, [pc, #184]	@ (80084cc <prvSwitchTimerLists+0xc4>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841a:	4b2c      	ldr	r3, [pc, #176]	@ (80084cc <prvSwitchTimerLists+0xc4>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3304      	adds	r3, #4
 8008428:	4618      	mov	r0, r3
 800842a:	f7fd fc0f 	bl	8005c4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d02f      	beq.n	80084a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4413      	add	r3, r2
 800844c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	429a      	cmp	r2, r3
 8008454:	d90e      	bls.n	8008474 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008462:	4b1a      	ldr	r3, [pc, #104]	@ (80084cc <prvSwitchTimerLists+0xc4>)
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f7fd fbb4 	bl	8005bda <vListInsert>
 8008472:	e017      	b.n	80084a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008474:	2300      	movs	r3, #0
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	2100      	movs	r1, #0
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff fd58 	bl	8007f34 <xTimerGenericCommand>
 8008484:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10b      	bne.n	80084a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	603b      	str	r3, [r7, #0]
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	e7fd      	b.n	80084a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084a4:	4b09      	ldr	r3, [pc, #36]	@ (80084cc <prvSwitchTimerLists+0xc4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1b0      	bne.n	8008410 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084ae:	4b07      	ldr	r3, [pc, #28]	@ (80084cc <prvSwitchTimerLists+0xc4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084b4:	4b06      	ldr	r3, [pc, #24]	@ (80084d0 <prvSwitchTimerLists+0xc8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a04      	ldr	r2, [pc, #16]	@ (80084cc <prvSwitchTimerLists+0xc4>)
 80084ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084bc:	4a04      	ldr	r2, [pc, #16]	@ (80084d0 <prvSwitchTimerLists+0xc8>)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	6013      	str	r3, [r2, #0]
}
 80084c2:	bf00      	nop
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20000e24 	.word	0x20000e24
 80084d0:	20000e28 	.word	0x20000e28

080084d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084da:	f000 f96d 	bl	80087b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084de:	4b15      	ldr	r3, [pc, #84]	@ (8008534 <prvCheckForValidListAndQueue+0x60>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d120      	bne.n	8008528 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084e6:	4814      	ldr	r0, [pc, #80]	@ (8008538 <prvCheckForValidListAndQueue+0x64>)
 80084e8:	f7fd fb26 	bl	8005b38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084ec:	4813      	ldr	r0, [pc, #76]	@ (800853c <prvCheckForValidListAndQueue+0x68>)
 80084ee:	f7fd fb23 	bl	8005b38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084f2:	4b13      	ldr	r3, [pc, #76]	@ (8008540 <prvCheckForValidListAndQueue+0x6c>)
 80084f4:	4a10      	ldr	r2, [pc, #64]	@ (8008538 <prvCheckForValidListAndQueue+0x64>)
 80084f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084f8:	4b12      	ldr	r3, [pc, #72]	@ (8008544 <prvCheckForValidListAndQueue+0x70>)
 80084fa:	4a10      	ldr	r2, [pc, #64]	@ (800853c <prvCheckForValidListAndQueue+0x68>)
 80084fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084fe:	2300      	movs	r3, #0
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	4b11      	ldr	r3, [pc, #68]	@ (8008548 <prvCheckForValidListAndQueue+0x74>)
 8008504:	4a11      	ldr	r2, [pc, #68]	@ (800854c <prvCheckForValidListAndQueue+0x78>)
 8008506:	2110      	movs	r1, #16
 8008508:	200a      	movs	r0, #10
 800850a:	f7fd fc33 	bl	8005d74 <xQueueGenericCreateStatic>
 800850e:	4603      	mov	r3, r0
 8008510:	4a08      	ldr	r2, [pc, #32]	@ (8008534 <prvCheckForValidListAndQueue+0x60>)
 8008512:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008514:	4b07      	ldr	r3, [pc, #28]	@ (8008534 <prvCheckForValidListAndQueue+0x60>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800851c:	4b05      	ldr	r3, [pc, #20]	@ (8008534 <prvCheckForValidListAndQueue+0x60>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	490b      	ldr	r1, [pc, #44]	@ (8008550 <prvCheckForValidListAndQueue+0x7c>)
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe fc18 	bl	8006d58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008528:	f000 f978 	bl	800881c <vPortExitCritical>
}
 800852c:	bf00      	nop
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000e2c 	.word	0x20000e2c
 8008538:	20000dfc 	.word	0x20000dfc
 800853c:	20000e10 	.word	0x20000e10
 8008540:	20000e24 	.word	0x20000e24
 8008544:	20000e28 	.word	0x20000e28
 8008548:	20000ed8 	.word	0x20000ed8
 800854c:	20000e38 	.word	0x20000e38
 8008550:	0800a0d8 	.word	0x0800a0d8

08008554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3b04      	subs	r3, #4
 8008564:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800856c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3b04      	subs	r3, #4
 8008572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f023 0201 	bic.w	r2, r3, #1
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3b04      	subs	r3, #4
 8008582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008584:	4a0c      	ldr	r2, [pc, #48]	@ (80085b8 <pxPortInitialiseStack+0x64>)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3b14      	subs	r3, #20
 800858e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3b04      	subs	r3, #4
 800859a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f06f 0202 	mvn.w	r2, #2
 80085a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3b20      	subs	r3, #32
 80085a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085aa:	68fb      	ldr	r3, [r7, #12]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	080085bd 	.word	0x080085bd

080085bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085c6:	4b13      	ldr	r3, [pc, #76]	@ (8008614 <prvTaskExitError+0x58>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085ce:	d00b      	beq.n	80085e8 <prvTaskExitError+0x2c>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60fb      	str	r3, [r7, #12]
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <prvTaskExitError+0x28>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	60bb      	str	r3, [r7, #8]
}
 80085fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085fc:	bf00      	nop
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0fc      	beq.n	80085fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	2000000c 	.word	0x2000000c
	...

08008620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008620:	4b07      	ldr	r3, [pc, #28]	@ (8008640 <pxCurrentTCBConst2>)
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	6808      	ldr	r0, [r1, #0]
 8008626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	f380 8809 	msr	PSP, r0
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f380 8811 	msr	BASEPRI, r0
 800863a:	4770      	bx	lr
 800863c:	f3af 8000 	nop.w

08008640 <pxCurrentTCBConst2>:
 8008640:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop

08008648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008648:	4808      	ldr	r0, [pc, #32]	@ (800866c <prvPortStartFirstTask+0x24>)
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	6800      	ldr	r0, [r0, #0]
 800864e:	f380 8808 	msr	MSP, r0
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8814 	msr	CONTROL, r0
 800865a:	b662      	cpsie	i
 800865c:	b661      	cpsie	f
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	df00      	svc	0
 8008668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800866a:	bf00      	nop
 800866c:	e000ed08 	.word	0xe000ed08

08008670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008676:	4b47      	ldr	r3, [pc, #284]	@ (8008794 <xPortStartScheduler+0x124>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a47      	ldr	r2, [pc, #284]	@ (8008798 <xPortStartScheduler+0x128>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d10b      	bne.n	8008698 <xPortStartScheduler+0x28>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	e7fd      	b.n	8008694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008698:	4b3e      	ldr	r3, [pc, #248]	@ (8008794 <xPortStartScheduler+0x124>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a3f      	ldr	r2, [pc, #252]	@ (800879c <xPortStartScheduler+0x12c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d10b      	bne.n	80086ba <xPortStartScheduler+0x4a>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	60fb      	str	r3, [r7, #12]
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086ba:	4b39      	ldr	r3, [pc, #228]	@ (80087a0 <xPortStartScheduler+0x130>)
 80086bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	22ff      	movs	r2, #255	@ 0xff
 80086ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	4b31      	ldr	r3, [pc, #196]	@ (80087a4 <xPortStartScheduler+0x134>)
 80086e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086e2:	4b31      	ldr	r3, [pc, #196]	@ (80087a8 <xPortStartScheduler+0x138>)
 80086e4:	2207      	movs	r2, #7
 80086e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086e8:	e009      	b.n	80086fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80086ea:	4b2f      	ldr	r3, [pc, #188]	@ (80087a8 <xPortStartScheduler+0x138>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	4a2d      	ldr	r2, [pc, #180]	@ (80087a8 <xPortStartScheduler+0x138>)
 80086f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008706:	2b80      	cmp	r3, #128	@ 0x80
 8008708:	d0ef      	beq.n	80086ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800870a:	4b27      	ldr	r3, [pc, #156]	@ (80087a8 <xPortStartScheduler+0x138>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f1c3 0307 	rsb	r3, r3, #7
 8008712:	2b04      	cmp	r3, #4
 8008714:	d00b      	beq.n	800872e <xPortStartScheduler+0xbe>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	60bb      	str	r3, [r7, #8]
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	e7fd      	b.n	800872a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800872e:	4b1e      	ldr	r3, [pc, #120]	@ (80087a8 <xPortStartScheduler+0x138>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <xPortStartScheduler+0x138>)
 8008736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008738:	4b1b      	ldr	r3, [pc, #108]	@ (80087a8 <xPortStartScheduler+0x138>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008740:	4a19      	ldr	r2, [pc, #100]	@ (80087a8 <xPortStartScheduler+0x138>)
 8008742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	b2da      	uxtb	r2, r3
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800874c:	4b17      	ldr	r3, [pc, #92]	@ (80087ac <xPortStartScheduler+0x13c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a16      	ldr	r2, [pc, #88]	@ (80087ac <xPortStartScheduler+0x13c>)
 8008752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008758:	4b14      	ldr	r3, [pc, #80]	@ (80087ac <xPortStartScheduler+0x13c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a13      	ldr	r2, [pc, #76]	@ (80087ac <xPortStartScheduler+0x13c>)
 800875e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008764:	f000 f8da 	bl	800891c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008768:	4b11      	ldr	r3, [pc, #68]	@ (80087b0 <xPortStartScheduler+0x140>)
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800876e:	f000 f8f9 	bl	8008964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008772:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <xPortStartScheduler+0x144>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a0f      	ldr	r2, [pc, #60]	@ (80087b4 <xPortStartScheduler+0x144>)
 8008778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800877c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800877e:	f7ff ff63 	bl	8008648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008782:	f7fe ff2b 	bl	80075dc <vTaskSwitchContext>
	prvTaskExitError();
 8008786:	f7ff ff19 	bl	80085bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	e000ed00 	.word	0xe000ed00
 8008798:	410fc271 	.word	0x410fc271
 800879c:	410fc270 	.word	0x410fc270
 80087a0:	e000e400 	.word	0xe000e400
 80087a4:	20000f28 	.word	0x20000f28
 80087a8:	20000f2c 	.word	0x20000f2c
 80087ac:	e000ed20 	.word	0xe000ed20
 80087b0:	2000000c 	.word	0x2000000c
 80087b4:	e000ef34 	.word	0xe000ef34

080087b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087d2:	4b10      	ldr	r3, [pc, #64]	@ (8008814 <vPortEnterCritical+0x5c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3301      	adds	r3, #1
 80087d8:	4a0e      	ldr	r2, [pc, #56]	@ (8008814 <vPortEnterCritical+0x5c>)
 80087da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008814 <vPortEnterCritical+0x5c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d110      	bne.n	8008806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008818 <vPortEnterCritical+0x60>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <vPortEnterCritical+0x4e>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	603b      	str	r3, [r7, #0]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <vPortEnterCritical+0x4a>
	}
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	2000000c 	.word	0x2000000c
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008822:	4b12      	ldr	r3, [pc, #72]	@ (800886c <vPortExitCritical+0x50>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10b      	bne.n	8008842 <vPortExitCritical+0x26>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	607b      	str	r3, [r7, #4]
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	e7fd      	b.n	800883e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008842:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <vPortExitCritical+0x50>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3b01      	subs	r3, #1
 8008848:	4a08      	ldr	r2, [pc, #32]	@ (800886c <vPortExitCritical+0x50>)
 800884a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800884c:	4b07      	ldr	r3, [pc, #28]	@ (800886c <vPortExitCritical+0x50>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d105      	bne.n	8008860 <vPortExitCritical+0x44>
 8008854:	2300      	movs	r3, #0
 8008856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f383 8811 	msr	BASEPRI, r3
}
 800885e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	2000000c 	.word	0x2000000c

08008870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008870:	f3ef 8009 	mrs	r0, PSP
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	4b15      	ldr	r3, [pc, #84]	@ (80088d0 <pxCurrentTCBConst>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	f01e 0f10 	tst.w	lr, #16
 8008880:	bf08      	it	eq
 8008882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	6010      	str	r0, [r2, #0]
 800888c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008894:	f380 8811 	msr	BASEPRI, r0
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f7fe fe9c 	bl	80075dc <vTaskSwitchContext>
 80088a4:	f04f 0000 	mov.w	r0, #0
 80088a8:	f380 8811 	msr	BASEPRI, r0
 80088ac:	bc09      	pop	{r0, r3}
 80088ae:	6819      	ldr	r1, [r3, #0]
 80088b0:	6808      	ldr	r0, [r1, #0]
 80088b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b6:	f01e 0f10 	tst.w	lr, #16
 80088ba:	bf08      	it	eq
 80088bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088c0:	f380 8809 	msr	PSP, r0
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	f3af 8000 	nop.w

080088d0 <pxCurrentTCBConst>:
 80088d0:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088f2:	f7fe fdb9 	bl	8007468 <xTaskIncrementTick>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088fc:	4b06      	ldr	r3, [pc, #24]	@ (8008918 <xPortSysTickHandler+0x40>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f383 8811 	msr	BASEPRI, r3
}
 800890e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008920:	4b0b      	ldr	r3, [pc, #44]	@ (8008950 <vPortSetupTimerInterrupt+0x34>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008926:	4b0b      	ldr	r3, [pc, #44]	@ (8008954 <vPortSetupTimerInterrupt+0x38>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800892c:	4b0a      	ldr	r3, [pc, #40]	@ (8008958 <vPortSetupTimerInterrupt+0x3c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a0a      	ldr	r2, [pc, #40]	@ (800895c <vPortSetupTimerInterrupt+0x40>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	099b      	lsrs	r3, r3, #6
 8008938:	4a09      	ldr	r2, [pc, #36]	@ (8008960 <vPortSetupTimerInterrupt+0x44>)
 800893a:	3b01      	subs	r3, #1
 800893c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800893e:	4b04      	ldr	r3, [pc, #16]	@ (8008950 <vPortSetupTimerInterrupt+0x34>)
 8008940:	2207      	movs	r2, #7
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	e000e010 	.word	0xe000e010
 8008954:	e000e018 	.word	0xe000e018
 8008958:	20000000 	.word	0x20000000
 800895c:	10624dd3 	.word	0x10624dd3
 8008960:	e000e014 	.word	0xe000e014

08008964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008974 <vPortEnableVFP+0x10>
 8008968:	6801      	ldr	r1, [r0, #0]
 800896a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800896e:	6001      	str	r1, [r0, #0]
 8008970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008972:	bf00      	nop
 8008974:	e000ed88 	.word	0xe000ed88

08008978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800897e:	f3ef 8305 	mrs	r3, IPSR
 8008982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b0f      	cmp	r3, #15
 8008988:	d915      	bls.n	80089b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800898a:	4a18      	ldr	r2, [pc, #96]	@ (80089ec <vPortValidateInterruptPriority+0x74>)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008994:	4b16      	ldr	r3, [pc, #88]	@ (80089f0 <vPortValidateInterruptPriority+0x78>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	7afa      	ldrb	r2, [r7, #11]
 800899a:	429a      	cmp	r2, r3
 800899c:	d20b      	bcs.n	80089b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	607b      	str	r3, [r7, #4]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089b6:	4b0f      	ldr	r3, [pc, #60]	@ (80089f4 <vPortValidateInterruptPriority+0x7c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80089be:	4b0e      	ldr	r3, [pc, #56]	@ (80089f8 <vPortValidateInterruptPriority+0x80>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d90b      	bls.n	80089de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	603b      	str	r3, [r7, #0]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <vPortValidateInterruptPriority+0x62>
	}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	e000e3f0 	.word	0xe000e3f0
 80089f0:	20000f28 	.word	0x20000f28
 80089f4:	e000ed0c 	.word	0xe000ed0c
 80089f8:	20000f2c 	.word	0x20000f2c

080089fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	@ 0x28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a08:	f7fe fc72 	bl	80072f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8008b80 <pvPortMalloc+0x184>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a14:	f000 f924 	bl	8008c60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a18:	4b5a      	ldr	r3, [pc, #360]	@ (8008b84 <pvPortMalloc+0x188>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f040 8095 	bne.w	8008b50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a2c:	2208      	movs	r2, #8
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4413      	add	r3, r2
 8008a32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d015      	beq.n	8008a6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f023 0307 	bic.w	r3, r3, #7
 8008a44:	3308      	adds	r3, #8
 8008a46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <pvPortMalloc+0x6e>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	617b      	str	r3, [r7, #20]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d06f      	beq.n	8008b50 <pvPortMalloc+0x154>
 8008a70:	4b45      	ldr	r3, [pc, #276]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d86a      	bhi.n	8008b50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a7a:	4b44      	ldr	r3, [pc, #272]	@ (8008b8c <pvPortMalloc+0x190>)
 8008a7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a7e:	4b43      	ldr	r3, [pc, #268]	@ (8008b8c <pvPortMalloc+0x190>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a84:	e004      	b.n	8008a90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d903      	bls.n	8008aa2 <pvPortMalloc+0xa6>
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1f1      	bne.n	8008a86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008aa2:	4b37      	ldr	r3, [pc, #220]	@ (8008b80 <pvPortMalloc+0x184>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d051      	beq.n	8008b50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	4413      	add	r3, r2
 8008ab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	1ad2      	subs	r2, r2, r3
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d920      	bls.n	8008b10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	613b      	str	r3, [r7, #16]
}
 8008af2:	bf00      	nop
 8008af4:	bf00      	nop
 8008af6:	e7fd      	b.n	8008af4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b0a:	69b8      	ldr	r0, [r7, #24]
 8008b0c:	f000 f90a 	bl	8008d24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b10:	4b1d      	ldr	r3, [pc, #116]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008b1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b1b      	ldr	r3, [pc, #108]	@ (8008b90 <pvPortMalloc+0x194>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d203      	bcs.n	8008b32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b2a:	4b17      	ldr	r3, [pc, #92]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	@ (8008b90 <pvPortMalloc+0x194>)
 8008b30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	4b13      	ldr	r3, [pc, #76]	@ (8008b84 <pvPortMalloc+0x188>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b46:	4b13      	ldr	r3, [pc, #76]	@ (8008b94 <pvPortMalloc+0x198>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	4a11      	ldr	r2, [pc, #68]	@ (8008b94 <pvPortMalloc+0x198>)
 8008b4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b50:	f7fe fbdc 	bl	800730c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00b      	beq.n	8008b76 <pvPortMalloc+0x17a>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	60fb      	str	r3, [r7, #12]
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	e7fd      	b.n	8008b72 <pvPortMalloc+0x176>
	return pvReturn;
 8008b76:	69fb      	ldr	r3, [r7, #28]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3728      	adds	r7, #40	@ 0x28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20003678 	.word	0x20003678
 8008b84:	2000368c 	.word	0x2000368c
 8008b88:	2000367c 	.word	0x2000367c
 8008b8c:	20003670 	.word	0x20003670
 8008b90:	20003680 	.word	0x20003680
 8008b94:	20003684 	.word	0x20003684

08008b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d04f      	beq.n	8008c4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008baa:	2308      	movs	r3, #8
 8008bac:	425b      	negs	r3, r3
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	4b25      	ldr	r3, [pc, #148]	@ (8008c54 <vPortFree+0xbc>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10b      	bne.n	8008bde <vPortFree+0x46>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	60fb      	str	r3, [r7, #12]
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	e7fd      	b.n	8008bda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00b      	beq.n	8008bfe <vPortFree+0x66>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60bb      	str	r3, [r7, #8]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	4b14      	ldr	r3, [pc, #80]	@ (8008c54 <vPortFree+0xbc>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4013      	ands	r3, r2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01e      	beq.n	8008c4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11a      	bne.n	8008c4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	4b0e      	ldr	r3, [pc, #56]	@ (8008c54 <vPortFree+0xbc>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	401a      	ands	r2, r3
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c24:	f7fe fb64 	bl	80072f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c58 <vPortFree+0xc0>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4413      	add	r3, r2
 8008c32:	4a09      	ldr	r2, [pc, #36]	@ (8008c58 <vPortFree+0xc0>)
 8008c34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c36:	6938      	ldr	r0, [r7, #16]
 8008c38:	f000 f874 	bl	8008d24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <vPortFree+0xc4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3301      	adds	r3, #1
 8008c42:	4a06      	ldr	r2, [pc, #24]	@ (8008c5c <vPortFree+0xc4>)
 8008c44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c46:	f7fe fb61 	bl	800730c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c4a:	bf00      	nop
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	2000368c 	.word	0x2000368c
 8008c58:	2000367c 	.word	0x2000367c
 8008c5c:	20003688 	.word	0x20003688

08008c60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c66:	f44f 531d 	mov.w	r3, #10048	@ 0x2740
 8008c6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c6c:	4b27      	ldr	r3, [pc, #156]	@ (8008d0c <prvHeapInit+0xac>)
 8008c6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00c      	beq.n	8008c94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0307 	bic.w	r3, r3, #7
 8008c86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8008d0c <prvHeapInit+0xac>)
 8008c90:	4413      	add	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c98:	4a1d      	ldr	r2, [pc, #116]	@ (8008d10 <prvHeapInit+0xb0>)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8008d10 <prvHeapInit+0xb0>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cac:	2208      	movs	r2, #8
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	@ (8008d14 <prvHeapInit+0xb4>)
 8008cc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cc2:	4b14      	ldr	r3, [pc, #80]	@ (8008d14 <prvHeapInit+0xb4>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cca:	4b12      	ldr	r3, [pc, #72]	@ (8008d14 <prvHeapInit+0xb4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	1ad2      	subs	r2, r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d14 <prvHeapInit+0xb4>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4a0a      	ldr	r2, [pc, #40]	@ (8008d18 <prvHeapInit+0xb8>)
 8008cee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	4a09      	ldr	r2, [pc, #36]	@ (8008d1c <prvHeapInit+0xbc>)
 8008cf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cf8:	4b09      	ldr	r3, [pc, #36]	@ (8008d20 <prvHeapInit+0xc0>)
 8008cfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008cfe:	601a      	str	r2, [r3, #0]
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20000f30 	.word	0x20000f30
 8008d10:	20003670 	.word	0x20003670
 8008d14:	20003678 	.word	0x20003678
 8008d18:	20003680 	.word	0x20003680
 8008d1c:	2000367c 	.word	0x2000367c
 8008d20:	2000368c 	.word	0x2000368c

08008d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d2c:	4b28      	ldr	r3, [pc, #160]	@ (8008dd0 <prvInsertBlockIntoFreeList+0xac>)
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e002      	b.n	8008d38 <prvInsertBlockIntoFreeList+0x14>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d8f7      	bhi.n	8008d32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d108      	bne.n	8008d66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	441a      	add	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	441a      	add	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d118      	bne.n	8008dac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b15      	ldr	r3, [pc, #84]	@ (8008dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d00d      	beq.n	8008da2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	441a      	add	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	e008      	b.n	8008db4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008da2:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	e003      	b.n	8008db4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d002      	beq.n	8008dc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20003670 	.word	0x20003670
 8008dd4:	20003678 	.word	0x20003678

08008dd8 <_ZN15FdcanControllerC1Ev>:
 *      Author: knap-linux
 */

#include "fdcan_controller.h"

FdcanController::FdcanController()
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
	: m_hfdcan{nullptr}
	, m_queueCanHandle{nullptr}
	, m_mutexCanHandle{nullptr}
	, m_semCanHandle{nullptr}
 8008de0:	4a0a      	ldr	r2, [pc, #40]	@ (8008e0c <_ZN15FdcanControllerC1Ev+0x34>)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	601a      	str	r2, [r3, #0]
	: m_hfdcan{nullptr}
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	605a      	str	r2, [r3, #4]
	, m_queueCanHandle{nullptr}
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	609a      	str	r2, [r3, #8]
	, m_mutexCanHandle{nullptr}
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	60da      	str	r2, [r3, #12]
	, m_semCanHandle{nullptr}
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	611a      	str	r2, [r3, #16]
{

}
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	0800a1dc 	.word	0x0800a1dc

08008e10 <_ZN15FdcanControllerD1Ev>:

FdcanController::~FdcanController()
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	4a04      	ldr	r2, [pc, #16]	@ (8008e2c <_ZN15FdcanControllerD1Ev+0x1c>)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	601a      	str	r2, [r3, #0]
{

}
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	0800a1dc 	.word	0x0800a1dc

08008e30 <_ZN15FdcanControllerD0Ev>:
FdcanController::~FdcanController()
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
}
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff ffe9 	bl	8008e10 <_ZN15FdcanControllerD1Ev>
 8008e3e:	2114      	movs	r1, #20
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f961 	bl	8009108 <_ZdlPvj>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <_ZN15FdcanController14setHandleFdcanEP19FDCAN_HandleTypeDef>:

void FdcanController::setHandleFdcan(FDCAN_HandleTypeDef *hfdcan)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
	m_hfdcan = hfdcan;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	605a      	str	r2, [r3, #4]
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <_ZN15FdcanController14setHandleQueueEPPv>:

void FdcanController::setHandleQueue(osMessageQueueId_t *queueCanHandle)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
	m_queueCanHandle = queueCanHandle;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	609a      	str	r2, [r3, #8]
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <_ZN15FdcanController14setHandleMutexEPPv>:

void FdcanController::setHandleMutex(osMutexId_t *mutexCanHandle)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
	m_mutexCanHandle = mutexCanHandle;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	60da      	str	r2, [r3, #12]
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <_ZN15FdcanController12setHandleSemEPPv>:

void FdcanController::setHandleSem(osSemaphoreId_t *semCanHandle)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
	m_semCanHandle = semCanHandle;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	611a      	str	r2, [r3, #16]
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <_ZN15FdcanController4initEv>:

FdcanController::State FdcanController::init()
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	if (m_hfdcan == nullptr) return State::Error;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <_ZN15FdcanController4initEv+0x14>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e032      	b.n	8008f3a <_ZN15FdcanController4initEv+0x7a>
	if (m_queueCanHandle == nullptr) return State::Error;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <_ZN15FdcanController4initEv+0x20>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e02c      	b.n	8008f3a <_ZN15FdcanController4initEv+0x7a>
	if (m_mutexCanHandle == nullptr) return State::Error;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <_ZN15FdcanController4initEv+0x2c>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e026      	b.n	8008f3a <_ZN15FdcanController4initEv+0x7a>
	if (m_semCanHandle == nullptr) return State::Error;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <_ZN15FdcanController4initEv+0x38>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e020      	b.n	8008f3a <_ZN15FdcanController4initEv+0x7a>

	if (HAL_FDCAN_Start(m_hfdcan) != HAL_OK)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7f8 fc61 	bl	80017c4 <HAL_FDCAN_Start>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <_ZN15FdcanController4initEv+0x56>
	{
		return State::ErrorInit;
 8008f12:	2302      	movs	r3, #2
 8008f14:	e011      	b.n	8008f3a <_ZN15FdcanController4initEv+0x7a>
	}

	if (HAL_FDCAN_ActivateNotification(m_hfdcan,
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2207      	movs	r2, #7
 8008f1c:	2181      	movs	r1, #129	@ 0x81
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f8 fdc4 	bl	8001aac <HAL_FDCAN_ActivateNotification>
 8008f24:	4603      	mov	r3, r0
		FDCAN_IT_TX_COMPLETE | FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
		FDCAN_TX_BUFFER0 | FDCAN_TX_BUFFER1 | FDCAN_TX_BUFFER2) != HAL_OK)
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bf14      	ite	ne
 8008f2a:	2301      	movne	r3, #1
 8008f2c:	2300      	moveq	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
	if (HAL_FDCAN_ActivateNotification(m_hfdcan,
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <_ZN15FdcanController4initEv+0x78>
	{
		return State::ErrorInit;
 8008f34:	2302      	movs	r3, #2
 8008f36:	e000      	b.n	8008f3a <_ZN15FdcanController4initEv+0x7a>
	}

	return State::Ok;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <_ZN15FdcanController4sendE8FdcanMsg>:

FdcanController::State FdcanController::send(const FdcanMsg msg)
{
 8008f42:	b084      	sub	sp, #16
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	f107 0014 	add.w	r0, r7, #20
 8008f50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (osMutexAcquire(*m_mutexCanHandle, osWaitForever) != osOK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fc fadd 	bl	800551e <osMutexAcquire>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bf14      	ite	ne
 8008f6a:	2301      	movne	r3, #1
 8008f6c:	2300      	moveq	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <_ZN15FdcanController4sendE8FdcanMsg+0x36>
	{
		return State::ErrorSend;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e044      	b.n	8009002 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (HAL_FDCAN_AddMessageToTxFifoQ(m_hfdcan, &msg.txHeader, msg.data) != HAL_OK)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6858      	ldr	r0, [r3, #4]
 8008f7c:	f107 0314 	add.w	r3, r7, #20
 8008f80:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8008f84:	f107 0314 	add.w	r3, r7, #20
 8008f88:	3328      	adds	r3, #40	@ 0x28
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	f7f8 fc42 	bl	8001814 <HAL_FDCAN_AddMessageToTxFifoQ>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bf14      	ite	ne
 8008f96:	2301      	movne	r3, #1
 8008f98:	2300      	moveq	r3, #0
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <_ZN15FdcanController4sendE8FdcanMsg+0x6e>
	{
		osMutexRelease(*m_mutexCanHandle);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fc fb04 	bl	80055b4 <osMutexRelease>
		return State::ErrorSend;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e028      	b.n	8009002 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (osSemaphoreAcquire(*m_semCanHandle, osWaitForever) != osOK)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fc fbc0 	bl	8005740 <osSemaphoreAcquire>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	bf14      	ite	ne
 8008fc6:	2301      	movne	r3, #1
 8008fc8:	2300      	moveq	r3, #0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d007      	beq.n	8008fe0 <_ZN15FdcanController4sendE8FdcanMsg+0x9e>
	{
		osMutexRelease(*m_mutexCanHandle);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fc faec 	bl	80055b4 <osMutexRelease>
		return State::ErrorSend;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e010      	b.n	8009002 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (osMutexRelease(*m_mutexCanHandle) != osOK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fc fae4 	bl	80055b4 <osMutexRelease>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bf14      	ite	ne
 8008ff2:	2301      	movne	r3, #1
 8008ff4:	2300      	moveq	r3, #0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <_ZN15FdcanController4sendE8FdcanMsg+0xbe>
	{
		return State::ErrorSend;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e000      	b.n	8009002 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}

	return State::Ok;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800900c:	b004      	add	sp, #16
 800900e:	4770      	bx	lr

08009010 <_ZN15FdcanController7receiveEP8FdcanMsg>:

FdcanController::State FdcanController::receive(FdcanMsg *msg)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
	if (osMessageQueueGet(*m_queueCanHandle, msg, nullptr, osWaitForever) != osOK)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009024:	2200      	movs	r2, #0
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	f7fc fcf4 	bl	8005a14 <osMessageQueueGet>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	bf14      	ite	ne
 8009032:	2301      	movne	r3, #1
 8009034:	2300      	moveq	r3, #0
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <_ZN15FdcanController7receiveEP8FdcanMsg+0x30>
	{
		return State::ErrorReceive;
 800903c:	2304      	movs	r3, #4
 800903e:	e000      	b.n	8009042 <_ZN15FdcanController7receiveEP8FdcanMsg+0x32>
	}

	return State::Ok;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef>:

FdcanController::State FdcanController::updateInterruptTx(FDCAN_HandleTypeDef *hfdcan)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	6039      	str	r1, [r7, #0]
	if (hfdcan->Instance == m_hfdcan->Instance)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d10f      	bne.n	8009082 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x38>
	{
		if (osSemaphoreRelease(*m_semCanHandle) != osOK)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4618      	mov	r0, r3
 800906a:	f7fc fbbb 	bl	80057e4 <osSemaphoreRelease>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	bf14      	ite	ne
 8009074:	2301      	movne	r3, #1
 8009076:	2300      	moveq	r3, #0
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x38>
		{
			return State::ErrorIsrTx;
 800907e:	2305      	movs	r3, #5
 8009080:	e000      	b.n	8009084 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x3a>
		}
	}

	return State::Ok;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm>:

FdcanController::State FdcanController::updateInterruptRx(FDCAN_HandleTypeDef *hfdcan, uint32_t isrType)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b09a      	sub	sp, #104	@ 0x68
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
	if (hfdcan->Instance == m_hfdcan->Instance)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d12b      	bne.n	80090fe <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x72>
	{
		if (isrType & FDCAN_IT_RX_FIFO0_NEW_MESSAGE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d026      	beq.n	80090fe <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x72>
		{
			FdcanMsg msg;
			if (HAL_FDCAN_GetRxMessage(m_hfdcan, FDCAN_RX_FIFO0, &msg.rxHeader, msg.data) != HAL_OK)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6858      	ldr	r0, [r3, #4]
 80090b4:	f107 0314 	add.w	r3, r7, #20
 80090b8:	334c      	adds	r3, #76	@ 0x4c
 80090ba:	f107 0214 	add.w	r2, r7, #20
 80090be:	2140      	movs	r1, #64	@ 0x40
 80090c0:	f7f8 fbec 	bl	800189c <HAL_FDCAN_GetRxMessage>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bf14      	ite	ne
 80090ca:	2301      	movne	r3, #1
 80090cc:	2300      	moveq	r3, #0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x4c>
			{
				return State::ErrorIsrRx;
 80090d4:	2306      	movs	r3, #6
 80090d6:	e013      	b.n	8009100 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x74>
			}
			if (osMessageQueuePut(*m_queueCanHandle, &msg, 0, 0) != osOK)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	6818      	ldr	r0, [r3, #0]
 80090de:	f107 0114 	add.w	r1, r7, #20
 80090e2:	2300      	movs	r3, #0
 80090e4:	2200      	movs	r2, #0
 80090e6:	f7fc fc35 	bl	8005954 <osMessageQueuePut>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bf14      	ite	ne
 80090f0:	2301      	movne	r3, #1
 80090f2:	2300      	moveq	r3, #0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x72>
			{
				return State::ErrorIsrRx;
 80090fa:	2306      	movs	r3, #6
 80090fc:	e000      	b.n	8009100 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x74>
			}
		}
	}

	return State::Ok;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3768      	adds	r7, #104	@ 0x68
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZdlPvj>:
 8009108:	f000 b800 	b.w	800910c <_ZdlPv>

0800910c <_ZdlPv>:
 800910c:	f000 b800 	b.w	8009110 <free>

08009110 <free>:
 8009110:	4b02      	ldr	r3, [pc, #8]	@ (800911c <free+0xc>)
 8009112:	4601      	mov	r1, r0
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	f000 bb55 	b.w	80097c4 <_free_r>
 800911a:	bf00      	nop
 800911c:	2000001c 	.word	0x2000001c

08009120 <sbrk_aligned>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	4e0f      	ldr	r6, [pc, #60]	@ (8009160 <sbrk_aligned+0x40>)
 8009124:	460c      	mov	r4, r1
 8009126:	6831      	ldr	r1, [r6, #0]
 8009128:	4605      	mov	r5, r0
 800912a:	b911      	cbnz	r1, 8009132 <sbrk_aligned+0x12>
 800912c:	f000 faec 	bl	8009708 <_sbrk_r>
 8009130:	6030      	str	r0, [r6, #0]
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 fae7 	bl	8009708 <_sbrk_r>
 800913a:	1c43      	adds	r3, r0, #1
 800913c:	d103      	bne.n	8009146 <sbrk_aligned+0x26>
 800913e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009142:	4620      	mov	r0, r4
 8009144:	bd70      	pop	{r4, r5, r6, pc}
 8009146:	1cc4      	adds	r4, r0, #3
 8009148:	f024 0403 	bic.w	r4, r4, #3
 800914c:	42a0      	cmp	r0, r4
 800914e:	d0f8      	beq.n	8009142 <sbrk_aligned+0x22>
 8009150:	1a21      	subs	r1, r4, r0
 8009152:	4628      	mov	r0, r5
 8009154:	f000 fad8 	bl	8009708 <_sbrk_r>
 8009158:	3001      	adds	r0, #1
 800915a:	d1f2      	bne.n	8009142 <sbrk_aligned+0x22>
 800915c:	e7ef      	b.n	800913e <sbrk_aligned+0x1e>
 800915e:	bf00      	nop
 8009160:	20003690 	.word	0x20003690

08009164 <_malloc_r>:
 8009164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009168:	1ccd      	adds	r5, r1, #3
 800916a:	f025 0503 	bic.w	r5, r5, #3
 800916e:	3508      	adds	r5, #8
 8009170:	2d0c      	cmp	r5, #12
 8009172:	bf38      	it	cc
 8009174:	250c      	movcc	r5, #12
 8009176:	2d00      	cmp	r5, #0
 8009178:	4606      	mov	r6, r0
 800917a:	db01      	blt.n	8009180 <_malloc_r+0x1c>
 800917c:	42a9      	cmp	r1, r5
 800917e:	d904      	bls.n	800918a <_malloc_r+0x26>
 8009180:	230c      	movs	r3, #12
 8009182:	6033      	str	r3, [r6, #0]
 8009184:	2000      	movs	r0, #0
 8009186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800918a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009260 <_malloc_r+0xfc>
 800918e:	f000 f869 	bl	8009264 <__malloc_lock>
 8009192:	f8d8 3000 	ldr.w	r3, [r8]
 8009196:	461c      	mov	r4, r3
 8009198:	bb44      	cbnz	r4, 80091ec <_malloc_r+0x88>
 800919a:	4629      	mov	r1, r5
 800919c:	4630      	mov	r0, r6
 800919e:	f7ff ffbf 	bl	8009120 <sbrk_aligned>
 80091a2:	1c43      	adds	r3, r0, #1
 80091a4:	4604      	mov	r4, r0
 80091a6:	d158      	bne.n	800925a <_malloc_r+0xf6>
 80091a8:	f8d8 4000 	ldr.w	r4, [r8]
 80091ac:	4627      	mov	r7, r4
 80091ae:	2f00      	cmp	r7, #0
 80091b0:	d143      	bne.n	800923a <_malloc_r+0xd6>
 80091b2:	2c00      	cmp	r4, #0
 80091b4:	d04b      	beq.n	800924e <_malloc_r+0xea>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	4639      	mov	r1, r7
 80091ba:	4630      	mov	r0, r6
 80091bc:	eb04 0903 	add.w	r9, r4, r3
 80091c0:	f000 faa2 	bl	8009708 <_sbrk_r>
 80091c4:	4581      	cmp	r9, r0
 80091c6:	d142      	bne.n	800924e <_malloc_r+0xea>
 80091c8:	6821      	ldr	r1, [r4, #0]
 80091ca:	1a6d      	subs	r5, r5, r1
 80091cc:	4629      	mov	r1, r5
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff ffa6 	bl	8009120 <sbrk_aligned>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d03a      	beq.n	800924e <_malloc_r+0xea>
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	442b      	add	r3, r5
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	f8d8 3000 	ldr.w	r3, [r8]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	bb62      	cbnz	r2, 8009240 <_malloc_r+0xdc>
 80091e6:	f8c8 7000 	str.w	r7, [r8]
 80091ea:	e00f      	b.n	800920c <_malloc_r+0xa8>
 80091ec:	6822      	ldr	r2, [r4, #0]
 80091ee:	1b52      	subs	r2, r2, r5
 80091f0:	d420      	bmi.n	8009234 <_malloc_r+0xd0>
 80091f2:	2a0b      	cmp	r2, #11
 80091f4:	d917      	bls.n	8009226 <_malloc_r+0xc2>
 80091f6:	1961      	adds	r1, r4, r5
 80091f8:	42a3      	cmp	r3, r4
 80091fa:	6025      	str	r5, [r4, #0]
 80091fc:	bf18      	it	ne
 80091fe:	6059      	strne	r1, [r3, #4]
 8009200:	6863      	ldr	r3, [r4, #4]
 8009202:	bf08      	it	eq
 8009204:	f8c8 1000 	streq.w	r1, [r8]
 8009208:	5162      	str	r2, [r4, r5]
 800920a:	604b      	str	r3, [r1, #4]
 800920c:	4630      	mov	r0, r6
 800920e:	f000 f82f 	bl	8009270 <__malloc_unlock>
 8009212:	f104 000b 	add.w	r0, r4, #11
 8009216:	1d23      	adds	r3, r4, #4
 8009218:	f020 0007 	bic.w	r0, r0, #7
 800921c:	1ac2      	subs	r2, r0, r3
 800921e:	bf1c      	itt	ne
 8009220:	1a1b      	subne	r3, r3, r0
 8009222:	50a3      	strne	r3, [r4, r2]
 8009224:	e7af      	b.n	8009186 <_malloc_r+0x22>
 8009226:	6862      	ldr	r2, [r4, #4]
 8009228:	42a3      	cmp	r3, r4
 800922a:	bf0c      	ite	eq
 800922c:	f8c8 2000 	streq.w	r2, [r8]
 8009230:	605a      	strne	r2, [r3, #4]
 8009232:	e7eb      	b.n	800920c <_malloc_r+0xa8>
 8009234:	4623      	mov	r3, r4
 8009236:	6864      	ldr	r4, [r4, #4]
 8009238:	e7ae      	b.n	8009198 <_malloc_r+0x34>
 800923a:	463c      	mov	r4, r7
 800923c:	687f      	ldr	r7, [r7, #4]
 800923e:	e7b6      	b.n	80091ae <_malloc_r+0x4a>
 8009240:	461a      	mov	r2, r3
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	42a3      	cmp	r3, r4
 8009246:	d1fb      	bne.n	8009240 <_malloc_r+0xdc>
 8009248:	2300      	movs	r3, #0
 800924a:	6053      	str	r3, [r2, #4]
 800924c:	e7de      	b.n	800920c <_malloc_r+0xa8>
 800924e:	230c      	movs	r3, #12
 8009250:	6033      	str	r3, [r6, #0]
 8009252:	4630      	mov	r0, r6
 8009254:	f000 f80c 	bl	8009270 <__malloc_unlock>
 8009258:	e794      	b.n	8009184 <_malloc_r+0x20>
 800925a:	6005      	str	r5, [r0, #0]
 800925c:	e7d6      	b.n	800920c <_malloc_r+0xa8>
 800925e:	bf00      	nop
 8009260:	20003694 	.word	0x20003694

08009264 <__malloc_lock>:
 8009264:	4801      	ldr	r0, [pc, #4]	@ (800926c <__malloc_lock+0x8>)
 8009266:	f000 ba9c 	b.w	80097a2 <__retarget_lock_acquire_recursive>
 800926a:	bf00      	nop
 800926c:	200037d8 	.word	0x200037d8

08009270 <__malloc_unlock>:
 8009270:	4801      	ldr	r0, [pc, #4]	@ (8009278 <__malloc_unlock+0x8>)
 8009272:	f000 ba97 	b.w	80097a4 <__retarget_lock_release_recursive>
 8009276:	bf00      	nop
 8009278:	200037d8 	.word	0x200037d8

0800927c <std>:
 800927c:	2300      	movs	r3, #0
 800927e:	b510      	push	{r4, lr}
 8009280:	4604      	mov	r4, r0
 8009282:	e9c0 3300 	strd	r3, r3, [r0]
 8009286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800928a:	6083      	str	r3, [r0, #8]
 800928c:	8181      	strh	r1, [r0, #12]
 800928e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009290:	81c2      	strh	r2, [r0, #14]
 8009292:	6183      	str	r3, [r0, #24]
 8009294:	4619      	mov	r1, r3
 8009296:	2208      	movs	r2, #8
 8009298:	305c      	adds	r0, #92	@ 0x5c
 800929a:	f000 f9f9 	bl	8009690 <memset>
 800929e:	4b0d      	ldr	r3, [pc, #52]	@ (80092d4 <std+0x58>)
 80092a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80092a2:	4b0d      	ldr	r3, [pc, #52]	@ (80092d8 <std+0x5c>)
 80092a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092a6:	4b0d      	ldr	r3, [pc, #52]	@ (80092dc <std+0x60>)
 80092a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092aa:	4b0d      	ldr	r3, [pc, #52]	@ (80092e0 <std+0x64>)
 80092ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80092ae:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <std+0x68>)
 80092b0:	6224      	str	r4, [r4, #32]
 80092b2:	429c      	cmp	r4, r3
 80092b4:	d006      	beq.n	80092c4 <std+0x48>
 80092b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80092ba:	4294      	cmp	r4, r2
 80092bc:	d002      	beq.n	80092c4 <std+0x48>
 80092be:	33d0      	adds	r3, #208	@ 0xd0
 80092c0:	429c      	cmp	r4, r3
 80092c2:	d105      	bne.n	80092d0 <std+0x54>
 80092c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80092c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092cc:	f000 ba68 	b.w	80097a0 <__retarget_lock_init_recursive>
 80092d0:	bd10      	pop	{r4, pc}
 80092d2:	bf00      	nop
 80092d4:	080094e1 	.word	0x080094e1
 80092d8:	08009503 	.word	0x08009503
 80092dc:	0800953b 	.word	0x0800953b
 80092e0:	0800955f 	.word	0x0800955f
 80092e4:	20003698 	.word	0x20003698

080092e8 <stdio_exit_handler>:
 80092e8:	4a02      	ldr	r2, [pc, #8]	@ (80092f4 <stdio_exit_handler+0xc>)
 80092ea:	4903      	ldr	r1, [pc, #12]	@ (80092f8 <stdio_exit_handler+0x10>)
 80092ec:	4803      	ldr	r0, [pc, #12]	@ (80092fc <stdio_exit_handler+0x14>)
 80092ee:	f000 b869 	b.w	80093c4 <_fwalk_sglue>
 80092f2:	bf00      	nop
 80092f4:	20000010 	.word	0x20000010
 80092f8:	08009f01 	.word	0x08009f01
 80092fc:	20000020 	.word	0x20000020

08009300 <cleanup_stdio>:
 8009300:	6841      	ldr	r1, [r0, #4]
 8009302:	4b0c      	ldr	r3, [pc, #48]	@ (8009334 <cleanup_stdio+0x34>)
 8009304:	4299      	cmp	r1, r3
 8009306:	b510      	push	{r4, lr}
 8009308:	4604      	mov	r4, r0
 800930a:	d001      	beq.n	8009310 <cleanup_stdio+0x10>
 800930c:	f000 fdf8 	bl	8009f00 <_fflush_r>
 8009310:	68a1      	ldr	r1, [r4, #8]
 8009312:	4b09      	ldr	r3, [pc, #36]	@ (8009338 <cleanup_stdio+0x38>)
 8009314:	4299      	cmp	r1, r3
 8009316:	d002      	beq.n	800931e <cleanup_stdio+0x1e>
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fdf1 	bl	8009f00 <_fflush_r>
 800931e:	68e1      	ldr	r1, [r4, #12]
 8009320:	4b06      	ldr	r3, [pc, #24]	@ (800933c <cleanup_stdio+0x3c>)
 8009322:	4299      	cmp	r1, r3
 8009324:	d004      	beq.n	8009330 <cleanup_stdio+0x30>
 8009326:	4620      	mov	r0, r4
 8009328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800932c:	f000 bde8 	b.w	8009f00 <_fflush_r>
 8009330:	bd10      	pop	{r4, pc}
 8009332:	bf00      	nop
 8009334:	20003698 	.word	0x20003698
 8009338:	20003700 	.word	0x20003700
 800933c:	20003768 	.word	0x20003768

08009340 <global_stdio_init.part.0>:
 8009340:	b510      	push	{r4, lr}
 8009342:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <global_stdio_init.part.0+0x30>)
 8009344:	4c0b      	ldr	r4, [pc, #44]	@ (8009374 <global_stdio_init.part.0+0x34>)
 8009346:	4a0c      	ldr	r2, [pc, #48]	@ (8009378 <global_stdio_init.part.0+0x38>)
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	4620      	mov	r0, r4
 800934c:	2200      	movs	r2, #0
 800934e:	2104      	movs	r1, #4
 8009350:	f7ff ff94 	bl	800927c <std>
 8009354:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009358:	2201      	movs	r2, #1
 800935a:	2109      	movs	r1, #9
 800935c:	f7ff ff8e 	bl	800927c <std>
 8009360:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009364:	2202      	movs	r2, #2
 8009366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800936a:	2112      	movs	r1, #18
 800936c:	f7ff bf86 	b.w	800927c <std>
 8009370:	200037d0 	.word	0x200037d0
 8009374:	20003698 	.word	0x20003698
 8009378:	080092e9 	.word	0x080092e9

0800937c <__sfp_lock_acquire>:
 800937c:	4801      	ldr	r0, [pc, #4]	@ (8009384 <__sfp_lock_acquire+0x8>)
 800937e:	f000 ba10 	b.w	80097a2 <__retarget_lock_acquire_recursive>
 8009382:	bf00      	nop
 8009384:	200037d9 	.word	0x200037d9

08009388 <__sfp_lock_release>:
 8009388:	4801      	ldr	r0, [pc, #4]	@ (8009390 <__sfp_lock_release+0x8>)
 800938a:	f000 ba0b 	b.w	80097a4 <__retarget_lock_release_recursive>
 800938e:	bf00      	nop
 8009390:	200037d9 	.word	0x200037d9

08009394 <__sinit>:
 8009394:	b510      	push	{r4, lr}
 8009396:	4604      	mov	r4, r0
 8009398:	f7ff fff0 	bl	800937c <__sfp_lock_acquire>
 800939c:	6a23      	ldr	r3, [r4, #32]
 800939e:	b11b      	cbz	r3, 80093a8 <__sinit+0x14>
 80093a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a4:	f7ff bff0 	b.w	8009388 <__sfp_lock_release>
 80093a8:	4b04      	ldr	r3, [pc, #16]	@ (80093bc <__sinit+0x28>)
 80093aa:	6223      	str	r3, [r4, #32]
 80093ac:	4b04      	ldr	r3, [pc, #16]	@ (80093c0 <__sinit+0x2c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f5      	bne.n	80093a0 <__sinit+0xc>
 80093b4:	f7ff ffc4 	bl	8009340 <global_stdio_init.part.0>
 80093b8:	e7f2      	b.n	80093a0 <__sinit+0xc>
 80093ba:	bf00      	nop
 80093bc:	08009301 	.word	0x08009301
 80093c0:	200037d0 	.word	0x200037d0

080093c4 <_fwalk_sglue>:
 80093c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c8:	4607      	mov	r7, r0
 80093ca:	4688      	mov	r8, r1
 80093cc:	4614      	mov	r4, r2
 80093ce:	2600      	movs	r6, #0
 80093d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093d4:	f1b9 0901 	subs.w	r9, r9, #1
 80093d8:	d505      	bpl.n	80093e6 <_fwalk_sglue+0x22>
 80093da:	6824      	ldr	r4, [r4, #0]
 80093dc:	2c00      	cmp	r4, #0
 80093de:	d1f7      	bne.n	80093d0 <_fwalk_sglue+0xc>
 80093e0:	4630      	mov	r0, r6
 80093e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093e6:	89ab      	ldrh	r3, [r5, #12]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d907      	bls.n	80093fc <_fwalk_sglue+0x38>
 80093ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093f0:	3301      	adds	r3, #1
 80093f2:	d003      	beq.n	80093fc <_fwalk_sglue+0x38>
 80093f4:	4629      	mov	r1, r5
 80093f6:	4638      	mov	r0, r7
 80093f8:	47c0      	blx	r8
 80093fa:	4306      	orrs	r6, r0
 80093fc:	3568      	adds	r5, #104	@ 0x68
 80093fe:	e7e9      	b.n	80093d4 <_fwalk_sglue+0x10>

08009400 <iprintf>:
 8009400:	b40f      	push	{r0, r1, r2, r3}
 8009402:	b507      	push	{r0, r1, r2, lr}
 8009404:	4906      	ldr	r1, [pc, #24]	@ (8009420 <iprintf+0x20>)
 8009406:	ab04      	add	r3, sp, #16
 8009408:	6808      	ldr	r0, [r1, #0]
 800940a:	f853 2b04 	ldr.w	r2, [r3], #4
 800940e:	6881      	ldr	r1, [r0, #8]
 8009410:	9301      	str	r3, [sp, #4]
 8009412:	f000 fa4b 	bl	80098ac <_vfiprintf_r>
 8009416:	b003      	add	sp, #12
 8009418:	f85d eb04 	ldr.w	lr, [sp], #4
 800941c:	b004      	add	sp, #16
 800941e:	4770      	bx	lr
 8009420:	2000001c 	.word	0x2000001c

08009424 <_puts_r>:
 8009424:	6a03      	ldr	r3, [r0, #32]
 8009426:	b570      	push	{r4, r5, r6, lr}
 8009428:	6884      	ldr	r4, [r0, #8]
 800942a:	4605      	mov	r5, r0
 800942c:	460e      	mov	r6, r1
 800942e:	b90b      	cbnz	r3, 8009434 <_puts_r+0x10>
 8009430:	f7ff ffb0 	bl	8009394 <__sinit>
 8009434:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009436:	07db      	lsls	r3, r3, #31
 8009438:	d405      	bmi.n	8009446 <_puts_r+0x22>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	0598      	lsls	r0, r3, #22
 800943e:	d402      	bmi.n	8009446 <_puts_r+0x22>
 8009440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009442:	f000 f9ae 	bl	80097a2 <__retarget_lock_acquire_recursive>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	0719      	lsls	r1, r3, #28
 800944a:	d502      	bpl.n	8009452 <_puts_r+0x2e>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d135      	bne.n	80094be <_puts_r+0x9a>
 8009452:	4621      	mov	r1, r4
 8009454:	4628      	mov	r0, r5
 8009456:	f000 f8c5 	bl	80095e4 <__swsetup_r>
 800945a:	b380      	cbz	r0, 80094be <_puts_r+0x9a>
 800945c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009460:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009462:	07da      	lsls	r2, r3, #31
 8009464:	d405      	bmi.n	8009472 <_puts_r+0x4e>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	059b      	lsls	r3, r3, #22
 800946a:	d402      	bmi.n	8009472 <_puts_r+0x4e>
 800946c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800946e:	f000 f999 	bl	80097a4 <__retarget_lock_release_recursive>
 8009472:	4628      	mov	r0, r5
 8009474:	bd70      	pop	{r4, r5, r6, pc}
 8009476:	2b00      	cmp	r3, #0
 8009478:	da04      	bge.n	8009484 <_puts_r+0x60>
 800947a:	69a2      	ldr	r2, [r4, #24]
 800947c:	429a      	cmp	r2, r3
 800947e:	dc17      	bgt.n	80094b0 <_puts_r+0x8c>
 8009480:	290a      	cmp	r1, #10
 8009482:	d015      	beq.n	80094b0 <_puts_r+0x8c>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	6022      	str	r2, [r4, #0]
 800948a:	7019      	strb	r1, [r3, #0]
 800948c:	68a3      	ldr	r3, [r4, #8]
 800948e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009492:	3b01      	subs	r3, #1
 8009494:	60a3      	str	r3, [r4, #8]
 8009496:	2900      	cmp	r1, #0
 8009498:	d1ed      	bne.n	8009476 <_puts_r+0x52>
 800949a:	2b00      	cmp	r3, #0
 800949c:	da11      	bge.n	80094c2 <_puts_r+0x9e>
 800949e:	4622      	mov	r2, r4
 80094a0:	210a      	movs	r1, #10
 80094a2:	4628      	mov	r0, r5
 80094a4:	f000 f85f 	bl	8009566 <__swbuf_r>
 80094a8:	3001      	adds	r0, #1
 80094aa:	d0d7      	beq.n	800945c <_puts_r+0x38>
 80094ac:	250a      	movs	r5, #10
 80094ae:	e7d7      	b.n	8009460 <_puts_r+0x3c>
 80094b0:	4622      	mov	r2, r4
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 f857 	bl	8009566 <__swbuf_r>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d1e7      	bne.n	800948c <_puts_r+0x68>
 80094bc:	e7ce      	b.n	800945c <_puts_r+0x38>
 80094be:	3e01      	subs	r6, #1
 80094c0:	e7e4      	b.n	800948c <_puts_r+0x68>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	6022      	str	r2, [r4, #0]
 80094c8:	220a      	movs	r2, #10
 80094ca:	701a      	strb	r2, [r3, #0]
 80094cc:	e7ee      	b.n	80094ac <_puts_r+0x88>
	...

080094d0 <puts>:
 80094d0:	4b02      	ldr	r3, [pc, #8]	@ (80094dc <puts+0xc>)
 80094d2:	4601      	mov	r1, r0
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f7ff bfa5 	b.w	8009424 <_puts_r>
 80094da:	bf00      	nop
 80094dc:	2000001c 	.word	0x2000001c

080094e0 <__sread>:
 80094e0:	b510      	push	{r4, lr}
 80094e2:	460c      	mov	r4, r1
 80094e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e8:	f000 f8fc 	bl	80096e4 <_read_r>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	bfab      	itete	ge
 80094f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094f2:	89a3      	ldrhlt	r3, [r4, #12]
 80094f4:	181b      	addge	r3, r3, r0
 80094f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094fa:	bfac      	ite	ge
 80094fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094fe:	81a3      	strhlt	r3, [r4, #12]
 8009500:	bd10      	pop	{r4, pc}

08009502 <__swrite>:
 8009502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009506:	461f      	mov	r7, r3
 8009508:	898b      	ldrh	r3, [r1, #12]
 800950a:	05db      	lsls	r3, r3, #23
 800950c:	4605      	mov	r5, r0
 800950e:	460c      	mov	r4, r1
 8009510:	4616      	mov	r6, r2
 8009512:	d505      	bpl.n	8009520 <__swrite+0x1e>
 8009514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009518:	2302      	movs	r3, #2
 800951a:	2200      	movs	r2, #0
 800951c:	f000 f8d0 	bl	80096c0 <_lseek_r>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	4632      	mov	r2, r6
 800952e:	463b      	mov	r3, r7
 8009530:	4628      	mov	r0, r5
 8009532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009536:	f000 b8f7 	b.w	8009728 <_write_r>

0800953a <__sseek>:
 800953a:	b510      	push	{r4, lr}
 800953c:	460c      	mov	r4, r1
 800953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009542:	f000 f8bd 	bl	80096c0 <_lseek_r>
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	bf15      	itete	ne
 800954c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800954e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009556:	81a3      	strheq	r3, [r4, #12]
 8009558:	bf18      	it	ne
 800955a:	81a3      	strhne	r3, [r4, #12]
 800955c:	bd10      	pop	{r4, pc}

0800955e <__sclose>:
 800955e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009562:	f000 b89d 	b.w	80096a0 <_close_r>

08009566 <__swbuf_r>:
 8009566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009568:	460e      	mov	r6, r1
 800956a:	4614      	mov	r4, r2
 800956c:	4605      	mov	r5, r0
 800956e:	b118      	cbz	r0, 8009578 <__swbuf_r+0x12>
 8009570:	6a03      	ldr	r3, [r0, #32]
 8009572:	b90b      	cbnz	r3, 8009578 <__swbuf_r+0x12>
 8009574:	f7ff ff0e 	bl	8009394 <__sinit>
 8009578:	69a3      	ldr	r3, [r4, #24]
 800957a:	60a3      	str	r3, [r4, #8]
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	071a      	lsls	r2, r3, #28
 8009580:	d501      	bpl.n	8009586 <__swbuf_r+0x20>
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	b943      	cbnz	r3, 8009598 <__swbuf_r+0x32>
 8009586:	4621      	mov	r1, r4
 8009588:	4628      	mov	r0, r5
 800958a:	f000 f82b 	bl	80095e4 <__swsetup_r>
 800958e:	b118      	cbz	r0, 8009598 <__swbuf_r+0x32>
 8009590:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009594:	4638      	mov	r0, r7
 8009596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	6922      	ldr	r2, [r4, #16]
 800959c:	1a98      	subs	r0, r3, r2
 800959e:	6963      	ldr	r3, [r4, #20]
 80095a0:	b2f6      	uxtb	r6, r6
 80095a2:	4283      	cmp	r3, r0
 80095a4:	4637      	mov	r7, r6
 80095a6:	dc05      	bgt.n	80095b4 <__swbuf_r+0x4e>
 80095a8:	4621      	mov	r1, r4
 80095aa:	4628      	mov	r0, r5
 80095ac:	f000 fca8 	bl	8009f00 <_fflush_r>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d1ed      	bne.n	8009590 <__swbuf_r+0x2a>
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	60a3      	str	r3, [r4, #8]
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	6022      	str	r2, [r4, #0]
 80095c0:	701e      	strb	r6, [r3, #0]
 80095c2:	6962      	ldr	r2, [r4, #20]
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d004      	beq.n	80095d4 <__swbuf_r+0x6e>
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	07db      	lsls	r3, r3, #31
 80095ce:	d5e1      	bpl.n	8009594 <__swbuf_r+0x2e>
 80095d0:	2e0a      	cmp	r6, #10
 80095d2:	d1df      	bne.n	8009594 <__swbuf_r+0x2e>
 80095d4:	4621      	mov	r1, r4
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 fc92 	bl	8009f00 <_fflush_r>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d0d9      	beq.n	8009594 <__swbuf_r+0x2e>
 80095e0:	e7d6      	b.n	8009590 <__swbuf_r+0x2a>
	...

080095e4 <__swsetup_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4b29      	ldr	r3, [pc, #164]	@ (800968c <__swsetup_r+0xa8>)
 80095e8:	4605      	mov	r5, r0
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	460c      	mov	r4, r1
 80095ee:	b118      	cbz	r0, 80095f8 <__swsetup_r+0x14>
 80095f0:	6a03      	ldr	r3, [r0, #32]
 80095f2:	b90b      	cbnz	r3, 80095f8 <__swsetup_r+0x14>
 80095f4:	f7ff fece 	bl	8009394 <__sinit>
 80095f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095fc:	0719      	lsls	r1, r3, #28
 80095fe:	d422      	bmi.n	8009646 <__swsetup_r+0x62>
 8009600:	06da      	lsls	r2, r3, #27
 8009602:	d407      	bmi.n	8009614 <__swsetup_r+0x30>
 8009604:	2209      	movs	r2, #9
 8009606:	602a      	str	r2, [r5, #0]
 8009608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800960c:	81a3      	strh	r3, [r4, #12]
 800960e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009612:	e033      	b.n	800967c <__swsetup_r+0x98>
 8009614:	0758      	lsls	r0, r3, #29
 8009616:	d512      	bpl.n	800963e <__swsetup_r+0x5a>
 8009618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800961a:	b141      	cbz	r1, 800962e <__swsetup_r+0x4a>
 800961c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009620:	4299      	cmp	r1, r3
 8009622:	d002      	beq.n	800962a <__swsetup_r+0x46>
 8009624:	4628      	mov	r0, r5
 8009626:	f000 f8cd 	bl	80097c4 <_free_r>
 800962a:	2300      	movs	r3, #0
 800962c:	6363      	str	r3, [r4, #52]	@ 0x34
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	2300      	movs	r3, #0
 8009638:	6063      	str	r3, [r4, #4]
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	f043 0308 	orr.w	r3, r3, #8
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	b94b      	cbnz	r3, 800965e <__swsetup_r+0x7a>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009654:	d003      	beq.n	800965e <__swsetup_r+0x7a>
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	f000 fc9f 	bl	8009f9c <__smakebuf_r>
 800965e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009662:	f013 0201 	ands.w	r2, r3, #1
 8009666:	d00a      	beq.n	800967e <__swsetup_r+0x9a>
 8009668:	2200      	movs	r2, #0
 800966a:	60a2      	str	r2, [r4, #8]
 800966c:	6962      	ldr	r2, [r4, #20]
 800966e:	4252      	negs	r2, r2
 8009670:	61a2      	str	r2, [r4, #24]
 8009672:	6922      	ldr	r2, [r4, #16]
 8009674:	b942      	cbnz	r2, 8009688 <__swsetup_r+0xa4>
 8009676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800967a:	d1c5      	bne.n	8009608 <__swsetup_r+0x24>
 800967c:	bd38      	pop	{r3, r4, r5, pc}
 800967e:	0799      	lsls	r1, r3, #30
 8009680:	bf58      	it	pl
 8009682:	6962      	ldrpl	r2, [r4, #20]
 8009684:	60a2      	str	r2, [r4, #8]
 8009686:	e7f4      	b.n	8009672 <__swsetup_r+0x8e>
 8009688:	2000      	movs	r0, #0
 800968a:	e7f7      	b.n	800967c <__swsetup_r+0x98>
 800968c:	2000001c 	.word	0x2000001c

08009690 <memset>:
 8009690:	4402      	add	r2, r0
 8009692:	4603      	mov	r3, r0
 8009694:	4293      	cmp	r3, r2
 8009696:	d100      	bne.n	800969a <memset+0xa>
 8009698:	4770      	bx	lr
 800969a:	f803 1b01 	strb.w	r1, [r3], #1
 800969e:	e7f9      	b.n	8009694 <memset+0x4>

080096a0 <_close_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d06      	ldr	r5, [pc, #24]	@ (80096bc <_close_r+0x1c>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	f7f7 fcb3 	bl	8001016 <_close>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_close_r+0x1a>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_close_r+0x1a>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	200037d4 	.word	0x200037d4

080096c0 <_lseek_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d07      	ldr	r5, [pc, #28]	@ (80096e0 <_lseek_r+0x20>)
 80096c4:	4604      	mov	r4, r0
 80096c6:	4608      	mov	r0, r1
 80096c8:	4611      	mov	r1, r2
 80096ca:	2200      	movs	r2, #0
 80096cc:	602a      	str	r2, [r5, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	f7f7 fcc8 	bl	8001064 <_lseek>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_lseek_r+0x1e>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_lseek_r+0x1e>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	200037d4 	.word	0x200037d4

080096e4 <_read_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	@ (8009704 <_read_r+0x20>)
 80096e8:	4604      	mov	r4, r0
 80096ea:	4608      	mov	r0, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	2200      	movs	r2, #0
 80096f0:	602a      	str	r2, [r5, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f7f7 fc72 	bl	8000fdc <_read>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_read_r+0x1e>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_read_r+0x1e>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	200037d4 	.word	0x200037d4

08009708 <_sbrk_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d06      	ldr	r5, [pc, #24]	@ (8009724 <_sbrk_r+0x1c>)
 800970c:	2300      	movs	r3, #0
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	f7f7 fcb4 	bl	8001080 <_sbrk>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_sbrk_r+0x1a>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_sbrk_r+0x1a>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	200037d4 	.word	0x200037d4

08009728 <_write_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d07      	ldr	r5, [pc, #28]	@ (8009748 <_write_r+0x20>)
 800972c:	4604      	mov	r4, r0
 800972e:	4608      	mov	r0, r1
 8009730:	4611      	mov	r1, r2
 8009732:	2200      	movs	r2, #0
 8009734:	602a      	str	r2, [r5, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f7f6 ff6c 	bl	8000614 <_write>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_write_r+0x1e>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_write_r+0x1e>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	200037d4 	.word	0x200037d4

0800974c <__errno>:
 800974c:	4b01      	ldr	r3, [pc, #4]	@ (8009754 <__errno+0x8>)
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	2000001c 	.word	0x2000001c

08009758 <__libc_init_array>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	4d0d      	ldr	r5, [pc, #52]	@ (8009790 <__libc_init_array+0x38>)
 800975c:	4c0d      	ldr	r4, [pc, #52]	@ (8009794 <__libc_init_array+0x3c>)
 800975e:	1b64      	subs	r4, r4, r5
 8009760:	10a4      	asrs	r4, r4, #2
 8009762:	2600      	movs	r6, #0
 8009764:	42a6      	cmp	r6, r4
 8009766:	d109      	bne.n	800977c <__libc_init_array+0x24>
 8009768:	4d0b      	ldr	r5, [pc, #44]	@ (8009798 <__libc_init_array+0x40>)
 800976a:	4c0c      	ldr	r4, [pc, #48]	@ (800979c <__libc_init_array+0x44>)
 800976c:	f000 fc74 	bl	800a058 <_init>
 8009770:	1b64      	subs	r4, r4, r5
 8009772:	10a4      	asrs	r4, r4, #2
 8009774:	2600      	movs	r6, #0
 8009776:	42a6      	cmp	r6, r4
 8009778:	d105      	bne.n	8009786 <__libc_init_array+0x2e>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009780:	4798      	blx	r3
 8009782:	3601      	adds	r6, #1
 8009784:	e7ee      	b.n	8009764 <__libc_init_array+0xc>
 8009786:	f855 3b04 	ldr.w	r3, [r5], #4
 800978a:	4798      	blx	r3
 800978c:	3601      	adds	r6, #1
 800978e:	e7f2      	b.n	8009776 <__libc_init_array+0x1e>
 8009790:	0800a220 	.word	0x0800a220
 8009794:	0800a220 	.word	0x0800a220
 8009798:	0800a220 	.word	0x0800a220
 800979c:	0800a228 	.word	0x0800a228

080097a0 <__retarget_lock_init_recursive>:
 80097a0:	4770      	bx	lr

080097a2 <__retarget_lock_acquire_recursive>:
 80097a2:	4770      	bx	lr

080097a4 <__retarget_lock_release_recursive>:
 80097a4:	4770      	bx	lr

080097a6 <memcpy>:
 80097a6:	440a      	add	r2, r1
 80097a8:	4291      	cmp	r1, r2
 80097aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80097ae:	d100      	bne.n	80097b2 <memcpy+0xc>
 80097b0:	4770      	bx	lr
 80097b2:	b510      	push	{r4, lr}
 80097b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097bc:	4291      	cmp	r1, r2
 80097be:	d1f9      	bne.n	80097b4 <memcpy+0xe>
 80097c0:	bd10      	pop	{r4, pc}
	...

080097c4 <_free_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4605      	mov	r5, r0
 80097c8:	2900      	cmp	r1, #0
 80097ca:	d041      	beq.n	8009850 <_free_r+0x8c>
 80097cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097d0:	1f0c      	subs	r4, r1, #4
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bfb8      	it	lt
 80097d6:	18e4      	addlt	r4, r4, r3
 80097d8:	f7ff fd44 	bl	8009264 <__malloc_lock>
 80097dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009854 <_free_r+0x90>)
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	b933      	cbnz	r3, 80097f0 <_free_r+0x2c>
 80097e2:	6063      	str	r3, [r4, #4]
 80097e4:	6014      	str	r4, [r2, #0]
 80097e6:	4628      	mov	r0, r5
 80097e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ec:	f7ff bd40 	b.w	8009270 <__malloc_unlock>
 80097f0:	42a3      	cmp	r3, r4
 80097f2:	d908      	bls.n	8009806 <_free_r+0x42>
 80097f4:	6820      	ldr	r0, [r4, #0]
 80097f6:	1821      	adds	r1, r4, r0
 80097f8:	428b      	cmp	r3, r1
 80097fa:	bf01      	itttt	eq
 80097fc:	6819      	ldreq	r1, [r3, #0]
 80097fe:	685b      	ldreq	r3, [r3, #4]
 8009800:	1809      	addeq	r1, r1, r0
 8009802:	6021      	streq	r1, [r4, #0]
 8009804:	e7ed      	b.n	80097e2 <_free_r+0x1e>
 8009806:	461a      	mov	r2, r3
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	b10b      	cbz	r3, 8009810 <_free_r+0x4c>
 800980c:	42a3      	cmp	r3, r4
 800980e:	d9fa      	bls.n	8009806 <_free_r+0x42>
 8009810:	6811      	ldr	r1, [r2, #0]
 8009812:	1850      	adds	r0, r2, r1
 8009814:	42a0      	cmp	r0, r4
 8009816:	d10b      	bne.n	8009830 <_free_r+0x6c>
 8009818:	6820      	ldr	r0, [r4, #0]
 800981a:	4401      	add	r1, r0
 800981c:	1850      	adds	r0, r2, r1
 800981e:	4283      	cmp	r3, r0
 8009820:	6011      	str	r1, [r2, #0]
 8009822:	d1e0      	bne.n	80097e6 <_free_r+0x22>
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	6053      	str	r3, [r2, #4]
 800982a:	4408      	add	r0, r1
 800982c:	6010      	str	r0, [r2, #0]
 800982e:	e7da      	b.n	80097e6 <_free_r+0x22>
 8009830:	d902      	bls.n	8009838 <_free_r+0x74>
 8009832:	230c      	movs	r3, #12
 8009834:	602b      	str	r3, [r5, #0]
 8009836:	e7d6      	b.n	80097e6 <_free_r+0x22>
 8009838:	6820      	ldr	r0, [r4, #0]
 800983a:	1821      	adds	r1, r4, r0
 800983c:	428b      	cmp	r3, r1
 800983e:	bf04      	itt	eq
 8009840:	6819      	ldreq	r1, [r3, #0]
 8009842:	685b      	ldreq	r3, [r3, #4]
 8009844:	6063      	str	r3, [r4, #4]
 8009846:	bf04      	itt	eq
 8009848:	1809      	addeq	r1, r1, r0
 800984a:	6021      	streq	r1, [r4, #0]
 800984c:	6054      	str	r4, [r2, #4]
 800984e:	e7ca      	b.n	80097e6 <_free_r+0x22>
 8009850:	bd38      	pop	{r3, r4, r5, pc}
 8009852:	bf00      	nop
 8009854:	20003694 	.word	0x20003694

08009858 <__sfputc_r>:
 8009858:	6893      	ldr	r3, [r2, #8]
 800985a:	3b01      	subs	r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	b410      	push	{r4}
 8009860:	6093      	str	r3, [r2, #8]
 8009862:	da08      	bge.n	8009876 <__sfputc_r+0x1e>
 8009864:	6994      	ldr	r4, [r2, #24]
 8009866:	42a3      	cmp	r3, r4
 8009868:	db01      	blt.n	800986e <__sfputc_r+0x16>
 800986a:	290a      	cmp	r1, #10
 800986c:	d103      	bne.n	8009876 <__sfputc_r+0x1e>
 800986e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009872:	f7ff be78 	b.w	8009566 <__swbuf_r>
 8009876:	6813      	ldr	r3, [r2, #0]
 8009878:	1c58      	adds	r0, r3, #1
 800987a:	6010      	str	r0, [r2, #0]
 800987c:	7019      	strb	r1, [r3, #0]
 800987e:	4608      	mov	r0, r1
 8009880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009884:	4770      	bx	lr

08009886 <__sfputs_r>:
 8009886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009888:	4606      	mov	r6, r0
 800988a:	460f      	mov	r7, r1
 800988c:	4614      	mov	r4, r2
 800988e:	18d5      	adds	r5, r2, r3
 8009890:	42ac      	cmp	r4, r5
 8009892:	d101      	bne.n	8009898 <__sfputs_r+0x12>
 8009894:	2000      	movs	r0, #0
 8009896:	e007      	b.n	80098a8 <__sfputs_r+0x22>
 8009898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989c:	463a      	mov	r2, r7
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ffda 	bl	8009858 <__sfputc_r>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	d1f3      	bne.n	8009890 <__sfputs_r+0xa>
 80098a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098ac <_vfiprintf_r>:
 80098ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b0:	460d      	mov	r5, r1
 80098b2:	b09d      	sub	sp, #116	@ 0x74
 80098b4:	4614      	mov	r4, r2
 80098b6:	4698      	mov	r8, r3
 80098b8:	4606      	mov	r6, r0
 80098ba:	b118      	cbz	r0, 80098c4 <_vfiprintf_r+0x18>
 80098bc:	6a03      	ldr	r3, [r0, #32]
 80098be:	b90b      	cbnz	r3, 80098c4 <_vfiprintf_r+0x18>
 80098c0:	f7ff fd68 	bl	8009394 <__sinit>
 80098c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098c6:	07d9      	lsls	r1, r3, #31
 80098c8:	d405      	bmi.n	80098d6 <_vfiprintf_r+0x2a>
 80098ca:	89ab      	ldrh	r3, [r5, #12]
 80098cc:	059a      	lsls	r2, r3, #22
 80098ce:	d402      	bmi.n	80098d6 <_vfiprintf_r+0x2a>
 80098d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098d2:	f7ff ff66 	bl	80097a2 <__retarget_lock_acquire_recursive>
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	071b      	lsls	r3, r3, #28
 80098da:	d501      	bpl.n	80098e0 <_vfiprintf_r+0x34>
 80098dc:	692b      	ldr	r3, [r5, #16]
 80098de:	b99b      	cbnz	r3, 8009908 <_vfiprintf_r+0x5c>
 80098e0:	4629      	mov	r1, r5
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7ff fe7e 	bl	80095e4 <__swsetup_r>
 80098e8:	b170      	cbz	r0, 8009908 <_vfiprintf_r+0x5c>
 80098ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098ec:	07dc      	lsls	r4, r3, #31
 80098ee:	d504      	bpl.n	80098fa <_vfiprintf_r+0x4e>
 80098f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098f4:	b01d      	add	sp, #116	@ 0x74
 80098f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fa:	89ab      	ldrh	r3, [r5, #12]
 80098fc:	0598      	lsls	r0, r3, #22
 80098fe:	d4f7      	bmi.n	80098f0 <_vfiprintf_r+0x44>
 8009900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009902:	f7ff ff4f 	bl	80097a4 <__retarget_lock_release_recursive>
 8009906:	e7f3      	b.n	80098f0 <_vfiprintf_r+0x44>
 8009908:	2300      	movs	r3, #0
 800990a:	9309      	str	r3, [sp, #36]	@ 0x24
 800990c:	2320      	movs	r3, #32
 800990e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009912:	f8cd 800c 	str.w	r8, [sp, #12]
 8009916:	2330      	movs	r3, #48	@ 0x30
 8009918:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ac8 <_vfiprintf_r+0x21c>
 800991c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009920:	f04f 0901 	mov.w	r9, #1
 8009924:	4623      	mov	r3, r4
 8009926:	469a      	mov	sl, r3
 8009928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800992c:	b10a      	cbz	r2, 8009932 <_vfiprintf_r+0x86>
 800992e:	2a25      	cmp	r2, #37	@ 0x25
 8009930:	d1f9      	bne.n	8009926 <_vfiprintf_r+0x7a>
 8009932:	ebba 0b04 	subs.w	fp, sl, r4
 8009936:	d00b      	beq.n	8009950 <_vfiprintf_r+0xa4>
 8009938:	465b      	mov	r3, fp
 800993a:	4622      	mov	r2, r4
 800993c:	4629      	mov	r1, r5
 800993e:	4630      	mov	r0, r6
 8009940:	f7ff ffa1 	bl	8009886 <__sfputs_r>
 8009944:	3001      	adds	r0, #1
 8009946:	f000 80a7 	beq.w	8009a98 <_vfiprintf_r+0x1ec>
 800994a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800994c:	445a      	add	r2, fp
 800994e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009950:	f89a 3000 	ldrb.w	r3, [sl]
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 809f 	beq.w	8009a98 <_vfiprintf_r+0x1ec>
 800995a:	2300      	movs	r3, #0
 800995c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009964:	f10a 0a01 	add.w	sl, sl, #1
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009970:	931a      	str	r3, [sp, #104]	@ 0x68
 8009972:	4654      	mov	r4, sl
 8009974:	2205      	movs	r2, #5
 8009976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997a:	4853      	ldr	r0, [pc, #332]	@ (8009ac8 <_vfiprintf_r+0x21c>)
 800997c:	f7f6 fc50 	bl	8000220 <memchr>
 8009980:	9a04      	ldr	r2, [sp, #16]
 8009982:	b9d8      	cbnz	r0, 80099bc <_vfiprintf_r+0x110>
 8009984:	06d1      	lsls	r1, r2, #27
 8009986:	bf44      	itt	mi
 8009988:	2320      	movmi	r3, #32
 800998a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800998e:	0713      	lsls	r3, r2, #28
 8009990:	bf44      	itt	mi
 8009992:	232b      	movmi	r3, #43	@ 0x2b
 8009994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009998:	f89a 3000 	ldrb.w	r3, [sl]
 800999c:	2b2a      	cmp	r3, #42	@ 0x2a
 800999e:	d015      	beq.n	80099cc <_vfiprintf_r+0x120>
 80099a0:	9a07      	ldr	r2, [sp, #28]
 80099a2:	4654      	mov	r4, sl
 80099a4:	2000      	movs	r0, #0
 80099a6:	f04f 0c0a 	mov.w	ip, #10
 80099aa:	4621      	mov	r1, r4
 80099ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b0:	3b30      	subs	r3, #48	@ 0x30
 80099b2:	2b09      	cmp	r3, #9
 80099b4:	d94b      	bls.n	8009a4e <_vfiprintf_r+0x1a2>
 80099b6:	b1b0      	cbz	r0, 80099e6 <_vfiprintf_r+0x13a>
 80099b8:	9207      	str	r2, [sp, #28]
 80099ba:	e014      	b.n	80099e6 <_vfiprintf_r+0x13a>
 80099bc:	eba0 0308 	sub.w	r3, r0, r8
 80099c0:	fa09 f303 	lsl.w	r3, r9, r3
 80099c4:	4313      	orrs	r3, r2
 80099c6:	9304      	str	r3, [sp, #16]
 80099c8:	46a2      	mov	sl, r4
 80099ca:	e7d2      	b.n	8009972 <_vfiprintf_r+0xc6>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	1d19      	adds	r1, r3, #4
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	9103      	str	r1, [sp, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	bfbb      	ittet	lt
 80099d8:	425b      	neglt	r3, r3
 80099da:	f042 0202 	orrlt.w	r2, r2, #2
 80099de:	9307      	strge	r3, [sp, #28]
 80099e0:	9307      	strlt	r3, [sp, #28]
 80099e2:	bfb8      	it	lt
 80099e4:	9204      	strlt	r2, [sp, #16]
 80099e6:	7823      	ldrb	r3, [r4, #0]
 80099e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80099ea:	d10a      	bne.n	8009a02 <_vfiprintf_r+0x156>
 80099ec:	7863      	ldrb	r3, [r4, #1]
 80099ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80099f0:	d132      	bne.n	8009a58 <_vfiprintf_r+0x1ac>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	1d1a      	adds	r2, r3, #4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	9203      	str	r2, [sp, #12]
 80099fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099fe:	3402      	adds	r4, #2
 8009a00:	9305      	str	r3, [sp, #20]
 8009a02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ad8 <_vfiprintf_r+0x22c>
 8009a06:	7821      	ldrb	r1, [r4, #0]
 8009a08:	2203      	movs	r2, #3
 8009a0a:	4650      	mov	r0, sl
 8009a0c:	f7f6 fc08 	bl	8000220 <memchr>
 8009a10:	b138      	cbz	r0, 8009a22 <_vfiprintf_r+0x176>
 8009a12:	9b04      	ldr	r3, [sp, #16]
 8009a14:	eba0 000a 	sub.w	r0, r0, sl
 8009a18:	2240      	movs	r2, #64	@ 0x40
 8009a1a:	4082      	lsls	r2, r0
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	3401      	adds	r4, #1
 8009a20:	9304      	str	r3, [sp, #16]
 8009a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a26:	4829      	ldr	r0, [pc, #164]	@ (8009acc <_vfiprintf_r+0x220>)
 8009a28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a2c:	2206      	movs	r2, #6
 8009a2e:	f7f6 fbf7 	bl	8000220 <memchr>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d03f      	beq.n	8009ab6 <_vfiprintf_r+0x20a>
 8009a36:	4b26      	ldr	r3, [pc, #152]	@ (8009ad0 <_vfiprintf_r+0x224>)
 8009a38:	bb1b      	cbnz	r3, 8009a82 <_vfiprintf_r+0x1d6>
 8009a3a:	9b03      	ldr	r3, [sp, #12]
 8009a3c:	3307      	adds	r3, #7
 8009a3e:	f023 0307 	bic.w	r3, r3, #7
 8009a42:	3308      	adds	r3, #8
 8009a44:	9303      	str	r3, [sp, #12]
 8009a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a48:	443b      	add	r3, r7
 8009a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a4c:	e76a      	b.n	8009924 <_vfiprintf_r+0x78>
 8009a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a52:	460c      	mov	r4, r1
 8009a54:	2001      	movs	r0, #1
 8009a56:	e7a8      	b.n	80099aa <_vfiprintf_r+0xfe>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	3401      	adds	r4, #1
 8009a5c:	9305      	str	r3, [sp, #20]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	f04f 0c0a 	mov.w	ip, #10
 8009a64:	4620      	mov	r0, r4
 8009a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a6a:	3a30      	subs	r2, #48	@ 0x30
 8009a6c:	2a09      	cmp	r2, #9
 8009a6e:	d903      	bls.n	8009a78 <_vfiprintf_r+0x1cc>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0c6      	beq.n	8009a02 <_vfiprintf_r+0x156>
 8009a74:	9105      	str	r1, [sp, #20]
 8009a76:	e7c4      	b.n	8009a02 <_vfiprintf_r+0x156>
 8009a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e7f0      	b.n	8009a64 <_vfiprintf_r+0x1b8>
 8009a82:	ab03      	add	r3, sp, #12
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	462a      	mov	r2, r5
 8009a88:	4b12      	ldr	r3, [pc, #72]	@ (8009ad4 <_vfiprintf_r+0x228>)
 8009a8a:	a904      	add	r1, sp, #16
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f3af 8000 	nop.w
 8009a92:	4607      	mov	r7, r0
 8009a94:	1c78      	adds	r0, r7, #1
 8009a96:	d1d6      	bne.n	8009a46 <_vfiprintf_r+0x19a>
 8009a98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a9a:	07d9      	lsls	r1, r3, #31
 8009a9c:	d405      	bmi.n	8009aaa <_vfiprintf_r+0x1fe>
 8009a9e:	89ab      	ldrh	r3, [r5, #12]
 8009aa0:	059a      	lsls	r2, r3, #22
 8009aa2:	d402      	bmi.n	8009aaa <_vfiprintf_r+0x1fe>
 8009aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aa6:	f7ff fe7d 	bl	80097a4 <__retarget_lock_release_recursive>
 8009aaa:	89ab      	ldrh	r3, [r5, #12]
 8009aac:	065b      	lsls	r3, r3, #25
 8009aae:	f53f af1f 	bmi.w	80098f0 <_vfiprintf_r+0x44>
 8009ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ab4:	e71e      	b.n	80098f4 <_vfiprintf_r+0x48>
 8009ab6:	ab03      	add	r3, sp, #12
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	462a      	mov	r2, r5
 8009abc:	4b05      	ldr	r3, [pc, #20]	@ (8009ad4 <_vfiprintf_r+0x228>)
 8009abe:	a904      	add	r1, sp, #16
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 f879 	bl	8009bb8 <_printf_i>
 8009ac6:	e7e4      	b.n	8009a92 <_vfiprintf_r+0x1e6>
 8009ac8:	0800a1e4 	.word	0x0800a1e4
 8009acc:	0800a1ee 	.word	0x0800a1ee
 8009ad0:	00000000 	.word	0x00000000
 8009ad4:	08009887 	.word	0x08009887
 8009ad8:	0800a1ea 	.word	0x0800a1ea

08009adc <_printf_common>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	4698      	mov	r8, r3
 8009ae4:	688a      	ldr	r2, [r1, #8]
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bfb8      	it	lt
 8009af0:	4613      	movlt	r3, r2
 8009af2:	6033      	str	r3, [r6, #0]
 8009af4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009af8:	4607      	mov	r7, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	b10a      	cbz	r2, 8009b02 <_printf_common+0x26>
 8009afe:	3301      	adds	r3, #1
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	0699      	lsls	r1, r3, #26
 8009b06:	bf42      	ittt	mi
 8009b08:	6833      	ldrmi	r3, [r6, #0]
 8009b0a:	3302      	addmi	r3, #2
 8009b0c:	6033      	strmi	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	f015 0506 	ands.w	r5, r5, #6
 8009b14:	d106      	bne.n	8009b24 <_printf_common+0x48>
 8009b16:	f104 0a19 	add.w	sl, r4, #25
 8009b1a:	68e3      	ldr	r3, [r4, #12]
 8009b1c:	6832      	ldr	r2, [r6, #0]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	42ab      	cmp	r3, r5
 8009b22:	dc26      	bgt.n	8009b72 <_printf_common+0x96>
 8009b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b28:	6822      	ldr	r2, [r4, #0]
 8009b2a:	3b00      	subs	r3, #0
 8009b2c:	bf18      	it	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	0692      	lsls	r2, r2, #26
 8009b32:	d42b      	bmi.n	8009b8c <_printf_common+0xb0>
 8009b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b38:	4641      	mov	r1, r8
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	47c8      	blx	r9
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d01e      	beq.n	8009b80 <_printf_common+0xa4>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	f003 0306 	and.w	r3, r3, #6
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	bf02      	ittt	eq
 8009b4e:	68e5      	ldreq	r5, [r4, #12]
 8009b50:	6833      	ldreq	r3, [r6, #0]
 8009b52:	1aed      	subeq	r5, r5, r3
 8009b54:	68a3      	ldr	r3, [r4, #8]
 8009b56:	bf0c      	ite	eq
 8009b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b5c:	2500      	movne	r5, #0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bfc4      	itt	gt
 8009b62:	1a9b      	subgt	r3, r3, r2
 8009b64:	18ed      	addgt	r5, r5, r3
 8009b66:	2600      	movs	r6, #0
 8009b68:	341a      	adds	r4, #26
 8009b6a:	42b5      	cmp	r5, r6
 8009b6c:	d11a      	bne.n	8009ba4 <_printf_common+0xc8>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e008      	b.n	8009b84 <_printf_common+0xa8>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4652      	mov	r2, sl
 8009b76:	4641      	mov	r1, r8
 8009b78:	4638      	mov	r0, r7
 8009b7a:	47c8      	blx	r9
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_printf_common+0xac>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b88:	3501      	adds	r5, #1
 8009b8a:	e7c6      	b.n	8009b1a <_printf_common+0x3e>
 8009b8c:	18e1      	adds	r1, r4, r3
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	2030      	movs	r0, #48	@ 0x30
 8009b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b96:	4422      	add	r2, r4
 8009b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	e7c7      	b.n	8009b34 <_printf_common+0x58>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4641      	mov	r1, r8
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c8      	blx	r9
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d0e6      	beq.n	8009b80 <_printf_common+0xa4>
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7d9      	b.n	8009b6a <_printf_common+0x8e>
	...

08009bb8 <_printf_i>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	7e0f      	ldrb	r7, [r1, #24]
 8009bbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bc0:	2f78      	cmp	r7, #120	@ 0x78
 8009bc2:	4691      	mov	r9, r2
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	469a      	mov	sl, r3
 8009bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bce:	d807      	bhi.n	8009be0 <_printf_i+0x28>
 8009bd0:	2f62      	cmp	r7, #98	@ 0x62
 8009bd2:	d80a      	bhi.n	8009bea <_printf_i+0x32>
 8009bd4:	2f00      	cmp	r7, #0
 8009bd6:	f000 80d2 	beq.w	8009d7e <_printf_i+0x1c6>
 8009bda:	2f58      	cmp	r7, #88	@ 0x58
 8009bdc:	f000 80b9 	beq.w	8009d52 <_printf_i+0x19a>
 8009be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009be8:	e03a      	b.n	8009c60 <_printf_i+0xa8>
 8009bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bee:	2b15      	cmp	r3, #21
 8009bf0:	d8f6      	bhi.n	8009be0 <_printf_i+0x28>
 8009bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8009bf8 <_printf_i+0x40>)
 8009bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009be1 	.word	0x08009be1
 8009c04:	08009be1 	.word	0x08009be1
 8009c08:	08009be1 	.word	0x08009be1
 8009c0c:	08009be1 	.word	0x08009be1
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009be1 	.word	0x08009be1
 8009c18:	08009be1 	.word	0x08009be1
 8009c1c:	08009be1 	.word	0x08009be1
 8009c20:	08009be1 	.word	0x08009be1
 8009c24:	08009d65 	.word	0x08009d65
 8009c28:	08009c8f 	.word	0x08009c8f
 8009c2c:	08009d1f 	.word	0x08009d1f
 8009c30:	08009be1 	.word	0x08009be1
 8009c34:	08009be1 	.word	0x08009be1
 8009c38:	08009d87 	.word	0x08009d87
 8009c3c:	08009be1 	.word	0x08009be1
 8009c40:	08009c8f 	.word	0x08009c8f
 8009c44:	08009be1 	.word	0x08009be1
 8009c48:	08009be1 	.word	0x08009be1
 8009c4c:	08009d27 	.word	0x08009d27
 8009c50:	6833      	ldr	r3, [r6, #0]
 8009c52:	1d1a      	adds	r2, r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6032      	str	r2, [r6, #0]
 8009c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c60:	2301      	movs	r3, #1
 8009c62:	e09d      	b.n	8009da0 <_printf_i+0x1e8>
 8009c64:	6833      	ldr	r3, [r6, #0]
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	1d19      	adds	r1, r3, #4
 8009c6a:	6031      	str	r1, [r6, #0]
 8009c6c:	0606      	lsls	r6, r0, #24
 8009c6e:	d501      	bpl.n	8009c74 <_printf_i+0xbc>
 8009c70:	681d      	ldr	r5, [r3, #0]
 8009c72:	e003      	b.n	8009c7c <_printf_i+0xc4>
 8009c74:	0645      	lsls	r5, r0, #25
 8009c76:	d5fb      	bpl.n	8009c70 <_printf_i+0xb8>
 8009c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	da03      	bge.n	8009c88 <_printf_i+0xd0>
 8009c80:	232d      	movs	r3, #45	@ 0x2d
 8009c82:	426d      	negs	r5, r5
 8009c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c88:	4859      	ldr	r0, [pc, #356]	@ (8009df0 <_printf_i+0x238>)
 8009c8a:	230a      	movs	r3, #10
 8009c8c:	e011      	b.n	8009cb2 <_printf_i+0xfa>
 8009c8e:	6821      	ldr	r1, [r4, #0]
 8009c90:	6833      	ldr	r3, [r6, #0]
 8009c92:	0608      	lsls	r0, r1, #24
 8009c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c98:	d402      	bmi.n	8009ca0 <_printf_i+0xe8>
 8009c9a:	0649      	lsls	r1, r1, #25
 8009c9c:	bf48      	it	mi
 8009c9e:	b2ad      	uxthmi	r5, r5
 8009ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ca2:	4853      	ldr	r0, [pc, #332]	@ (8009df0 <_printf_i+0x238>)
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	bf14      	ite	ne
 8009ca8:	230a      	movne	r3, #10
 8009caa:	2308      	moveq	r3, #8
 8009cac:	2100      	movs	r1, #0
 8009cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cb2:	6866      	ldr	r6, [r4, #4]
 8009cb4:	60a6      	str	r6, [r4, #8]
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	bfa2      	ittt	ge
 8009cba:	6821      	ldrge	r1, [r4, #0]
 8009cbc:	f021 0104 	bicge.w	r1, r1, #4
 8009cc0:	6021      	strge	r1, [r4, #0]
 8009cc2:	b90d      	cbnz	r5, 8009cc8 <_printf_i+0x110>
 8009cc4:	2e00      	cmp	r6, #0
 8009cc6:	d04b      	beq.n	8009d60 <_printf_i+0x1a8>
 8009cc8:	4616      	mov	r6, r2
 8009cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cce:	fb03 5711 	mls	r7, r3, r1, r5
 8009cd2:	5dc7      	ldrb	r7, [r0, r7]
 8009cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cd8:	462f      	mov	r7, r5
 8009cda:	42bb      	cmp	r3, r7
 8009cdc:	460d      	mov	r5, r1
 8009cde:	d9f4      	bls.n	8009cca <_printf_i+0x112>
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d10b      	bne.n	8009cfc <_printf_i+0x144>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	07df      	lsls	r7, r3, #31
 8009ce8:	d508      	bpl.n	8009cfc <_printf_i+0x144>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	6861      	ldr	r1, [r4, #4]
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	bfde      	ittt	le
 8009cf2:	2330      	movle	r3, #48	@ 0x30
 8009cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cf8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009cfc:	1b92      	subs	r2, r2, r6
 8009cfe:	6122      	str	r2, [r4, #16]
 8009d00:	f8cd a000 	str.w	sl, [sp]
 8009d04:	464b      	mov	r3, r9
 8009d06:	aa03      	add	r2, sp, #12
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f7ff fee6 	bl	8009adc <_printf_common>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d14a      	bne.n	8009daa <_printf_i+0x1f2>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d18:	b004      	add	sp, #16
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f043 0320 	orr.w	r3, r3, #32
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	4833      	ldr	r0, [pc, #204]	@ (8009df4 <_printf_i+0x23c>)
 8009d28:	2778      	movs	r7, #120	@ 0x78
 8009d2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	6831      	ldr	r1, [r6, #0]
 8009d32:	061f      	lsls	r7, r3, #24
 8009d34:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d38:	d402      	bmi.n	8009d40 <_printf_i+0x188>
 8009d3a:	065f      	lsls	r7, r3, #25
 8009d3c:	bf48      	it	mi
 8009d3e:	b2ad      	uxthmi	r5, r5
 8009d40:	6031      	str	r1, [r6, #0]
 8009d42:	07d9      	lsls	r1, r3, #31
 8009d44:	bf44      	itt	mi
 8009d46:	f043 0320 	orrmi.w	r3, r3, #32
 8009d4a:	6023      	strmi	r3, [r4, #0]
 8009d4c:	b11d      	cbz	r5, 8009d56 <_printf_i+0x19e>
 8009d4e:	2310      	movs	r3, #16
 8009d50:	e7ac      	b.n	8009cac <_printf_i+0xf4>
 8009d52:	4827      	ldr	r0, [pc, #156]	@ (8009df0 <_printf_i+0x238>)
 8009d54:	e7e9      	b.n	8009d2a <_printf_i+0x172>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	f023 0320 	bic.w	r3, r3, #32
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	e7f6      	b.n	8009d4e <_printf_i+0x196>
 8009d60:	4616      	mov	r6, r2
 8009d62:	e7bd      	b.n	8009ce0 <_printf_i+0x128>
 8009d64:	6833      	ldr	r3, [r6, #0]
 8009d66:	6825      	ldr	r5, [r4, #0]
 8009d68:	6961      	ldr	r1, [r4, #20]
 8009d6a:	1d18      	adds	r0, r3, #4
 8009d6c:	6030      	str	r0, [r6, #0]
 8009d6e:	062e      	lsls	r6, r5, #24
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	d501      	bpl.n	8009d78 <_printf_i+0x1c0>
 8009d74:	6019      	str	r1, [r3, #0]
 8009d76:	e002      	b.n	8009d7e <_printf_i+0x1c6>
 8009d78:	0668      	lsls	r0, r5, #25
 8009d7a:	d5fb      	bpl.n	8009d74 <_printf_i+0x1bc>
 8009d7c:	8019      	strh	r1, [r3, #0]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	4616      	mov	r6, r2
 8009d84:	e7bc      	b.n	8009d00 <_printf_i+0x148>
 8009d86:	6833      	ldr	r3, [r6, #0]
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	6032      	str	r2, [r6, #0]
 8009d8c:	681e      	ldr	r6, [r3, #0]
 8009d8e:	6862      	ldr	r2, [r4, #4]
 8009d90:	2100      	movs	r1, #0
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7f6 fa44 	bl	8000220 <memchr>
 8009d98:	b108      	cbz	r0, 8009d9e <_printf_i+0x1e6>
 8009d9a:	1b80      	subs	r0, r0, r6
 8009d9c:	6060      	str	r0, [r4, #4]
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	2300      	movs	r3, #0
 8009da4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009da8:	e7aa      	b.n	8009d00 <_printf_i+0x148>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	4632      	mov	r2, r6
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	47d0      	blx	sl
 8009db4:	3001      	adds	r0, #1
 8009db6:	d0ad      	beq.n	8009d14 <_printf_i+0x15c>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	079b      	lsls	r3, r3, #30
 8009dbc:	d413      	bmi.n	8009de6 <_printf_i+0x22e>
 8009dbe:	68e0      	ldr	r0, [r4, #12]
 8009dc0:	9b03      	ldr	r3, [sp, #12]
 8009dc2:	4298      	cmp	r0, r3
 8009dc4:	bfb8      	it	lt
 8009dc6:	4618      	movlt	r0, r3
 8009dc8:	e7a6      	b.n	8009d18 <_printf_i+0x160>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4632      	mov	r2, r6
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	47d0      	blx	sl
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d09d      	beq.n	8009d14 <_printf_i+0x15c>
 8009dd8:	3501      	adds	r5, #1
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	9903      	ldr	r1, [sp, #12]
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	42ab      	cmp	r3, r5
 8009de2:	dcf2      	bgt.n	8009dca <_printf_i+0x212>
 8009de4:	e7eb      	b.n	8009dbe <_printf_i+0x206>
 8009de6:	2500      	movs	r5, #0
 8009de8:	f104 0619 	add.w	r6, r4, #25
 8009dec:	e7f5      	b.n	8009dda <_printf_i+0x222>
 8009dee:	bf00      	nop
 8009df0:	0800a1f5 	.word	0x0800a1f5
 8009df4:	0800a206 	.word	0x0800a206

08009df8 <__sflush_r>:
 8009df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e00:	0716      	lsls	r6, r2, #28
 8009e02:	4605      	mov	r5, r0
 8009e04:	460c      	mov	r4, r1
 8009e06:	d454      	bmi.n	8009eb2 <__sflush_r+0xba>
 8009e08:	684b      	ldr	r3, [r1, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dc02      	bgt.n	8009e14 <__sflush_r+0x1c>
 8009e0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dd48      	ble.n	8009ea6 <__sflush_r+0xae>
 8009e14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	d045      	beq.n	8009ea6 <__sflush_r+0xae>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e20:	682f      	ldr	r7, [r5, #0]
 8009e22:	6a21      	ldr	r1, [r4, #32]
 8009e24:	602b      	str	r3, [r5, #0]
 8009e26:	d030      	beq.n	8009e8a <__sflush_r+0x92>
 8009e28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	0759      	lsls	r1, r3, #29
 8009e2e:	d505      	bpl.n	8009e3c <__sflush_r+0x44>
 8009e30:	6863      	ldr	r3, [r4, #4]
 8009e32:	1ad2      	subs	r2, r2, r3
 8009e34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e36:	b10b      	cbz	r3, 8009e3c <__sflush_r+0x44>
 8009e38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e3a:	1ad2      	subs	r2, r2, r3
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e40:	6a21      	ldr	r1, [r4, #32]
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b0      	blx	r6
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	d106      	bne.n	8009e5a <__sflush_r+0x62>
 8009e4c:	6829      	ldr	r1, [r5, #0]
 8009e4e:	291d      	cmp	r1, #29
 8009e50:	d82b      	bhi.n	8009eaa <__sflush_r+0xb2>
 8009e52:	4a2a      	ldr	r2, [pc, #168]	@ (8009efc <__sflush_r+0x104>)
 8009e54:	410a      	asrs	r2, r1
 8009e56:	07d6      	lsls	r6, r2, #31
 8009e58:	d427      	bmi.n	8009eaa <__sflush_r+0xb2>
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	6062      	str	r2, [r4, #4]
 8009e5e:	04d9      	lsls	r1, r3, #19
 8009e60:	6922      	ldr	r2, [r4, #16]
 8009e62:	6022      	str	r2, [r4, #0]
 8009e64:	d504      	bpl.n	8009e70 <__sflush_r+0x78>
 8009e66:	1c42      	adds	r2, r0, #1
 8009e68:	d101      	bne.n	8009e6e <__sflush_r+0x76>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	b903      	cbnz	r3, 8009e70 <__sflush_r+0x78>
 8009e6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e72:	602f      	str	r7, [r5, #0]
 8009e74:	b1b9      	cbz	r1, 8009ea6 <__sflush_r+0xae>
 8009e76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	d002      	beq.n	8009e84 <__sflush_r+0x8c>
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f7ff fca0 	bl	80097c4 <_free_r>
 8009e84:	2300      	movs	r3, #0
 8009e86:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e88:	e00d      	b.n	8009ea6 <__sflush_r+0xae>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	47b0      	blx	r6
 8009e90:	4602      	mov	r2, r0
 8009e92:	1c50      	adds	r0, r2, #1
 8009e94:	d1c9      	bne.n	8009e2a <__sflush_r+0x32>
 8009e96:	682b      	ldr	r3, [r5, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0c6      	beq.n	8009e2a <__sflush_r+0x32>
 8009e9c:	2b1d      	cmp	r3, #29
 8009e9e:	d001      	beq.n	8009ea4 <__sflush_r+0xac>
 8009ea0:	2b16      	cmp	r3, #22
 8009ea2:	d11e      	bne.n	8009ee2 <__sflush_r+0xea>
 8009ea4:	602f      	str	r7, [r5, #0]
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e022      	b.n	8009ef0 <__sflush_r+0xf8>
 8009eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eae:	b21b      	sxth	r3, r3
 8009eb0:	e01b      	b.n	8009eea <__sflush_r+0xf2>
 8009eb2:	690f      	ldr	r7, [r1, #16]
 8009eb4:	2f00      	cmp	r7, #0
 8009eb6:	d0f6      	beq.n	8009ea6 <__sflush_r+0xae>
 8009eb8:	0793      	lsls	r3, r2, #30
 8009eba:	680e      	ldr	r6, [r1, #0]
 8009ebc:	bf08      	it	eq
 8009ebe:	694b      	ldreq	r3, [r1, #20]
 8009ec0:	600f      	str	r7, [r1, #0]
 8009ec2:	bf18      	it	ne
 8009ec4:	2300      	movne	r3, #0
 8009ec6:	eba6 0807 	sub.w	r8, r6, r7
 8009eca:	608b      	str	r3, [r1, #8]
 8009ecc:	f1b8 0f00 	cmp.w	r8, #0
 8009ed0:	dde9      	ble.n	8009ea6 <__sflush_r+0xae>
 8009ed2:	6a21      	ldr	r1, [r4, #32]
 8009ed4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ed6:	4643      	mov	r3, r8
 8009ed8:	463a      	mov	r2, r7
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b0      	blx	r6
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	dc08      	bgt.n	8009ef4 <__sflush_r+0xfc>
 8009ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef4:	4407      	add	r7, r0
 8009ef6:	eba8 0800 	sub.w	r8, r8, r0
 8009efa:	e7e7      	b.n	8009ecc <__sflush_r+0xd4>
 8009efc:	dfbffffe 	.word	0xdfbffffe

08009f00 <_fflush_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	4605      	mov	r5, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	b913      	cbnz	r3, 8009f10 <_fflush_r+0x10>
 8009f0a:	2500      	movs	r5, #0
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	b118      	cbz	r0, 8009f1a <_fflush_r+0x1a>
 8009f12:	6a03      	ldr	r3, [r0, #32]
 8009f14:	b90b      	cbnz	r3, 8009f1a <_fflush_r+0x1a>
 8009f16:	f7ff fa3d 	bl	8009394 <__sinit>
 8009f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d0f3      	beq.n	8009f0a <_fflush_r+0xa>
 8009f22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f24:	07d0      	lsls	r0, r2, #31
 8009f26:	d404      	bmi.n	8009f32 <_fflush_r+0x32>
 8009f28:	0599      	lsls	r1, r3, #22
 8009f2a:	d402      	bmi.n	8009f32 <_fflush_r+0x32>
 8009f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f2e:	f7ff fc38 	bl	80097a2 <__retarget_lock_acquire_recursive>
 8009f32:	4628      	mov	r0, r5
 8009f34:	4621      	mov	r1, r4
 8009f36:	f7ff ff5f 	bl	8009df8 <__sflush_r>
 8009f3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f3c:	07da      	lsls	r2, r3, #31
 8009f3e:	4605      	mov	r5, r0
 8009f40:	d4e4      	bmi.n	8009f0c <_fflush_r+0xc>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	059b      	lsls	r3, r3, #22
 8009f46:	d4e1      	bmi.n	8009f0c <_fflush_r+0xc>
 8009f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f4a:	f7ff fc2b 	bl	80097a4 <__retarget_lock_release_recursive>
 8009f4e:	e7dd      	b.n	8009f0c <_fflush_r+0xc>

08009f50 <__swhatbuf_r>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	460c      	mov	r4, r1
 8009f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	b096      	sub	sp, #88	@ 0x58
 8009f5c:	4615      	mov	r5, r2
 8009f5e:	461e      	mov	r6, r3
 8009f60:	da0d      	bge.n	8009f7e <__swhatbuf_r+0x2e>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f68:	f04f 0100 	mov.w	r1, #0
 8009f6c:	bf14      	ite	ne
 8009f6e:	2340      	movne	r3, #64	@ 0x40
 8009f70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f74:	2000      	movs	r0, #0
 8009f76:	6031      	str	r1, [r6, #0]
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	b016      	add	sp, #88	@ 0x58
 8009f7c:	bd70      	pop	{r4, r5, r6, pc}
 8009f7e:	466a      	mov	r2, sp
 8009f80:	f000 f848 	bl	800a014 <_fstat_r>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dbec      	blt.n	8009f62 <__swhatbuf_r+0x12>
 8009f88:	9901      	ldr	r1, [sp, #4]
 8009f8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f92:	4259      	negs	r1, r3
 8009f94:	4159      	adcs	r1, r3
 8009f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f9a:	e7eb      	b.n	8009f74 <__swhatbuf_r+0x24>

08009f9c <__smakebuf_r>:
 8009f9c:	898b      	ldrh	r3, [r1, #12]
 8009f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fa0:	079d      	lsls	r5, r3, #30
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	d507      	bpl.n	8009fb8 <__smakebuf_r+0x1c>
 8009fa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	6163      	str	r3, [r4, #20]
 8009fb4:	b003      	add	sp, #12
 8009fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb8:	ab01      	add	r3, sp, #4
 8009fba:	466a      	mov	r2, sp
 8009fbc:	f7ff ffc8 	bl	8009f50 <__swhatbuf_r>
 8009fc0:	9f00      	ldr	r7, [sp, #0]
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7ff f8cc 	bl	8009164 <_malloc_r>
 8009fcc:	b948      	cbnz	r0, 8009fe2 <__smakebuf_r+0x46>
 8009fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd2:	059a      	lsls	r2, r3, #22
 8009fd4:	d4ee      	bmi.n	8009fb4 <__smakebuf_r+0x18>
 8009fd6:	f023 0303 	bic.w	r3, r3, #3
 8009fda:	f043 0302 	orr.w	r3, r3, #2
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	e7e2      	b.n	8009fa8 <__smakebuf_r+0xc>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	6020      	str	r0, [r4, #0]
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ff2:	b15b      	cbz	r3, 800a00c <__smakebuf_r+0x70>
 8009ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f000 f81d 	bl	800a038 <_isatty_r>
 8009ffe:	b128      	cbz	r0, 800a00c <__smakebuf_r+0x70>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	431d      	orrs	r5, r3
 800a010:	81a5      	strh	r5, [r4, #12]
 800a012:	e7cf      	b.n	8009fb4 <__smakebuf_r+0x18>

0800a014 <_fstat_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d07      	ldr	r5, [pc, #28]	@ (800a034 <_fstat_r+0x20>)
 800a018:	2300      	movs	r3, #0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	4611      	mov	r1, r2
 800a020:	602b      	str	r3, [r5, #0]
 800a022:	f7f7 f804 	bl	800102e <_fstat>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	d102      	bne.n	800a030 <_fstat_r+0x1c>
 800a02a:	682b      	ldr	r3, [r5, #0]
 800a02c:	b103      	cbz	r3, 800a030 <_fstat_r+0x1c>
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	bd38      	pop	{r3, r4, r5, pc}
 800a032:	bf00      	nop
 800a034:	200037d4 	.word	0x200037d4

0800a038 <_isatty_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d06      	ldr	r5, [pc, #24]	@ (800a054 <_isatty_r+0x1c>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	602b      	str	r3, [r5, #0]
 800a044:	f7f7 f803 	bl	800104e <_isatty>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_isatty_r+0x1a>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_isatty_r+0x1a>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	200037d4 	.word	0x200037d4

0800a058 <_init>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr

0800a064 <_fini>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr
