
TestCan_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a19c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800a37c  0800a37c  0000b37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a590  0800a590  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a590  0800a590  0000b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a598  0800a598  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a598  0800a598  0000b598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800a5a0  0800a5a0  0000b5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a5a8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000377c  2000006c  0800a614  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037e8  0800a614  0000c7e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021bfd  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000441b  00000000  00000000  0002dc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  000320b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015e3  00000000  00000000  00033cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000078b0  00000000  00000000  000352db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e32f  00000000  00000000  0003cb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e3bf  00000000  00000000  0005aeba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169279  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080d0  00000000  00000000  001692bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0017138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a364 	.word	0x0800a364

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800a364 	.word	0x0800a364

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d009      	beq.n	80005dc <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <ITM_SendChar+0x2c>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <ITM_SendChar+0x2e>
 80005dc:	2300      	movs	r3, #0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d010      	beq.n	8000604 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e2:	e000      	b.n	80005e6 <ITM_SendChar+0x36>
    {
      __NOP();
 80005e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f4      	bne.n	80005e4 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

extern "C" int _write(int file, char *data, int len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, 100);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	b29a      	uxth	r2, r3
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	68b9      	ldr	r1, [r7, #8]
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <_write+0x24>)
 800062a:	f003 fc57 	bl	8003edc <HAL_UART_Transmit>
	return len;
 800062e:	687b      	ldr	r3, [r7, #4]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000ec 	.word	0x200000ec

0800063c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b091      	sub	sp, #68	@ 0x44
 8000640:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000642:	f000 fe30 	bl	80012a6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000646:	f000 f8e9 	bl	800081c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800064a:	f000 f9e9 	bl	8000a20 <_ZL12MX_GPIO_Initv>
	MX_FDCAN1_Init();
 800064e:	f000 f93b 	bl	80008c8 <_ZL14MX_FDCAN1_Initv>
	MX_USART2_UART_Init();
 8000652:	f000 f985 	bl	8000960 <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */

	printf("Can Test\r\n");
 8000656:	4859      	ldr	r0, [pc, #356]	@ (80007bc <main+0x180>)
 8000658:	f009 f8c0 	bl	80097dc <puts>

	can.setHandleFdcan(&hfdcan1);
 800065c:	4958      	ldr	r1, [pc, #352]	@ (80007c0 <main+0x184>)
 800065e:	4859      	ldr	r0, [pc, #356]	@ (80007c4 <main+0x188>)
 8000660:	f008 fd02 	bl	8009068 <_ZN15FdcanController14setHandleFdcanEP19FDCAN_HandleTypeDef>
	can.setHandleMutex(&mutexCanHandle);
 8000664:	4958      	ldr	r1, [pc, #352]	@ (80007c8 <main+0x18c>)
 8000666:	4857      	ldr	r0, [pc, #348]	@ (80007c4 <main+0x188>)
 8000668:	f008 fd25 	bl	80090b6 <_ZN15FdcanController14setHandleMutexEPPv>
	can.setHandleQueue(&queueCanFifo0Handle, FdcanController::Buffer::Fifo0);
 800066c:	2201      	movs	r2, #1
 800066e:	4957      	ldr	r1, [pc, #348]	@ (80007cc <main+0x190>)
 8000670:	4854      	ldr	r0, [pc, #336]	@ (80007c4 <main+0x188>)
 8000672:	f008 fd07 	bl	8009084 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE>
	can.setHandleQueue(&queueCanFifo1Handle, FdcanController::Buffer::Fifo1);
 8000676:	2202      	movs	r2, #2
 8000678:	4955      	ldr	r1, [pc, #340]	@ (80007d0 <main+0x194>)
 800067a:	4852      	ldr	r0, [pc, #328]	@ (80007c4 <main+0x188>)
 800067c:	f008 fd02 	bl	8009084 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE>
	can.setHandleSem(&semCanHandle);
 8000680:	4954      	ldr	r1, [pc, #336]	@ (80007d4 <main+0x198>)
 8000682:	4850      	ldr	r0, [pc, #320]	@ (80007c4 <main+0x188>)
 8000684:	f008 fd25 	bl	80090d2 <_ZN15FdcanController12setHandleSemEPPv>

	FDCAN_FilterTypeDef filterFifo0;
	filterFifo0.IdType = FDCAN_STANDARD_ID;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
	filterFifo0.FilterIndex = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
	filterFifo0.FilterType = FDCAN_FILTER_RANGE;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
	filterFifo0.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
	filterFifo0.FilterID1 = 0x001;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
	filterFifo0.FilterID2 = 0x00A;
 800069c:	230a      	movs	r3, #10
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (can.setFilter(filterFifo0) != FdcanController::State::Ok)
 80006a0:	466c      	mov	r4, sp
 80006a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006b4:	4843      	ldr	r0, [pc, #268]	@ (80007c4 <main+0x188>)
 80006b6:	f008 fe8a 	bl	80093ce <_ZN15FdcanController9setFilterE19FDCAN_FilterTypeDef>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <main+0x94>
	{
		printf("error\r\n");
 80006ca:	4843      	ldr	r0, [pc, #268]	@ (80007d8 <main+0x19c>)
 80006cc:	f009 f886 	bl	80097dc <puts>
	}

	FDCAN_FilterTypeDef filterFifo1;
	filterFifo1.IdType = FDCAN_STANDARD_ID;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
	filterFifo1.FilterIndex = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
	filterFifo1.FilterType = FDCAN_FILTER_RANGE;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
	filterFifo1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80006dc:	2302      	movs	r3, #2
 80006de:	60fb      	str	r3, [r7, #12]
	filterFifo1.FilterID1 = 0x00B;
 80006e0:	230b      	movs	r3, #11
 80006e2:	613b      	str	r3, [r7, #16]
	filterFifo1.FilterID2 = 0x016;
 80006e4:	2316      	movs	r3, #22
 80006e6:	617b      	str	r3, [r7, #20]
	if (can.setFilter(filterFifo1) != FdcanController::State::Ok)
 80006e8:	466c      	mov	r4, sp
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006f6:	463b      	mov	r3, r7
 80006f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006fa:	4832      	ldr	r0, [pc, #200]	@ (80007c4 <main+0x188>)
 80006fc:	f008 fe67 	bl	80093ce <_ZN15FdcanController9setFilterE19FDCAN_FilterTypeDef>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <main+0xda>
	{
		printf("error\r\n");
 8000710:	4831      	ldr	r0, [pc, #196]	@ (80007d8 <main+0x19c>)
 8000712:	f009 f863 	bl	80097dc <puts>
	}

	if (can.init() != FdcanController::State::Ok)
 8000716:	482b      	ldr	r0, [pc, #172]	@ (80007c4 <main+0x188>)
 8000718:	f008 fce9 	bl	80090ee <_ZN15FdcanController4initEv>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf14      	ite	ne
 8000722:	2301      	movne	r3, #1
 8000724:	2300      	moveq	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <main+0xf6>
	{
		printf("error\r\n");
 800072c:	482a      	ldr	r0, [pc, #168]	@ (80007d8 <main+0x19c>)
 800072e:	f009 f855 	bl	80097dc <puts>
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000732:	f004 fe81 	bl	8005438 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of mutexCan */
	mutexCanHandle = osMutexNew(&mutexCan_attributes);
 8000736:	4829      	ldr	r0, [pc, #164]	@ (80007dc <main+0x1a0>)
 8000738:	f004 ff75 	bl	8005626 <osMutexNew>
 800073c:	4603      	mov	r3, r0
 800073e:	4a22      	ldr	r2, [pc, #136]	@ (80007c8 <main+0x18c>)
 8000740:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of semCan */
	semCanHandle = osSemaphoreNew(1, 0, &semCan_attributes);
 8000742:	4a27      	ldr	r2, [pc, #156]	@ (80007e0 <main+0x1a4>)
 8000744:	2100      	movs	r1, #0
 8000746:	2001      	movs	r0, #1
 8000748:	f005 f87b 	bl	8005842 <osSemaphoreNew>
 800074c:	4603      	mov	r3, r0
 800074e:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <main+0x198>)
 8000750:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of queueCan */
	queueCanFifo0Handle = osMessageQueueNew(16, sizeof(FdcanMsg),
 8000752:	4a24      	ldr	r2, [pc, #144]	@ (80007e4 <main+0x1a8>)
 8000754:	2154      	movs	r1, #84	@ 0x54
 8000756:	2010      	movs	r0, #16
 8000758:	f005 f992 	bl	8005a80 <osMessageQueueNew>
 800075c:	4603      	mov	r3, r0
 800075e:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <main+0x190>)
 8000760:	6013      	str	r3, [r2, #0]
			&queueCanFifo0_attributes);
	queueCanFifo1Handle = osMessageQueueNew(16, sizeof(FdcanMsg),
 8000762:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <main+0x1ac>)
 8000764:	2154      	movs	r1, #84	@ 0x54
 8000766:	2010      	movs	r0, #16
 8000768:	f005 f98a 	bl	8005a80 <osMessageQueueNew>
 800076c:	4603      	mov	r3, r0
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <main+0x194>)
 8000770:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of task0 */
	task0Handle = osThreadNew(startTask0, NULL, &task0_attributes);
 8000772:	4a1e      	ldr	r2, [pc, #120]	@ (80007ec <main+0x1b0>)
 8000774:	2100      	movs	r1, #0
 8000776:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <main+0x1b4>)
 8000778:	f004 fea8 	bl	80054cc <osThreadNew>
 800077c:	4603      	mov	r3, r0
 800077e:	4a1d      	ldr	r2, [pc, #116]	@ (80007f4 <main+0x1b8>)
 8000780:	6013      	str	r3, [r2, #0]

	/* creation of task1 */
	task1Handle = osThreadNew(startTask1, NULL, &task1_attributes);
 8000782:	4a1d      	ldr	r2, [pc, #116]	@ (80007f8 <main+0x1bc>)
 8000784:	2100      	movs	r1, #0
 8000786:	481d      	ldr	r0, [pc, #116]	@ (80007fc <main+0x1c0>)
 8000788:	f004 fea0 	bl	80054cc <osThreadNew>
 800078c:	4603      	mov	r3, r0
 800078e:	4a1c      	ldr	r2, [pc, #112]	@ (8000800 <main+0x1c4>)
 8000790:	6013      	str	r3, [r2, #0]

	/* creation of task2 */
	task2Handle = osThreadNew(startTask2, NULL, &task2_attributes);
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <main+0x1c8>)
 8000794:	2100      	movs	r1, #0
 8000796:	481c      	ldr	r0, [pc, #112]	@ (8000808 <main+0x1cc>)
 8000798:	f004 fe98 	bl	80054cc <osThreadNew>
 800079c:	4603      	mov	r3, r0
 800079e:	4a1b      	ldr	r2, [pc, #108]	@ (800080c <main+0x1d0>)
 80007a0:	6013      	str	r3, [r2, #0]

	/* creation of task3 */
	task3Handle = osThreadNew(startTask3, NULL, &task3_attributes);
 80007a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <main+0x1d4>)
 80007a4:	2100      	movs	r1, #0
 80007a6:	481b      	ldr	r0, [pc, #108]	@ (8000814 <main+0x1d8>)
 80007a8:	f004 fe90 	bl	80054cc <osThreadNew>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000818 <main+0x1dc>)
 80007b0:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80007b2:	f004 fe65 	bl	8005480 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80007b6:	bf00      	nop
 80007b8:	e7fd      	b.n	80007b6 <main+0x17a>
 80007ba:	bf00      	nop
 80007bc:	0800a3d0 	.word	0x0800a3d0
 80007c0:	20000088 	.word	0x20000088
 80007c4:	200001a0 	.word	0x200001a0
 80007c8:	20000198 	.word	0x20000198
 80007cc:	20000190 	.word	0x20000190
 80007d0:	20000194 	.word	0x20000194
 80007d4:	2000019c 	.word	0x2000019c
 80007d8:	0800a3dc 	.word	0x0800a3dc
 80007dc:	0800a4dc 	.word	0x0800a4dc
 80007e0:	0800a4ec 	.word	0x0800a4ec
 80007e4:	0800a4ac 	.word	0x0800a4ac
 80007e8:	0800a4c4 	.word	0x0800a4c4
 80007ec:	0800a41c 	.word	0x0800a41c
 80007f0:	08000bd5 	.word	0x08000bd5
 80007f4:	20000180 	.word	0x20000180
 80007f8:	0800a440 	.word	0x0800a440
 80007fc:	08000c55 	.word	0x08000c55
 8000800:	20000184 	.word	0x20000184
 8000804:	0800a464 	.word	0x0800a464
 8000808:	08000c85 	.word	0x08000c85
 800080c:	20000188 	.word	0x20000188
 8000810:	0800a488 	.word	0x0800a488
 8000814:	08000d05 	.word	0x08000d05
 8000818:	2000018c 	.word	0x2000018c

0800081c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	2238      	movs	r2, #56	@ 0x38
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f009 f8b6 	bl	800999c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800083e:	2000      	movs	r0, #0
 8000840:	f001 ff4e 	bl	80026e0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084e:	2340      	movs	r3, #64	@ 0x40
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800085a:	2304      	movs	r3, #4
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800085e:	2355      	movs	r3, #85	@ 0x55
 8000860:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000866:	2302      	movs	r3, #2
 8000868:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f001 ffe8 	bl	8002848 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <_Z18SystemClock_Configv+0x70>
	{
		Error_Handler();
 8000888:	f000 fa66 	bl	8000d58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2104      	movs	r1, #4
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fae1 	bl	8002e6c <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <_Z18SystemClock_Configv+0xa2>
	{
		Error_Handler();
 80008ba:	f000 fa4d 	bl	8000d58 <Error_Handler>
	}
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	@ 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_ZL14MX_FDCAN1_Initv>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008ce:	4a23      	ldr	r2, [pc, #140]	@ (800095c <_ZL14MX_FDCAN1_Initv+0x94>)
 80008d0:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 283;
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 80008f8:	f240 121b 	movw	r2, #283	@ 0x11b
 80008fc:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000900:	2201      	movs	r2, #1
 8000902:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 1;
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000906:	2201      	movs	r2, #1
 8000908:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 1;
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 800090c:	2201      	movs	r2, #1
 800090e:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000912:	2201      	movs	r2, #1
 8000914:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000918:	2201      	movs	r2, #1
 800091a:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 800091e:	2201      	movs	r2, #1
 8000920:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000924:	2201      	movs	r2, #1
 8000926:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.StdFiltersNbr = 0;
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.ExtFiltersNbr = 0;
 800092e:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800093a:	4807      	ldr	r0, [pc, #28]	@ (8000958 <_ZL14MX_FDCAN1_Initv+0x90>)
 800093c:	f000 fe8a 	bl	8001654 <HAL_FDCAN_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf14      	ite	ne
 8000946:	2301      	movne	r3, #1
 8000948:	2300      	moveq	r3, #0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <_ZL14MX_FDCAN1_Initv+0x8c>
	{
		Error_Handler();
 8000950:	f000 fa02 	bl	8000d58 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000088 	.word	0x20000088
 800095c:	40006400 	.word	0x40006400

08000960 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000964:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000966:	4a2d      	ldr	r2, [pc, #180]	@ (8000a1c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000968:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800096a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a8:	481b      	ldr	r0, [pc, #108]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009aa:	f003 fa47 	bl	8003e3c <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <_ZL19MX_USART2_UART_Initv+0x62>
	{
		Error_Handler();
 80009be:	f000 f9cb 	bl	8000d58 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4814      	ldr	r0, [pc, #80]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009c6:	f004 fc28 	bl	800521a <HAL_UARTEx_SetTxFifoThreshold>
 80009ca:	4603      	mov	r3, r0
			!= HAL_OK)
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf14      	ite	ne
 80009d0:	2301      	movne	r3, #1
 80009d2:	2300      	moveq	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <_ZL19MX_USART2_UART_Initv+0x7e>
	{
		Error_Handler();
 80009da:	f000 f9bd 	bl	8000d58 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80009de:	2100      	movs	r1, #0
 80009e0:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009e2:	f004 fc58 	bl	8005296 <HAL_UARTEx_SetRxFifoThreshold>
 80009e6:	4603      	mov	r3, r0
			!= HAL_OK)
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <_ZL19MX_USART2_UART_Initv+0x9a>
	{
		Error_Handler();
 80009f6:	f000 f9af 	bl	8000d58 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009fa:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009fc:	f004 fbd4 	bl	80051a8 <HAL_UARTEx_DisableFifoMode>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bf14      	ite	ne
 8000a06:	2301      	movne	r3, #1
 8000a08:	2300      	moveq	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <_ZL19MX_USART2_UART_Initv+0xb4>
	{
		Error_Handler();
 8000a10:	f000 f9a2 	bl	8000d58 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000ec 	.word	0x200000ec
 8000a1c:	40004400 	.word	0x40004400

08000a20 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a42:	4b2c      	ldr	r3, [pc, #176]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4e:	4b29      	ldr	r3, [pc, #164]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a52:	4a28      	ldr	r2, [pc, #160]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5a:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b23      	ldr	r3, [pc, #140]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	4a22      	ldr	r2, [pc, #136]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a72:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	4a1c      	ldr	r2, [pc, #112]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2120      	movs	r1, #32
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9e:	f001 fdc9 	bl	8002634 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480f      	ldr	r0, [pc, #60]	@ (8000af8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000aba:	f001 fc39 	bl	8002330 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000abe:	2320      	movs	r3, #32
 8000ac0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad8:	f001 fc2a 	bl	8002330 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2107      	movs	r1, #7
 8000ae0:	2028      	movs	r0, #40	@ 0x28
 8000ae2:	f000 fccf 	bl	8001484 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae6:	2028      	movs	r0, #40	@ 0x28
 8000ae8:	f000 fce6 	bl	80014b8 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	@ 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000800 	.word	0x48000800

08000afc <HAL_FDCAN_TxBufferCompleteCallback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t BufferIndexes)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	if (can.updateInterruptTx(hfdcan) != FdcanController::State::Ok)
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <HAL_FDCAN_TxBufferCompleteCallback+0x30>)
 8000b0a:	f008 fbd5 	bl	80092b8 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf14      	ite	ne
 8000b14:	2301      	movne	r3, #1
 8000b16:	2300      	moveq	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <HAL_FDCAN_TxBufferCompleteCallback+0x28>
	{
		printf("error\r\n");
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <HAL_FDCAN_TxBufferCompleteCallback+0x34>)
 8000b20:	f008 fe5c 	bl	80097dc <puts>
	}
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200001a0 	.word	0x200001a0
 8000b30:	0800a3dc 	.word	0x0800a3dc

08000b34 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	if (can.updateInterruptRx(hfdcan, RxFifo0ITs) != FdcanController::State::Ok)
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000b44:	f008 fbd9 	bl	80092fa <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf14      	ite	ne
 8000b4e:	2301      	movne	r3, #1
 8000b50:	2300      	moveq	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <HAL_FDCAN_RxFifo0Callback+0x2a>
	{
		printf("error\r\n");
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000b5a:	f008 fe3f 	bl	80097dc <puts>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200001a0 	.word	0x200001a0
 8000b6c:	0800a3dc 	.word	0x0800a3dc

08000b70 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b80:	f001 fd70 	bl	8002664 <HAL_GPIO_TogglePin>
	if (can.updateInterruptRx(hfdcan, RxFifo1ITs) != FdcanController::State::Ok)
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	4808      	ldr	r0, [pc, #32]	@ (8000bac <HAL_FDCAN_RxFifo1Callback+0x3c>)
 8000b8a:	f008 fbb6 	bl	80092fa <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf14      	ite	ne
 8000b94:	2301      	movne	r3, #1
 8000b96:	2300      	moveq	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <HAL_FDCAN_RxFifo1Callback+0x34>
	{
		printf("error\r\n");
 8000b9e:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <HAL_FDCAN_RxFifo1Callback+0x40>)
 8000ba0:	f008 fe1c 	bl	80097dc <puts>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001a0 	.word	0x200001a0
 8000bb0:	0800a3dc 	.word	0x0800a3dc

08000bb4 <_Z11task_actionc>:

void task_action(char command)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(command);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fcf5 	bl	80005b0 <ITM_SendChar>
	ITM_SendChar('\n');
 8000bc6:	200a      	movs	r0, #10
 8000bc8:	f7ff fcf2 	bl	80005b0 <ITM_SendChar>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_Z10startTask0Pv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTask0 */
void startTask0(void *argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0aa      	sub	sp, #168	@ 0xa8
 8000bd8:	af12      	add	r7, sp, #72	@ 0x48
 8000bda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	FdcanMsg msg;
	msg.txHeader.Identifier = 0x006;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
	msg.txHeader.IdType = FDCAN_STANDARD_ID;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
	msg.txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000be4:	2300      	movs	r3, #0
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	msg.txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000be8:	2308      	movs	r3, #8
 8000bea:	643b      	str	r3, [r7, #64]	@ 0x40
	msg.txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	647b      	str	r3, [r7, #68]	@ 0x44
	msg.txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
	msg.txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	msg.txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	653b      	str	r3, [r7, #80]	@ 0x50
	msg.txHeader.MessageMarker = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	657b      	str	r3, [r7, #84]	@ 0x54

	msg.data[0] = 'h';
 8000c00:	2368      	movs	r3, #104	@ 0x68
 8000c02:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	msg.data[1] = 'e';
 8000c06:	2365      	movs	r3, #101	@ 0x65
 8000c08:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	msg.data[2] = 'y';
 8000c0c:	2379      	movs	r3, #121	@ 0x79
 8000c0e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	msg.data[3] = 'a';
 8000c12:	2361      	movs	r3, #97	@ 0x61
 8000c14:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	msg.data[4] = '0';
 8000c18:	2330      	movs	r3, #48	@ 0x30
 8000c1a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	msg.data[5] = '\0';
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

	/* Infinite loop */
	for (;;)
	{
		osDelay(1e3);
 8000c24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c28:	f004 fce2 	bl	80055f0 <osDelay>
		task_action('1');
 8000c2c:	2031      	movs	r0, #49	@ 0x31
 8000c2e:	f7ff ffc1 	bl	8000bb4 <_Z11task_actionc>
		can.send(msg);
 8000c32:	4668      	mov	r0, sp
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	2248      	movs	r2, #72	@ 0x48
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f008 ff39 	bl	8009ab2 <memcpy>
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c46:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <_Z10startTask0Pv+0x7c>)
 8000c48:	f008 fa96 	bl	8009178 <_ZN15FdcanController4sendE8FdcanMsg>
		osDelay(1e3);
 8000c4c:	bf00      	nop
 8000c4e:	e7e9      	b.n	8000c24 <_Z10startTask0Pv+0x50>
 8000c50:	200001a0 	.word	0x200001a0

08000c54 <_Z10startTask1Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTask1 */
void startTask1(void *argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b098      	sub	sp, #96	@ 0x60
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTask1 */
	/* Infinite loop */
	for (;;)
	{
		FdcanMsg msg;
		can.receive(&msg, FdcanController::Buffer::Fifo0);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2201      	movs	r2, #1
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <_Z10startTask1Pv+0x28>)
 8000c66:	f008 faee 	bl	8009246 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE>
		printf("fifo0 got: %s\r\n", reinterpret_cast<char*>(msg.data));
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	334c      	adds	r3, #76	@ 0x4c
 8000c70:	4619      	mov	r1, r3
 8000c72:	4803      	ldr	r0, [pc, #12]	@ (8000c80 <_Z10startTask1Pv+0x2c>)
 8000c74:	f008 fd4a 	bl	800970c <iprintf>
	}
 8000c78:	bf00      	nop
 8000c7a:	e7ef      	b.n	8000c5c <_Z10startTask1Pv+0x8>
 8000c7c:	200001a0 	.word	0x200001a0
 8000c80:	0800a3e4 	.word	0x0800a3e4

08000c84 <_Z10startTask2Pv>:
	/* USER CODE END startTask1 */
}

void startTask2(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0aa      	sub	sp, #168	@ 0xa8
 8000c88:	af12      	add	r7, sp, #72	@ 0x48
 8000c8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTask1 */
	FdcanMsg msg;
	msg.txHeader.Identifier = 0x00D;
 8000c8c:	230d      	movs	r3, #13
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
	msg.txHeader.IdType = FDCAN_STANDARD_ID;
 8000c90:	2300      	movs	r3, #0
 8000c92:	63bb      	str	r3, [r7, #56]	@ 0x38
	msg.txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
	msg.txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	643b      	str	r3, [r7, #64]	@ 0x40
	msg.txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	647b      	str	r3, [r7, #68]	@ 0x44
	msg.txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
	msg.txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	msg.txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	653b      	str	r3, [r7, #80]	@ 0x50
	msg.txHeader.MessageMarker = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	657b      	str	r3, [r7, #84]	@ 0x54

	msg.data[0] = 'h';
 8000cb0:	2368      	movs	r3, #104	@ 0x68
 8000cb2:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	msg.data[1] = 'e';
 8000cb6:	2365      	movs	r3, #101	@ 0x65
 8000cb8:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	msg.data[2] = 'y';
 8000cbc:	2379      	movs	r3, #121	@ 0x79
 8000cbe:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	msg.data[3] = 'a';
 8000cc2:	2361      	movs	r3, #97	@ 0x61
 8000cc4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	msg.data[4] = '2';
 8000cc8:	2332      	movs	r3, #50	@ 0x32
 8000cca:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	msg.data[5] = '\0';
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	/* Infinite loop */
	for (;;)
	{
		osDelay(1e3);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd8:	f004 fc8a 	bl	80055f0 <osDelay>
		task_action('2');
 8000cdc:	2032      	movs	r0, #50	@ 0x32
 8000cde:	f7ff ff69 	bl	8000bb4 <_Z11task_actionc>
		can.send(msg);
 8000ce2:	4668      	mov	r0, sp
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	2248      	movs	r2, #72	@ 0x48
 8000cea:	4619      	mov	r1, r3
 8000cec:	f008 fee1 	bl	8009ab2 <memcpy>
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf6:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <_Z10startTask2Pv+0x7c>)
 8000cf8:	f008 fa3e 	bl	8009178 <_ZN15FdcanController4sendE8FdcanMsg>
		osDelay(1e3);
 8000cfc:	bf00      	nop
 8000cfe:	e7e9      	b.n	8000cd4 <_Z10startTask2Pv+0x50>
 8000d00:	200001a0 	.word	0x200001a0

08000d04 <_Z10startTask3Pv>:
	}
	/* USER CODE END startTask1 */
}

void startTask3(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b098      	sub	sp, #96	@ 0x60
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		FdcanMsg msg;
		can.receive(&msg, FdcanController::Buffer::Fifo1);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2202      	movs	r2, #2
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <_Z10startTask3Pv+0x28>)
 8000d16:	f008 fa96 	bl	8009246 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE>
		printf("fifo1 got: %s\r\n", reinterpret_cast<char*>(msg.data));
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	334c      	adds	r3, #76	@ 0x4c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4803      	ldr	r0, [pc, #12]	@ (8000d30 <_Z10startTask3Pv+0x2c>)
 8000d24:	f008 fcf2 	bl	800970c <iprintf>
	}
 8000d28:	bf00      	nop
 8000d2a:	e7ef      	b.n	8000d0c <_Z10startTask3Pv+0x8>
 8000d2c:	200001a0 	.word	0x200001a0
 8000d30:	0800a3f4 	.word	0x0800a3f4

08000d34 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000d46:	f000 fac7 	bl	80012d8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40001000 	.word	0x40001000

08000d58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <Error_Handler+0x8>

08000d64 <_Z41__static_initialization_and_destruction_0ii>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d107      	bne.n	8000d84 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d102      	bne.n	8000d84 <_Z41__static_initialization_and_destruction_0ii+0x20>
FdcanController can;
 8000d7e:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d80:	f008 f932 	bl	8008fe8 <_ZN15FdcanControllerC1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d107      	bne.n	8000d9a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d102      	bne.n	8000d9a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d96:	f008 f947 	bl	8009028 <_ZN15FdcanControllerD1Ev>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001a0 	.word	0x200001a0

08000da8 <_GLOBAL__sub_I_hfdcan1>:
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff ffd7 	bl	8000d64 <_Z41__static_initialization_and_destruction_0ii>
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_GLOBAL__sub_D_hfdcan1>:
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ffcf 	bl	8000d64 <_Z41__static_initialization_and_destruction_0ii>
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_MspInit+0x50>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd2:	4a11      	ldr	r2, [pc, #68]	@ (8000e18 <HAL_MspInit+0x50>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_MspInit+0x50>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <HAL_MspInit+0x50>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <HAL_MspInit+0x50>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_MspInit+0x50>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210f      	movs	r1, #15
 8000e02:	f06f 0001 	mvn.w	r0, #1
 8000e06:	f000 fb3d 	bl	8001484 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e0a:	f001 fd0d 	bl	8002828 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09e      	sub	sp, #120	@ 0x78
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2254      	movs	r2, #84	@ 0x54
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f008 fdad 	bl	800999c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <HAL_FDCAN_MspInit+0xcc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d149      	bne.n	8000ee0 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e56:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fa53 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e68:	f7ff ff76 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <HAL_FDCAN_MspInit+0xd0>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e70:	4a1e      	ldr	r2, [pc, #120]	@ (8000eec <HAL_FDCAN_MspInit+0xd0>)
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <HAL_FDCAN_MspInit+0xd0>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_FDCAN_MspInit+0xd0>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e88:	4a18      	ldr	r2, [pc, #96]	@ (8000eec <HAL_FDCAN_MspInit+0xd0>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_FDCAN_MspInit+0xd0>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e9c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ea0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eae:	2309      	movs	r3, #9
 8000eb0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ebc:	f001 fa38 	bl	8002330 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2105      	movs	r1, #5
 8000ec4:	2015      	movs	r0, #21
 8000ec6:	f000 fadd 	bl	8001484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000eca:	2015      	movs	r0, #21
 8000ecc:	f000 faf4 	bl	80014b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2106      	movs	r1, #6
 8000ed4:	2016      	movs	r0, #22
 8000ed6:	f000 fad5 	bl	8001484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000eda:	2016      	movs	r0, #22
 8000edc:	f000 faec 	bl	80014b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3778      	adds	r7, #120	@ 0x78
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40006400 	.word	0x40006400
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09e      	sub	sp, #120	@ 0x78
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2254      	movs	r2, #84	@ 0x54
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f008 fd43 	bl	800999c <memset>
  if(huart->Instance==USART2)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <HAL_UART_MspInit+0xb8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d13e      	bne.n	8000f9e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 f9eb 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f7ff ff0e 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_UART_MspInit+0xbc>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	4a1a      	ldr	r2, [pc, #104]	@ (8000fac <HAL_UART_MspInit+0xbc>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_UART_MspInit+0xbc>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_UART_MspInit+0xbc>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f58:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <HAL_UART_MspInit+0xbc>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_UART_MspInit+0xbc>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8a:	f001 f9d1 	bl	8002330 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2107      	movs	r1, #7
 8000f92:	2026      	movs	r0, #38	@ 0x26
 8000f94:	f000 fa76 	bl	8001484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f98:	2026      	movs	r0, #38	@ 0x26
 8000f9a:	f000 fa8d 	bl	80014b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3778      	adds	r7, #120	@ 0x78
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	@ 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <HAL_InitTick+0xc4>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001074 <HAL_InitTick+0xc4>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <HAL_InitTick+0xc4>)
 8000fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 f918 	bl	8003218 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fe8:	f002 f8ea 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8000fec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff0:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <HAL_InitTick+0xc8>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	0c9b      	lsrs	r3, r3, #18
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <HAL_InitTick+0xcc>)
 8000ffe:	4a20      	ldr	r2, [pc, #128]	@ (8001080 <HAL_InitTick+0xd0>)
 8001000:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001002:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <HAL_InitTick+0xcc>)
 8001004:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001008:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800100a:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <HAL_InitTick+0xcc>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <HAL_InitTick+0xcc>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_InitTick+0xcc>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800101c:	4817      	ldr	r0, [pc, #92]	@ (800107c <HAL_InitTick+0xcc>)
 800101e:	f002 fbc1 	bl	80037a4 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800102c:	2b00      	cmp	r3, #0
 800102e:	d11b      	bne.n	8001068 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001030:	4812      	ldr	r0, [pc, #72]	@ (800107c <HAL_InitTick+0xcc>)
 8001032:	f002 fc19 	bl	8003868 <HAL_TIM_Base_Start_IT>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800103c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001040:	2b00      	cmp	r3, #0
 8001042:	d111      	bne.n	8001068 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001044:	2036      	movs	r0, #54	@ 0x36
 8001046:	f000 fa37 	bl	80014b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d808      	bhi.n	8001062 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	2036      	movs	r0, #54	@ 0x36
 8001056:	f000 fa15 	bl	8001484 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_InitTick+0xd4>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e002      	b.n	8001068 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001068:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800106c:	4618      	mov	r0, r3
 800106e:	3730      	adds	r7, #48	@ 0x30
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	431bde83 	.word	0x431bde83
 800107c:	200001b8 	.word	0x200001b8
 8001080:	40001000 	.word	0x40001000
 8001084:	20000004 	.word	0x20000004

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <NMI_Handler+0x4>

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <MemManage_Handler+0x4>

080010a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <UsageFault_Handler+0x4>

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80010c6:	f000 fed3 	bl	8001e70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000088 	.word	0x20000088

080010d4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <FDCAN1_IT1_IRQHandler+0x10>)
 80010da:	f000 fec9 	bl	8001e70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000088 	.word	0x20000088

080010e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <USART2_IRQHandler+0x10>)
 80010ee:	f002 ff83 	bl	8003ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000ec 	.word	0x200000ec

080010fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001100:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001104:	f001 fac8 	bl	8002698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <TIM6_DAC_IRQHandler+0x10>)
 8001112:	f002 fc21 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001b8 	.word	0x200001b8

08001120 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001132:	f3af 8000 	nop.w
 8001136:	4601      	mov	r1, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf0      	blt.n	8001132 <_read+0x12>
  }

  return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_close>:
  }
  return len;
}

int _close(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001182:	605a      	str	r2, [r3, #4]
  return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f008 fc30 	bl	8009a58 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20020000 	.word	0x20020000
 8001224:	00000400 	.word	0x00000400
 8001228:	20000204 	.word	0x20000204
 800122c:	200037e8 	.word	0x200037e8

08001230 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001256:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001258:	f7ff ffea 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	@ (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <LoopForever+0xe>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	@ (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f008 fbef 	bl	8009a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001286:	f7ff f9d9 	bl	800063c <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   r0, =_estack
 800128c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001298:	0800a5a8 	.word	0x0800a5a8
  ldr r2, =_sbss
 800129c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012a0:	200037e8 	.word	0x200037e8

080012a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>

080012a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f8dc 	bl	800146e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b6:	200f      	movs	r0, #15
 80012b8:	f7ff fe7a 	bl	8000fb0 <HAL_InitTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e001      	b.n	80012cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c8:	f7ff fd7e 	bl	8000dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012cc:	79fb      	ldrb	r3, [r7, #7]

}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_IncTick+0x1c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_IncTick+0x20>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a03      	ldr	r2, [pc, #12]	@ (80012f4 <HAL_IncTick+0x1c>)
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000208 	.word	0x20000208
 80012f8:	20000008 	.word	0x20000008

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000208 	.word	0x20000208

08001314 <__NVIC_SetPriorityGrouping>:
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	@ (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff4c 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001492:	f7ff ff63 	bl	800135c <__NVIC_GetPriorityGrouping>
 8001496:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff ffb3 	bl	8001408 <NVIC_EncodePriority>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff82 	bl	80013b4 <__NVIC_SetPriority>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff56 	bl	8001378 <__NVIC_EnableIRQ>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d005      	beq.n	80014f8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2204      	movs	r2, #4
 80014f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e037      	b.n	8001568 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 020e 	bic.w	r2, r2, #14
 8001506:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001512:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001516:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001544:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00c      	beq.n	8001568 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800155c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001566:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d00d      	beq.n	80015ba <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2204      	movs	r2, #4
 80015a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e047      	b.n	800164a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 020e 	bic.w	r2, r2, #14
 80015c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0201 	bic.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f003 021f 	and.w	r2, r3, #31
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	2101      	movs	r1, #1
 80015f8:	fa01 f202 	lsl.w	r2, r1, r2
 80015fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001606:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800161e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001628:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
    }
  }
  return status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e147      	b.n	80018f6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fbce 	bl	8000e1c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0210 	bic.w	r2, r2, #16
 800168e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff fe34 	bl	80012fc <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001696:	e012      	b.n	80016be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001698:	f7ff fe30 	bl	80012fc <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d90b      	bls.n	80016be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2203      	movs	r2, #3
 80016b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e11b      	b.n	80018f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d0e5      	beq.n	8001698 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016dc:	f7ff fe0e 	bl	80012fc <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016e2:	e012      	b.n	800170a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016e4:	f7ff fe0a 	bl	80012fc <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d90b      	bls.n	800170a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0f5      	b.n	80018f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0e5      	beq.n	80016e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0202 	orr.w	r2, r2, #2
 8001726:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a74      	ldr	r2, [pc, #464]	@ (8001900 <HAL_FDCAN_Init+0x2ac>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d103      	bne.n	800173a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001732:	4a74      	ldr	r2, [pc, #464]	@ (8001904 <HAL_FDCAN_Init+0x2b0>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7c1b      	ldrb	r3, [r3, #16]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001750:	619a      	str	r2, [r3, #24]
 8001752:	e007      	b.n	8001764 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699a      	ldr	r2, [r3, #24]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001762:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7c5b      	ldrb	r3, [r3, #17]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800177a:	619a      	str	r2, [r3, #24]
 800177c:	e007      	b.n	800178e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699a      	ldr	r2, [r3, #24]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800178c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7c9b      	ldrb	r3, [r3, #18]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017a4:	619a      	str	r2, [r3, #24]
 80017a6:	e007      	b.n	80017b8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017b6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80017dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0210 	bic.w	r2, r2, #16
 80017ec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0204 	orr.w	r2, r2, #4
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	e02c      	b.n	8001862 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d028      	beq.n	8001862 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d01c      	beq.n	8001852 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001826:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0210 	orr.w	r2, r2, #16
 8001836:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d110      	bne.n	8001862 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0220 	orr.w	r2, r2, #32
 800184e:	619a      	str	r2, [r3, #24]
 8001850:	e007      	b.n	8001862 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	3b01      	subs	r3, #1
 8001868:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	3b01      	subs	r3, #1
 8001870:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001872:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800187a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	3b01      	subs	r3, #1
 8001884:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800188a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800188c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001896:	d115      	bne.n	80018c4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	3b01      	subs	r3, #1
 80018a4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018a6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	3b01      	subs	r3, #1
 80018ae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018b0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	3b01      	subs	r3, #1
 80018ba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018c0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018c2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fc40 	bl	8002160 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40006400 	.word	0x40006400
 8001904:	40006500 	.word	0x40006500

08001908 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001918:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d002      	beq.n	8001926 <HAL_FDCAN_ConfigFilter+0x1e>
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d13d      	bne.n	80019a2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d119      	bne.n	8001962 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800193a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001942:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e01d      	b.n	800199e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	075a      	lsls	r2, r3, #29
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	079a      	lsls	r2, r3, #30
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3304      	adds	r3, #4
 8001996:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e006      	b.n	80019b0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
  }
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d110      	bne.n	80019f2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e006      	b.n	8001a00 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	f043 0204 	orr.w	r2, r3, #4
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
  }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d12c      	bne.n	8001a7e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e023      	b.n	8001a8c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fbec 	bl	8002238 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001a70:	2201      	movs	r2, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	409a      	lsls	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e006      	b.n	8001a8c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a82:	f043 0208 	orr.w	r2, r3, #8
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b08b      	sub	sp, #44	@ 0x2c
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001aac:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001aae:	7efb      	ldrb	r3, [r7, #27]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	f040 80e8 	bne.w	8001c86 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b40      	cmp	r3, #64	@ 0x40
 8001aba:	d137      	bne.n	8001b2c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0db      	b.n	8001c94 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae4:	0e1b      	lsrs	r3, r3, #24
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10a      	bne.n	8001b04 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001af6:	0a5b      	lsrs	r3, r3, #9
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	440b      	add	r3, r1
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2a:	e036      	b.n	8001b9a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0a3      	b.n	8001c94 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b54:	0e1b      	lsrs	r3, r3, #24
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10a      	bne.n	8001b74 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	4413      	add	r3, r2
 8001b86:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d107      	bne.n	8001bbe <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0c9b      	lsrs	r3, r3, #18
 8001bb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e005      	b.n	8001bca <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	3304      	adds	r3, #4
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	f003 020f 	and.w	r2, r3, #15
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0e1b      	lsrs	r3, r3, #24
 8001c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0fda      	lsrs	r2, r3, #31
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	3304      	adds	r3, #4
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	e00a      	b.n	8001c56 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	441a      	add	r2, r3
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	440b      	add	r3, r1
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	3301      	adds	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ca0 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d3ec      	bcc.n	8001c40 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b40      	cmp	r3, #64	@ 0x40
 8001c6a:	d105      	bne.n	8001c78 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001c76:	e004      	b.n	8001c82 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e006      	b.n	8001c94 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8a:	f043 0208 	orr.w	r2, r3, #8
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
  }
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	372c      	adds	r7, #44	@ 0x2c
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	0800a514 	.word	0x0800a514

08001ca4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001cb6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d003      	beq.n	8001cc6 <HAL_FDCAN_ActivateNotification+0x22>
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	f040 80c8 	bne.w	8001e56 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03b      	beq.n	8001d5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d031      	beq.n	8001d5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d027      	beq.n	8001d5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01d      	beq.n	8001d5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d013      	beq.n	8001d5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00c      	beq.n	8001d6a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d13b      	bne.n	8001df6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d131      	bne.n	8001df6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d127      	bne.n	8001df6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d11d      	bne.n	8001df6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d113      	bne.n	8001df6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00c      	beq.n	8001e06 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0202 	orr.w	r2, r2, #2
 8001e04:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e006      	b.n	8001e64 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5a:	f043 0202 	orr.w	r2, r3, #2
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
  }
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	@ 0x30
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001eca:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed2:	6a3a      	ldr	r2, [r7, #32]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ede:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ee2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efe:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2240      	movs	r2, #64	@ 0x40
 8001f1a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f900 	bl	8002122 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d019      	beq.n	8001f60 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d014      	beq.n	8001f60 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f3e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8c2 	bl	80020e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8a2 	bl	80020ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f82:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fdd4 	bl	8000b34 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f98:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7fe fde7 	bl	8000b70 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00c      	beq.n	8001fc6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fbe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f885 	bl	80020d0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d018      	beq.n	8002002 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d013      	beq.n	8002002 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fe2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2280      	movs	r2, #128	@ 0x80
 8001ff8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe fd7d 	bl	8000afc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00c      	beq.n	8002026 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800201e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f86a 	bl	80020fa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00c      	beq.n	800204a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002042:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f862 	bl	800210e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00f      	beq.n	8002074 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002066:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002082:	69f9      	ldr	r1, [r7, #28]
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f860 	bl	800214a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d009      	beq.n	80020a4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f842 	bl	8002136 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80020b2:	bf00      	nop
 80020b4:	3730      	adds	r7, #48	@ 0x30
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002168:	4b30      	ldr	r3, [pc, #192]	@ (800222c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800216a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d103      	bne.n	800217e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800217c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2c      	ldr	r2, [pc, #176]	@ (8002234 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800218e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800219e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	041a      	lsls	r2, r3, #16
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021cc:	061a      	lsls	r2, r3, #24
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e005      	b.n	8002212 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3304      	adds	r3, #4
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3f3      	bcc.n	8002206 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	4000a400 	.word	0x4000a400
 8002230:	40006800 	.word	0x40006800
 8002234:	40006c00 	.word	0x40006c00

08002238 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002256:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800225e:	4313      	orrs	r3, r2
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e00a      	b.n	800227a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800226c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002272:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002274:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002278:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002284:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800228a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002290:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	3304      	adds	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	3304      	adds	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e020      	b.n	800230e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3303      	adds	r3, #3
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3302      	adds	r3, #2
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	440b      	add	r3, r1
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022e4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	440b      	add	r3, r1
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022f2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	440a      	add	r2, r1
 80022fa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022fc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	3304      	adds	r3, #4
 8002306:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3304      	adds	r3, #4
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4a06      	ldr	r2, [pc, #24]	@ (800232c <FDCAN_CopyMessageToRAM+0xf4>)
 8002314:	5cd3      	ldrb	r3, [r2, r3]
 8002316:	461a      	mov	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4293      	cmp	r3, r2
 800231c:	d3d6      	bcc.n	80022cc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3724      	adds	r7, #36	@ 0x24
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	0800a514 	.word	0x0800a514

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800233e:	e15a      	b.n	80025f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 814c 	beq.w	80025f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d005      	beq.n	8002370 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800236c:	2b02      	cmp	r3, #2
 800236e:	d130      	bne.n	80023d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a6:	2201      	movs	r2, #1
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 0201 	and.w	r2, r3, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d017      	beq.n	800240e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d123      	bne.n	8002462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0203 	and.w	r2, r3, #3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80a6 	beq.w	80025f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002614 <HAL_GPIO_Init+0x2e4>)
 80024a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002614 <HAL_GPIO_Init+0x2e4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80024b0:	4b58      	ldr	r3, [pc, #352]	@ (8002614 <HAL_GPIO_Init+0x2e4>)
 80024b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024bc:	4a56      	ldr	r2, [pc, #344]	@ (8002618 <HAL_GPIO_Init+0x2e8>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024e6:	d01f      	beq.n	8002528 <HAL_GPIO_Init+0x1f8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a4c      	ldr	r2, [pc, #304]	@ (800261c <HAL_GPIO_Init+0x2ec>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d019      	beq.n	8002524 <HAL_GPIO_Init+0x1f4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a4b      	ldr	r2, [pc, #300]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_GPIO_Init+0x1f0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002624 <HAL_GPIO_Init+0x2f4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00d      	beq.n	800251c <HAL_GPIO_Init+0x1ec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a49      	ldr	r2, [pc, #292]	@ (8002628 <HAL_GPIO_Init+0x2f8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <HAL_GPIO_Init+0x1e8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a48      	ldr	r2, [pc, #288]	@ (800262c <HAL_GPIO_Init+0x2fc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_GPIO_Init+0x1e4>
 8002510:	2305      	movs	r3, #5
 8002512:	e00a      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002514:	2306      	movs	r3, #6
 8002516:	e008      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002518:	2304      	movs	r3, #4
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 800251c:	2303      	movs	r3, #3
 800251e:	e004      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x1fa>
 8002528:	2300      	movs	r3, #0
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253a:	4937      	ldr	r1, [pc, #220]	@ (8002618 <HAL_GPIO_Init+0x2e8>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002548:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <HAL_GPIO_Init+0x300>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256c:	4a30      	ldr	r2, [pc, #192]	@ (8002630 <HAL_GPIO_Init+0x300>)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002572:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <HAL_GPIO_Init+0x300>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002596:	4a26      	ldr	r2, [pc, #152]	@ (8002630 <HAL_GPIO_Init+0x300>)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800259c:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_GPIO_Init+0x300>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002630 <HAL_GPIO_Init+0x300>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <HAL_GPIO_Init+0x300>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ea:	4a11      	ldr	r2, [pc, #68]	@ (8002630 <HAL_GPIO_Init+0x300>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	f47f ae9d 	bne.w	8002340 <HAL_GPIO_Init+0x10>
  }
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40021000 	.word	0x40021000
 8002618:	40010000 	.word	0x40010000
 800261c:	48000400 	.word	0x48000400
 8002620:	48000800 	.word	0x48000800
 8002624:	48000c00 	.word	0x48000c00
 8002628:	48001000 	.word	0x48001000
 800262c:	48001400 	.word	0x48001400
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002650:	e002      	b.n	8002658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	041a      	lsls	r2, r3, #16
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43d9      	mvns	r1, r3
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	400b      	ands	r3, r1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026a2:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ae:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f806 	bl	80026c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d141      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ee:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026fa:	d131      	bne.n	8002760 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026fc:	4b47      	ldr	r3, [pc, #284]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002702:	4a46      	ldr	r2, [pc, #280]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002708:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	4b43      	ldr	r3, [pc, #268]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002714:	4a41      	ldr	r2, [pc, #260]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800271a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800271c:	4b40      	ldr	r3, [pc, #256]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2232      	movs	r2, #50	@ 0x32
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	4a3f      	ldr	r2, [pc, #252]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	0c9b      	lsrs	r3, r3, #18
 800272e:	3301      	adds	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002732:	e002      	b.n	800273a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3b01      	subs	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273a:	4b38      	ldr	r3, [pc, #224]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002746:	d102      	bne.n	800274e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f2      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800274e:	4b33      	ldr	r3, [pc, #204]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275a:	d158      	bne.n	800280e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e057      	b.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002760:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002766:	4a2d      	ldr	r2, [pc, #180]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800276c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002770:	e04d      	b.n	800280e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002778:	d141      	bne.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800277a:	4b28      	ldr	r3, [pc, #160]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002786:	d131      	bne.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002788:	4b24      	ldr	r3, [pc, #144]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800278e:	4a23      	ldr	r2, [pc, #140]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002798:	4b20      	ldr	r3, [pc, #128]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027a0:	4a1e      	ldr	r2, [pc, #120]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2232      	movs	r2, #50	@ 0x32
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	0c9b      	lsrs	r3, r3, #18
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027be:	e002      	b.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d2:	d102      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f2      	bne.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027da:	4b10      	ldr	r3, [pc, #64]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e6:	d112      	bne.n	800280e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e011      	b.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80027fc:	e007      	b.n	800280e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002806:	4a05      	ldr	r2, [pc, #20]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002808:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800280c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40007000 	.word	0x40007000
 8002820:	20000000 	.word	0x20000000
 8002824:	431bde83 	.word	0x431bde83

08002828 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002836:	6093      	str	r3, [r2, #8]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40007000 	.word	0x40007000

08002848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e2fe      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002866:	4b97      	ldr	r3, [pc, #604]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002870:	4b94      	ldr	r3, [pc, #592]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d102      	bne.n	8002886 <HAL_RCC_OscConfig+0x3e>
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d002      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e2d9      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b85      	ldr	r3, [pc, #532]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a84      	ldr	r2, [pc, #528]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7e      	ldr	r2, [pc, #504]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b78      	ldr	r3, [pc, #480]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a77      	ldr	r2, [pc, #476]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b75      	ldr	r3, [pc, #468]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a74      	ldr	r2, [pc, #464]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fcfc 	bl	80012fc <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe fcf8 	bl	80012fc <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e29e      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fce8 	bl	80012fc <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7fe fce4 	bl	80012fc <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	@ 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e28a      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002942:	4b60      	ldr	r3, [pc, #384]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d075      	beq.n	8002a4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295e:	4b59      	ldr	r3, [pc, #356]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002968:	4b56      	ldr	r3, [pc, #344]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b0c      	cmp	r3, #12
 8002976:	d102      	bne.n	800297e <HAL_RCC_OscConfig+0x136>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d002      	beq.n	8002984 <HAL_RCC_OscConfig+0x13c>
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d11f      	bne.n	80029c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002984:	4b4f      	ldr	r3, [pc, #316]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_OscConfig+0x154>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e25d      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b49      	ldr	r3, [pc, #292]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	061b      	lsls	r3, r3, #24
 80029aa:	4946      	ldr	r1, [pc, #280]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029b0:	4b45      	ldr	r3, [pc, #276]	@ (8002ac8 <HAL_RCC_OscConfig+0x280>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fafb 	bl	8000fb0 <HAL_InitTick>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d043      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e249      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fc90 	bl	80012fc <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e0:	f7fe fc8c 	bl	80012fc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e232      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f2:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	492d      	ldr	r1, [pc, #180]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
 8002a12:	e01a      	b.n	8002a4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fc6c 	bl	80012fc <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe fc68 	bl	80012fc <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e20e      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1e0>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d041      	beq.n	8002ada <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a64:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fc45 	bl	80012fc <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a76:	f7fe fc41 	bl	80012fc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1e7      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ef      	beq.n	8002a76 <HAL_RCC_OscConfig+0x22e>
 8002a96:	e020      	b.n	8002ada <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <HAL_RCC_OscConfig+0x27c>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fc28 	bl	80012fc <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aae:	e00d      	b.n	8002acc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fc24 	bl	80012fc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d906      	bls.n	8002acc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1ca      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002acc:	4b8c      	ldr	r3, [pc, #560]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ea      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80a6 	beq.w	8002c34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aec:	4b84      	ldr	r3, [pc, #528]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_OscConfig+0x2b4>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x2b6>
 8002afc:	2300      	movs	r3, #0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	4b7f      	ldr	r3, [pc, #508]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	4a7e      	ldr	r2, [pc, #504]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1e:	4b79      	ldr	r3, [pc, #484]	@ (8002d04 <HAL_RCC_OscConfig+0x4bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b2a:	4b76      	ldr	r3, [pc, #472]	@ (8002d04 <HAL_RCC_OscConfig+0x4bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a75      	ldr	r2, [pc, #468]	@ (8002d04 <HAL_RCC_OscConfig+0x4bc>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7fe fbe1 	bl	80012fc <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7fe fbdd 	bl	80012fc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e183      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b50:	4b6c      	ldr	r3, [pc, #432]	@ (8002d04 <HAL_RCC_OscConfig+0x4bc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d108      	bne.n	8002b76 <HAL_RCC_OscConfig+0x32e>
 8002b64:	4b66      	ldr	r3, [pc, #408]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	4a65      	ldr	r2, [pc, #404]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b74:	e024      	b.n	8002bc0 <HAL_RCC_OscConfig+0x378>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d110      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x358>
 8002b7e:	4b60      	ldr	r3, [pc, #384]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b84:	4a5e      	ldr	r2, [pc, #376]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b94:	4a5a      	ldr	r2, [pc, #360]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b9e:	e00f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x378>
 8002ba0:	4b57      	ldr	r3, [pc, #348]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	4a56      	ldr	r2, [pc, #344]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bb0:	4b53      	ldr	r3, [pc, #332]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	4a52      	ldr	r2, [pc, #328]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002bb8:	f023 0304 	bic.w	r3, r3, #4
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d016      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe fb98 	bl	80012fc <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fb94 	bl	80012fc <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e138      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be6:	4b46      	ldr	r3, [pc, #280]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ed      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x388>
 8002bf4:	e015      	b.n	8002c22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fb81 	bl	80012fc <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fb7d 	bl	80012fc <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e121      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c14:	4b3a      	ldr	r3, [pc, #232]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1ed      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c22:	7ffb      	ldrb	r3, [r7, #31]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b35      	ldr	r3, [pc, #212]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2c:	4a34      	ldr	r2, [pc, #208]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03c      	beq.n	8002cba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01c      	beq.n	8002c82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c48:	4b2d      	ldr	r3, [pc, #180]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe fb50 	bl	80012fc <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c60:	f7fe fb4c 	bl	80012fc <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0f2      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c72:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ef      	beq.n	8002c60 <HAL_RCC_OscConfig+0x418>
 8002c80:	e01b      	b.n	8002cba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c82:	4b1f      	ldr	r3, [pc, #124]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c88:	4a1d      	ldr	r2, [pc, #116]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f7fe fb33 	bl	80012fc <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c9a:	f7fe fb2f 	bl	80012fc <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0d5      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cac:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ef      	bne.n	8002c9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80c9 	beq.w	8002e56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	f000 8083 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d15e      	bne.n	8002d98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <HAL_RCC_OscConfig+0x4b8>)
 8002ce0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fb09 	bl	80012fc <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cec:	e00c      	b.n	8002d08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fb05 	bl	80012fc <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d905      	bls.n	8002d08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0ab      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d08:	4b55      	ldr	r3, [pc, #340]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ec      	bne.n	8002cee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d14:	4b52      	ldr	r3, [pc, #328]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4b52      	ldr	r3, [pc, #328]	@ (8002e64 <HAL_RCC_OscConfig+0x61c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6a11      	ldr	r1, [r2, #32]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d24:	3a01      	subs	r2, #1
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d2e:	0212      	lsls	r2, r2, #8
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d36:	0852      	lsrs	r2, r2, #1
 8002d38:	3a01      	subs	r2, #1
 8002d3a:	0552      	lsls	r2, r2, #21
 8002d3c:	4311      	orrs	r1, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d42:	0852      	lsrs	r2, r2, #1
 8002d44:	3a01      	subs	r2, #1
 8002d46:	0652      	lsls	r2, r2, #25
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d4e:	06d2      	lsls	r2, r2, #27
 8002d50:	430a      	orrs	r2, r1
 8002d52:	4943      	ldr	r1, [pc, #268]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d58:	4b41      	ldr	r3, [pc, #260]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a40      	ldr	r2, [pc, #256]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d64:	4b3e      	ldr	r3, [pc, #248]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a3d      	ldr	r2, [pc, #244]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fac4 	bl	80012fc <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fac0 	bl	80012fc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e066      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	4b35      	ldr	r3, [pc, #212]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x530>
 8002d96:	e05e      	b.n	8002e56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d98:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a30      	ldr	r2, [pc, #192]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe faaa 	bl	80012fc <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe faa6 	bl	80012fc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e04c      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbe:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002dca:	4b25      	ldr	r3, [pc, #148]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	4924      	ldr	r1, [pc, #144]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002dd0:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <HAL_RCC_OscConfig+0x620>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60cb      	str	r3, [r1, #12]
 8002dd6:	e03e      	b.n	8002e56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e039      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002de4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0203 	and.w	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d12c      	bne.n	8002e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	3b01      	subs	r3, #1
 8002e04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d123      	bne.n	8002e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d11b      	bne.n	8002e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d113      	bne.n	8002e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	3b01      	subs	r3, #1
 8002e38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d109      	bne.n	8002e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	019f800c 	.word	0x019f800c
 8002e68:	feeefffc 	.word	0xfeeefffc

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e11e      	b.n	80030c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e84:	4b91      	ldr	r3, [pc, #580]	@ (80030cc <HAL_RCC_ClockConfig+0x260>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d910      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b8e      	ldr	r3, [pc, #568]	@ (80030cc <HAL_RCC_ClockConfig+0x260>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 020f 	bic.w	r2, r3, #15
 8002e9a:	498c      	ldr	r1, [pc, #560]	@ (80030cc <HAL_RCC_ClockConfig+0x260>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b8a      	ldr	r3, [pc, #552]	@ (80030cc <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e106      	b.n	80030c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d073      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d129      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec8:	4b81      	ldr	r3, [pc, #516]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0f4      	b.n	80030c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ed8:	f000 f9d0 	bl	800327c <RCC_GetSysClockFreqFromPLLSource>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4a7c      	ldr	r2, [pc, #496]	@ (80030d4 <HAL_RCC_ClockConfig+0x268>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d93f      	bls.n	8002f66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d033      	beq.n	8002f66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d12f      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f06:	4b72      	ldr	r3, [pc, #456]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f0e:	4a70      	ldr	r2, [pc, #448]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e024      	b.n	8002f66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f24:	4b6a      	ldr	r3, [pc, #424]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0c6      	b.n	80030c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f34:	4b66      	ldr	r3, [pc, #408]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0be      	b.n	80030c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f44:	f000 f8ce 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4a61      	ldr	r2, [pc, #388]	@ (80030d4 <HAL_RCC_ClockConfig+0x268>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d909      	bls.n	8002f66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f52:	4b5f      	ldr	r3, [pc, #380]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f5a:	4a5d      	ldr	r2, [pc, #372]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b5a      	ldr	r3, [pc, #360]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4957      	ldr	r1, [pc, #348]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe f9c0 	bl	80012fc <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fe f9bc 	bl	80012fc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e095      	b.n	80030c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b4e      	ldr	r3, [pc, #312]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d023      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b43      	ldr	r3, [pc, #268]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a42      	ldr	r2, [pc, #264]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002fe2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b39      	ldr	r3, [pc, #228]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4936      	ldr	r1, [pc, #216]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
 8002ffa:	e008      	b.n	800300e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b80      	cmp	r3, #128	@ 0x80
 8003000:	d105      	bne.n	800300e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003002:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4a32      	ldr	r2, [pc, #200]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8003008:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800300c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800300e:	4b2f      	ldr	r3, [pc, #188]	@ (80030cc <HAL_RCC_ClockConfig+0x260>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d21d      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301c:	4b2b      	ldr	r3, [pc, #172]	@ (80030cc <HAL_RCC_ClockConfig+0x260>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 020f 	bic.w	r2, r3, #15
 8003024:	4929      	ldr	r1, [pc, #164]	@ (80030cc <HAL_RCC_ClockConfig+0x260>)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800302c:	f7fe f966 	bl	80012fc <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7fe f962 	bl	80012fc <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e03b      	b.n	80030c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	@ (80030cc <HAL_RCC_ClockConfig+0x260>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d1ed      	bne.n	8003034 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b1a      	ldr	r3, [pc, #104]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4917      	ldr	r1, [pc, #92]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003082:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	490f      	ldr	r1, [pc, #60]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003096:	f000 f825 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b0c      	ldr	r3, [pc, #48]	@ (80030d0 <HAL_RCC_ClockConfig+0x264>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	490c      	ldr	r1, [pc, #48]	@ (80030d8 <HAL_RCC_ClockConfig+0x26c>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <HAL_RCC_ClockConfig+0x270>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <HAL_RCC_ClockConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd ff78 	bl	8000fb0 <HAL_InitTick>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	04c4b400 	.word	0x04c4b400
 80030d8:	0800a4fc 	.word	0x0800a4fc
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030ea:	4b2c      	ldr	r3, [pc, #176]	@ (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d102      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f6:	4b2a      	ldr	r3, [pc, #168]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	e047      	b.n	800318c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030fc:	4b27      	ldr	r3, [pc, #156]	@ (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d102      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003108:	4b26      	ldr	r3, [pc, #152]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	e03e      	b.n	800318c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800310e:	4b23      	ldr	r3, [pc, #140]	@ (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d136      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800311a:	4b20      	ldr	r3, [pc, #128]	@ (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003124:	4b1d      	ldr	r3, [pc, #116]	@ (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3301      	adds	r3, #1
 8003130:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d10c      	bne.n	8003152 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003138:	4a1a      	ldr	r2, [pc, #104]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	4a16      	ldr	r2, [pc, #88]	@ (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003142:	68d2      	ldr	r2, [r2, #12]
 8003144:	0a12      	lsrs	r2, r2, #8
 8003146:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
      break;
 8003150:	e00c      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003152:	4a13      	ldr	r2, [pc, #76]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4a10      	ldr	r2, [pc, #64]	@ (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	0a12      	lsrs	r2, r2, #8
 8003160:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003164:	fb02 f303 	mul.w	r3, r2, r3
 8003168:	617b      	str	r3, [r7, #20]
      break;
 800316a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_RCC_GetSysClockFreq+0xb8>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	0e5b      	lsrs	r3, r3, #25
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	3301      	adds	r3, #1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e001      	b.n	800318c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800318c:	693b      	ldr	r3, [r7, #16]
}
 800318e:	4618      	mov	r0, r3
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	016e3600 	.word	0x016e3600

080031a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000000 	.word	0x20000000

080031c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031c4:	f7ff fff0 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4904      	ldr	r1, [pc, #16]	@ (80031e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	0800a50c 	.word	0x0800a50c

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031f0:	f7ff ffda 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0adb      	lsrs	r3, r3, #11
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4904      	ldr	r1, [pc, #16]	@ (8003214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	0800a50c 	.word	0x0800a50c

08003218 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	220f      	movs	r2, #15
 8003226:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003228:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_RCC_GetClockConfig+0x5c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003234:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <HAL_RCC_GetClockConfig+0x5c>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <HAL_RCC_GetClockConfig+0x5c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800324c:	4b09      	ldr	r3, [pc, #36]	@ (8003274 <HAL_RCC_GetClockConfig+0x5c>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <HAL_RCC_GetClockConfig+0x60>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 020f 	and.w	r2, r3, #15
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40022000 	.word	0x40022000

0800327c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003282:	4b1e      	ldr	r3, [pc, #120]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800328c:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d10c      	bne.n	80032ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032a0:	4a17      	ldr	r2, [pc, #92]	@ (8003300 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	4a14      	ldr	r2, [pc, #80]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032aa:	68d2      	ldr	r2, [r2, #12]
 80032ac:	0a12      	lsrs	r2, r2, #8
 80032ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	617b      	str	r3, [r7, #20]
    break;
 80032b8:	e00c      	b.n	80032d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	4a0e      	ldr	r2, [pc, #56]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032c4:	68d2      	ldr	r2, [r2, #12]
 80032c6:	0a12      	lsrs	r2, r2, #8
 80032c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]
    break;
 80032d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	0e5b      	lsrs	r3, r3, #25
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	3301      	adds	r3, #1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032ee:	687b      	ldr	r3, [r7, #4]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40021000 	.word	0x40021000
 8003300:	016e3600 	.word	0x016e3600
 8003304:	00f42400 	.word	0x00f42400

08003308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003310:	2300      	movs	r3, #0
 8003312:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003314:	2300      	movs	r3, #0
 8003316:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8098 	beq.w	8003456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332a:	4b43      	ldr	r3, [pc, #268]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10d      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	4b40      	ldr	r3, [pc, #256]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	4a3f      	ldr	r2, [pc, #252]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003340:	6593      	str	r3, [r2, #88]	@ 0x58
 8003342:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003352:	4b3a      	ldr	r3, [pc, #232]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a39      	ldr	r2, [pc, #228]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335e:	f7fd ffcd 	bl	80012fc <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003364:	e009      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fd ffc9 	bl	80012fc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d902      	bls.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	74fb      	strb	r3, [r7, #19]
        break;
 8003378:	e005      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800337a:	4b30      	ldr	r3, [pc, #192]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ef      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d159      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800338c:	4b2a      	ldr	r3, [pc, #168]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003396:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01e      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d019      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a8:	4b23      	ldr	r3, [pc, #140]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b4:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d4:	4a18      	ldr	r2, [pc, #96]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d016      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fd ff89 	bl	80012fc <HAL_GetTick>
 80033ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ec:	e00b      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fd ff85 	bl	80012fc <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d902      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	74fb      	strb	r3, [r7, #19]
            break;
 8003404:	e006      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ec      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341a:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003428:	4903      	ldr	r1, [pc, #12]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003430:	e008      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	74bb      	strb	r3, [r7, #18]
 8003436:	e005      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003438:	40021000 	.word	0x40021000
 800343c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003444:	7c7b      	ldrb	r3, [r7, #17]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d105      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344a:	4ba7      	ldr	r3, [pc, #668]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344e:	4aa6      	ldr	r2, [pc, #664]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003462:	4ba1      	ldr	r3, [pc, #644]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003468:	f023 0203 	bic.w	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	499d      	ldr	r1, [pc, #628]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003484:	4b98      	ldr	r3, [pc, #608]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348a:	f023 020c 	bic.w	r2, r3, #12
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4995      	ldr	r1, [pc, #596]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034a6:	4b90      	ldr	r3, [pc, #576]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	498c      	ldr	r1, [pc, #560]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c8:	4b87      	ldr	r3, [pc, #540]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	4984      	ldr	r1, [pc, #528]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ea:	4b7f      	ldr	r3, [pc, #508]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	497b      	ldr	r1, [pc, #492]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800350c:	4b76      	ldr	r3, [pc, #472]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003512:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	4973      	ldr	r1, [pc, #460]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800352e:	4b6e      	ldr	r3, [pc, #440]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003534:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	496a      	ldr	r1, [pc, #424]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003550:	4b65      	ldr	r3, [pc, #404]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4962      	ldr	r1, [pc, #392]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003572:	4b5d      	ldr	r3, [pc, #372]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003578:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	4959      	ldr	r1, [pc, #356]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003594:	4b54      	ldr	r3, [pc, #336]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	4951      	ldr	r1, [pc, #324]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035b6:	4b4c      	ldr	r3, [pc, #304]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	4948      	ldr	r1, [pc, #288]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d8:	4b43      	ldr	r3, [pc, #268]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	4940      	ldr	r1, [pc, #256]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f6:	d105      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f8:	4b3b      	ldr	r3, [pc, #236]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a3a      	ldr	r2, [pc, #232]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003602:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003610:	4b35      	ldr	r3, [pc, #212]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361e:	4932      	ldr	r1, [pc, #200]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362e:	d105      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003630:	4b2d      	ldr	r3, [pc, #180]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a2c      	ldr	r2, [pc, #176]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800363a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003648:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003656:	4924      	ldr	r1, [pc, #144]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003666:	d105      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003668:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003672:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003680:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	4916      	ldr	r1, [pc, #88]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800369e:	d105      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a0:	4b11      	ldr	r3, [pc, #68]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a10      	ldr	r2, [pc, #64]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d019      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	4908      	ldr	r1, [pc, #32]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d6:	d109      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a02      	ldr	r2, [pc, #8]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	e002      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036f8:	4b29      	ldr	r3, [pc, #164]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	4926      	ldr	r1, [pc, #152]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003718:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a20      	ldr	r2, [pc, #128]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003722:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373e:	4918      	ldr	r1, [pc, #96]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374e:	d105      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003750:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d015      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003768:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800376a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800376e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003776:	490a      	ldr	r1, [pc, #40]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003786:	d105      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003788:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4a04      	ldr	r2, [pc, #16]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800378e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003792:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003794:	7cbb      	ldrb	r3, [r7, #18]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000

080037a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e049      	b.n	800384a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f841 	bl	8003852 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f000 fa30 	bl	8003c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d001      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e054      	b.n	800392a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a26      	ldr	r2, [pc, #152]	@ (8003938 <HAL_TIM_Base_Start_IT+0xd0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d022      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x80>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038aa:	d01d      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x80>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a22      	ldr	r2, [pc, #136]	@ (800393c <HAL_TIM_Base_Start_IT+0xd4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x80>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a21      	ldr	r2, [pc, #132]	@ (8003940 <HAL_TIM_Base_Start_IT+0xd8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x80>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003944 <HAL_TIM_Base_Start_IT+0xdc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x80>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003948 <HAL_TIM_Base_Start_IT+0xe0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x80>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <HAL_TIM_Base_Start_IT+0xe4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x80>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003950 <HAL_TIM_Base_Start_IT+0xe8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d115      	bne.n	8003914 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_TIM_Base_Start_IT+0xec>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d015      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0xbe>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003900:	d011      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003912:	e008      	b.n	8003926 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e000      	b.n	8003928 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40013400 	.word	0x40013400
 800394c:	40014000 	.word	0x40014000
 8003950:	40015000 	.word	0x40015000
 8003954:	00010007 	.word	0x00010007

08003958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d020      	beq.n	80039bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0202 	mvn.w	r2, #2
 800398c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f931 	bl	8003c0a <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f923 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f934 	bl	8003c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d020      	beq.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0204 	mvn.w	r2, #4
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f90b 	bl	8003c0a <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8fd 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f90e 	bl	8003c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d020      	beq.n	8003a54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01b      	beq.n	8003a54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0208 	mvn.w	r2, #8
 8003a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f8e5 	bl	8003c0a <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8d7 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f8e8 	bl	8003c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d020      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01b      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0210 	mvn.w	r2, #16
 8003a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2208      	movs	r2, #8
 8003a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8bf 	bl	8003c0a <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8b1 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8c2 	bl	8003c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0201 	mvn.w	r2, #1
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd f938 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f969 	bl	8003dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f961 	bl	8003dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f87c 	bl	8003c32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f06f 0220 	mvn.w	r2, #32
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f929 	bl	8003db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f935 	bl	8003dec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f92d 	bl	8003e00 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00c      	beq.n	8003bca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f925 	bl	8003e14 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f91d 	bl	8003e28 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8003d8c <TIM_Base_SetConfig+0x144>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d017      	beq.n	8003c90 <TIM_Base_SetConfig+0x48>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c66:	d013      	beq.n	8003c90 <TIM_Base_SetConfig+0x48>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a49      	ldr	r2, [pc, #292]	@ (8003d90 <TIM_Base_SetConfig+0x148>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00f      	beq.n	8003c90 <TIM_Base_SetConfig+0x48>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a48      	ldr	r2, [pc, #288]	@ (8003d94 <TIM_Base_SetConfig+0x14c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <TIM_Base_SetConfig+0x48>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a47      	ldr	r2, [pc, #284]	@ (8003d98 <TIM_Base_SetConfig+0x150>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d007      	beq.n	8003c90 <TIM_Base_SetConfig+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a46      	ldr	r2, [pc, #280]	@ (8003d9c <TIM_Base_SetConfig+0x154>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0x48>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a45      	ldr	r2, [pc, #276]	@ (8003da0 <TIM_Base_SetConfig+0x158>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d108      	bne.n	8003ca2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a39      	ldr	r2, [pc, #228]	@ (8003d8c <TIM_Base_SetConfig+0x144>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d023      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb0:	d01f      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a36      	ldr	r2, [pc, #216]	@ (8003d90 <TIM_Base_SetConfig+0x148>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01b      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a35      	ldr	r2, [pc, #212]	@ (8003d94 <TIM_Base_SetConfig+0x14c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d017      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a34      	ldr	r2, [pc, #208]	@ (8003d98 <TIM_Base_SetConfig+0x150>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a33      	ldr	r2, [pc, #204]	@ (8003d9c <TIM_Base_SetConfig+0x154>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00f      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a33      	ldr	r2, [pc, #204]	@ (8003da4 <TIM_Base_SetConfig+0x15c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a32      	ldr	r2, [pc, #200]	@ (8003da8 <TIM_Base_SetConfig+0x160>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a31      	ldr	r2, [pc, #196]	@ (8003dac <TIM_Base_SetConfig+0x164>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_Base_SetConfig+0xaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a2c      	ldr	r2, [pc, #176]	@ (8003da0 <TIM_Base_SetConfig+0x158>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d108      	bne.n	8003d04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <TIM_Base_SetConfig+0x144>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <TIM_Base_SetConfig+0x110>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1a      	ldr	r2, [pc, #104]	@ (8003d9c <TIM_Base_SetConfig+0x154>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00f      	beq.n	8003d58 <TIM_Base_SetConfig+0x110>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003da4 <TIM_Base_SetConfig+0x15c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00b      	beq.n	8003d58 <TIM_Base_SetConfig+0x110>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a19      	ldr	r2, [pc, #100]	@ (8003da8 <TIM_Base_SetConfig+0x160>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <TIM_Base_SetConfig+0x110>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <TIM_Base_SetConfig+0x164>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_Base_SetConfig+0x110>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a13      	ldr	r2, [pc, #76]	@ (8003da0 <TIM_Base_SetConfig+0x158>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d103      	bne.n	8003d60 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f023 0201 	bic.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	611a      	str	r2, [r3, #16]
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	40013400 	.word	0x40013400
 8003da0:	40015000 	.word	0x40015000
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40014400 	.word	0x40014400
 8003dac:	40014800 	.word	0x40014800

08003db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e042      	b.n	8003ed4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fd f845 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2224      	movs	r2, #36	@ 0x24
 8003e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 ff14 	bl	8004cb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fc15 	bl	80046bc <UART_SetConfig>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e01b      	b.n	8003ed4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 ff93 	bl	8004df8 <UART_CheckIdleState>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	@ 0x28
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d17b      	bne.n	8003fee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Transmit+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e074      	b.n	8003ff0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2221      	movs	r2, #33	@ 0x21
 8003f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f16:	f7fd f9f1 	bl	80012fc <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f34:	d108      	bne.n	8003f48 <HAL_UART_Transmit+0x6c>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e003      	b.n	8003f50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f50:	e030      	b.n	8003fb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2180      	movs	r1, #128	@ 0x80
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fff5 	bl	8004f4c <UART_WaitOnFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e03d      	b.n	8003ff0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e007      	b.n	8003fa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1c8      	bne.n	8003f52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2140      	movs	r1, #64	@ 0x40
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 ffbe 	bl	8004f4c <UART_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e006      	b.n	8003ff0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b0ba      	sub	sp, #232	@ 0xe8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800401e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004022:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004026:	4013      	ands	r3, r2
 8004028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800402c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11b      	bne.n	800406c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d015      	beq.n	800406c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800404c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8300 	beq.w	8004662 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
      }
      return;
 800406a:	e2fa      	b.n	8004662 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800406c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8123 	beq.w	80042bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004076:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800407a:	4b8d      	ldr	r3, [pc, #564]	@ (80042b0 <HAL_UART_IRQHandler+0x2b8>)
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004086:	4b8b      	ldr	r3, [pc, #556]	@ (80042b4 <HAL_UART_IRQHandler+0x2bc>)
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8116 	beq.w	80042bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d011      	beq.n	80040c0 <HAL_UART_IRQHandler+0xc8>
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2201      	movs	r2, #1
 80040ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d011      	beq.n	80040f0 <HAL_UART_IRQHandler+0xf8>
 80040cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2202      	movs	r2, #2
 80040de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e6:	f043 0204 	orr.w	r2, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d011      	beq.n	8004120 <HAL_UART_IRQHandler+0x128>
 80040fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2204      	movs	r2, #4
 800410e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f043 0202 	orr.w	r2, r3, #2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d017      	beq.n	800415c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800412c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004138:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800413c:	4b5c      	ldr	r3, [pc, #368]	@ (80042b0 <HAL_UART_IRQHandler+0x2b8>)
 800413e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00b      	beq.n	800415c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2208      	movs	r2, #8
 800414a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	f043 0208 	orr.w	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800415c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <HAL_UART_IRQHandler+0x196>
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00c      	beq.n	800418e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800417c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8266 	beq.w	8004666 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800419a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d013      	beq.n	80041ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d105      	bne.n	80041be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e2:	2b40      	cmp	r3, #64	@ 0x40
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d054      	beq.n	800429c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 ff17 	bl	8005026 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004202:	2b40      	cmp	r3, #64	@ 0x40
 8004204:	d146      	bne.n	8004294 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800421c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800423e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800424a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1d9      	bne.n	8004206 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d017      	beq.n	800428c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004262:	4a15      	ldr	r2, [pc, #84]	@ (80042b8 <HAL_UART_IRQHandler+0x2c0>)
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800426c:	4618      	mov	r0, r3
 800426e:	f7fd f98a 	bl	8001586 <HAL_DMA_Abort_IT>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d019      	beq.n	80042ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004286:	4610      	mov	r0, r2
 8004288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428a:	e00f      	b.n	80042ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f9ff 	bl	8004690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004292:	e00b      	b.n	80042ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f9fb 	bl	8004690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429a:	e007      	b.n	80042ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f9f7 	bl	8004690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80042aa:	e1dc      	b.n	8004666 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ac:	bf00      	nop
    return;
 80042ae:	e1da      	b.n	8004666 <HAL_UART_IRQHandler+0x66e>
 80042b0:	10000001 	.word	0x10000001
 80042b4:	04000120 	.word	0x04000120
 80042b8:	080050f3 	.word	0x080050f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 8170 	bne.w	80045a6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8169 	beq.w	80045a6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8162 	beq.w	80045a6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2210      	movs	r2, #16
 80042e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	f040 80d8 	bne.w	80044aa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80af 	beq.w	8004470 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800431c:	429a      	cmp	r2, r3
 800431e:	f080 80a7 	bcs.w	8004470 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 8087 	bne.w	800444e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800435c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800436a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800436e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1da      	bne.n	8004340 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3308      	adds	r3, #8
 8004390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800439a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e1      	bne.n	800438a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e3      	bne.n	80043c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800441a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800441c:	f023 0310 	bic.w	r3, r3, #16
 8004420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800442e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004430:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800443c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e4      	bne.n	800440c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004448:	4618      	mov	r0, r3
 800444a:	f7fd f843 	bl	80014d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004460:	b29b      	uxth	r3, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	b29b      	uxth	r3, r3
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f91b 	bl	80046a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800446e:	e0fc      	b.n	800466a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800447a:	429a      	cmp	r2, r3
 800447c:	f040 80f5 	bne.w	800466a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	f040 80eb 	bne.w	800466a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f8fe 	bl	80046a4 <HAL_UARTEx_RxEventCallback>
      return;
 80044a8:	e0df      	b.n	800466a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80d1 	beq.w	800466e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80044cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80cc 	beq.w	800466e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e4      	bne.n	80044d6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3308      	adds	r3, #8
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	623b      	str	r3, [r7, #32]
   return(result);
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3308      	adds	r3, #8
 8004530:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004534:	633a      	str	r2, [r7, #48]	@ 0x30
 8004536:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800453a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e1      	bne.n	800450c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	60fb      	str	r3, [r7, #12]
   return(result);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0310 	bic.w	r3, r3, #16
 8004570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	69b9      	ldr	r1, [r7, #24]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	617b      	str	r3, [r7, #20]
   return(result);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e4      	bne.n	800455c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f880 	bl	80046a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045a4:	e063      	b.n	800466e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <HAL_UART_IRQHandler+0x5d8>
 80045b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80045c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fdcf 	bl	800516c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045ce:	e051      	b.n	8004674 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80045d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d014      	beq.n	8004606 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80045dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80045e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d03a      	beq.n	8004672 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
    }
    return;
 8004604:	e035      	b.n	8004672 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_UART_IRQHandler+0x62e>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fd79 	bl	8005116 <UART_EndTransmit_IT>
    return;
 8004624:	e026      	b.n	8004674 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <HAL_UART_IRQHandler+0x64e>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004636:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fda8 	bl	8005194 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004644:	e016      	b.n	8004674 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_UART_IRQHandler+0x67c>
 8004652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004656:	2b00      	cmp	r3, #0
 8004658:	da0c      	bge.n	8004674 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fd90 	bl	8005180 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004660:	e008      	b.n	8004674 <HAL_UART_IRQHandler+0x67c>
      return;
 8004662:	bf00      	nop
 8004664:	e006      	b.n	8004674 <HAL_UART_IRQHandler+0x67c>
    return;
 8004666:	bf00      	nop
 8004668:	e004      	b.n	8004674 <HAL_UART_IRQHandler+0x67c>
      return;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <HAL_UART_IRQHandler+0x67c>
      return;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <HAL_UART_IRQHandler+0x67c>
    return;
 8004672:	bf00      	nop
  }
}
 8004674:	37e8      	adds	r7, #232	@ 0xe8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop

0800467c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c0:	b08c      	sub	sp, #48	@ 0x30
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	431a      	orrs	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4baa      	ldr	r3, [pc, #680]	@ (8004994 <UART_SetConfig+0x2d8>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a9f      	ldr	r2, [pc, #636]	@ (8004998 <UART_SetConfig+0x2dc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004724:	4313      	orrs	r3, r2
 8004726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004732:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800473c:	430b      	orrs	r3, r1
 800473e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	f023 010f 	bic.w	r1, r3, #15
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a90      	ldr	r2, [pc, #576]	@ (800499c <UART_SetConfig+0x2e0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d125      	bne.n	80047ac <UART_SetConfig+0xf0>
 8004760:	4b8f      	ldr	r3, [pc, #572]	@ (80049a0 <UART_SetConfig+0x2e4>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b03      	cmp	r3, #3
 800476c:	d81a      	bhi.n	80047a4 <UART_SetConfig+0xe8>
 800476e:	a201      	add	r2, pc, #4	@ (adr r2, 8004774 <UART_SetConfig+0xb8>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004785 	.word	0x08004785
 8004778:	08004795 	.word	0x08004795
 800477c:	0800478d 	.word	0x0800478d
 8004780:	0800479d 	.word	0x0800479d
 8004784:	2301      	movs	r3, #1
 8004786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800478a:	e116      	b.n	80049ba <UART_SetConfig+0x2fe>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004792:	e112      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800479a:	e10e      	b.n	80049ba <UART_SetConfig+0x2fe>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a2:	e10a      	b.n	80049ba <UART_SetConfig+0x2fe>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047aa:	e106      	b.n	80049ba <UART_SetConfig+0x2fe>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a7c      	ldr	r2, [pc, #496]	@ (80049a4 <UART_SetConfig+0x2e8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d138      	bne.n	8004828 <UART_SetConfig+0x16c>
 80047b6:	4b7a      	ldr	r3, [pc, #488]	@ (80049a0 <UART_SetConfig+0x2e4>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	d82d      	bhi.n	8004820 <UART_SetConfig+0x164>
 80047c4:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <UART_SetConfig+0x110>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	08004801 	.word	0x08004801
 80047d0:	08004821 	.word	0x08004821
 80047d4:	08004821 	.word	0x08004821
 80047d8:	08004821 	.word	0x08004821
 80047dc:	08004811 	.word	0x08004811
 80047e0:	08004821 	.word	0x08004821
 80047e4:	08004821 	.word	0x08004821
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004809 	.word	0x08004809
 80047f0:	08004821 	.word	0x08004821
 80047f4:	08004821 	.word	0x08004821
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004819 	.word	0x08004819
 8004800:	2300      	movs	r3, #0
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004806:	e0d8      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004808:	2302      	movs	r3, #2
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480e:	e0d4      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004810:	2304      	movs	r3, #4
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004816:	e0d0      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004818:	2308      	movs	r3, #8
 800481a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481e:	e0cc      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004820:	2310      	movs	r3, #16
 8004822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004826:	e0c8      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a5e      	ldr	r2, [pc, #376]	@ (80049a8 <UART_SetConfig+0x2ec>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d125      	bne.n	800487e <UART_SetConfig+0x1c2>
 8004832:	4b5b      	ldr	r3, [pc, #364]	@ (80049a0 <UART_SetConfig+0x2e4>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800483c:	2b30      	cmp	r3, #48	@ 0x30
 800483e:	d016      	beq.n	800486e <UART_SetConfig+0x1b2>
 8004840:	2b30      	cmp	r3, #48	@ 0x30
 8004842:	d818      	bhi.n	8004876 <UART_SetConfig+0x1ba>
 8004844:	2b20      	cmp	r3, #32
 8004846:	d00a      	beq.n	800485e <UART_SetConfig+0x1a2>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d814      	bhi.n	8004876 <UART_SetConfig+0x1ba>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <UART_SetConfig+0x19a>
 8004850:	2b10      	cmp	r3, #16
 8004852:	d008      	beq.n	8004866 <UART_SetConfig+0x1aa>
 8004854:	e00f      	b.n	8004876 <UART_SetConfig+0x1ba>
 8004856:	2300      	movs	r3, #0
 8004858:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485c:	e0ad      	b.n	80049ba <UART_SetConfig+0x2fe>
 800485e:	2302      	movs	r3, #2
 8004860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004864:	e0a9      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004866:	2304      	movs	r3, #4
 8004868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486c:	e0a5      	b.n	80049ba <UART_SetConfig+0x2fe>
 800486e:	2308      	movs	r3, #8
 8004870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004874:	e0a1      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004876:	2310      	movs	r3, #16
 8004878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800487c:	e09d      	b.n	80049ba <UART_SetConfig+0x2fe>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a4a      	ldr	r2, [pc, #296]	@ (80049ac <UART_SetConfig+0x2f0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d125      	bne.n	80048d4 <UART_SetConfig+0x218>
 8004888:	4b45      	ldr	r3, [pc, #276]	@ (80049a0 <UART_SetConfig+0x2e4>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004892:	2bc0      	cmp	r3, #192	@ 0xc0
 8004894:	d016      	beq.n	80048c4 <UART_SetConfig+0x208>
 8004896:	2bc0      	cmp	r3, #192	@ 0xc0
 8004898:	d818      	bhi.n	80048cc <UART_SetConfig+0x210>
 800489a:	2b80      	cmp	r3, #128	@ 0x80
 800489c:	d00a      	beq.n	80048b4 <UART_SetConfig+0x1f8>
 800489e:	2b80      	cmp	r3, #128	@ 0x80
 80048a0:	d814      	bhi.n	80048cc <UART_SetConfig+0x210>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <UART_SetConfig+0x1f0>
 80048a6:	2b40      	cmp	r3, #64	@ 0x40
 80048a8:	d008      	beq.n	80048bc <UART_SetConfig+0x200>
 80048aa:	e00f      	b.n	80048cc <UART_SetConfig+0x210>
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b2:	e082      	b.n	80049ba <UART_SetConfig+0x2fe>
 80048b4:	2302      	movs	r3, #2
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	e07e      	b.n	80049ba <UART_SetConfig+0x2fe>
 80048bc:	2304      	movs	r3, #4
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c2:	e07a      	b.n	80049ba <UART_SetConfig+0x2fe>
 80048c4:	2308      	movs	r3, #8
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ca:	e076      	b.n	80049ba <UART_SetConfig+0x2fe>
 80048cc:	2310      	movs	r3, #16
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d2:	e072      	b.n	80049ba <UART_SetConfig+0x2fe>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a35      	ldr	r2, [pc, #212]	@ (80049b0 <UART_SetConfig+0x2f4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d12a      	bne.n	8004934 <UART_SetConfig+0x278>
 80048de:	4b30      	ldr	r3, [pc, #192]	@ (80049a0 <UART_SetConfig+0x2e4>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ec:	d01a      	beq.n	8004924 <UART_SetConfig+0x268>
 80048ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048f2:	d81b      	bhi.n	800492c <UART_SetConfig+0x270>
 80048f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048f8:	d00c      	beq.n	8004914 <UART_SetConfig+0x258>
 80048fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048fe:	d815      	bhi.n	800492c <UART_SetConfig+0x270>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <UART_SetConfig+0x250>
 8004904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004908:	d008      	beq.n	800491c <UART_SetConfig+0x260>
 800490a:	e00f      	b.n	800492c <UART_SetConfig+0x270>
 800490c:	2300      	movs	r3, #0
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004912:	e052      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004914:	2302      	movs	r3, #2
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491a:	e04e      	b.n	80049ba <UART_SetConfig+0x2fe>
 800491c:	2304      	movs	r3, #4
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004922:	e04a      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004924:	2308      	movs	r3, #8
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492a:	e046      	b.n	80049ba <UART_SetConfig+0x2fe>
 800492c:	2310      	movs	r3, #16
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004932:	e042      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a17      	ldr	r2, [pc, #92]	@ (8004998 <UART_SetConfig+0x2dc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d13a      	bne.n	80049b4 <UART_SetConfig+0x2f8>
 800493e:	4b18      	ldr	r3, [pc, #96]	@ (80049a0 <UART_SetConfig+0x2e4>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004944:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004948:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800494c:	d01a      	beq.n	8004984 <UART_SetConfig+0x2c8>
 800494e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004952:	d81b      	bhi.n	800498c <UART_SetConfig+0x2d0>
 8004954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004958:	d00c      	beq.n	8004974 <UART_SetConfig+0x2b8>
 800495a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800495e:	d815      	bhi.n	800498c <UART_SetConfig+0x2d0>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <UART_SetConfig+0x2b0>
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004968:	d008      	beq.n	800497c <UART_SetConfig+0x2c0>
 800496a:	e00f      	b.n	800498c <UART_SetConfig+0x2d0>
 800496c:	2300      	movs	r3, #0
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004972:	e022      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004974:	2302      	movs	r3, #2
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800497a:	e01e      	b.n	80049ba <UART_SetConfig+0x2fe>
 800497c:	2304      	movs	r3, #4
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004982:	e01a      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004984:	2308      	movs	r3, #8
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800498a:	e016      	b.n	80049ba <UART_SetConfig+0x2fe>
 800498c:	2310      	movs	r3, #16
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004992:	e012      	b.n	80049ba <UART_SetConfig+0x2fe>
 8004994:	cfff69f3 	.word	0xcfff69f3
 8004998:	40008000 	.word	0x40008000
 800499c:	40013800 	.word	0x40013800
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40004400 	.word	0x40004400
 80049a8:	40004800 	.word	0x40004800
 80049ac:	40004c00 	.word	0x40004c00
 80049b0:	40005000 	.word	0x40005000
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4aae      	ldr	r2, [pc, #696]	@ (8004c78 <UART_SetConfig+0x5bc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	f040 8097 	bne.w	8004af4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d823      	bhi.n	8004a16 <UART_SetConfig+0x35a>
 80049ce:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <UART_SetConfig+0x318>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a17 	.word	0x08004a17
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a17 	.word	0x08004a17
 80049e4:	08004a07 	.word	0x08004a07
 80049e8:	08004a17 	.word	0x08004a17
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a17 	.word	0x08004a17
 80049f4:	08004a0f 	.word	0x08004a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f8:	f7fe fbe2 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 80049fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049fe:	e010      	b.n	8004a22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a00:	4b9e      	ldr	r3, [pc, #632]	@ (8004c7c <UART_SetConfig+0x5c0>)
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a04:	e00d      	b.n	8004a22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a06:	f7fe fb6d 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8004a0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a0c:	e009      	b.n	8004a22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a14:	e005      	b.n	8004a22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8130 	beq.w	8004c8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	4a94      	ldr	r2, [pc, #592]	@ (8004c80 <UART_SetConfig+0x5c4>)
 8004a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	4413      	add	r3, r2
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d305      	bcc.n	8004a5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d903      	bls.n	8004a62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a60:	e113      	b.n	8004c8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	2200      	movs	r2, #0
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	60fa      	str	r2, [r7, #12]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	4a84      	ldr	r2, [pc, #528]	@ (8004c80 <UART_SetConfig+0x5c4>)
 8004a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2200      	movs	r2, #0
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a84:	f7fb fc1c 	bl	80002c0 <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	020b      	lsls	r3, r1, #8
 8004a9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a9e:	0202      	lsls	r2, r0, #8
 8004aa0:	6979      	ldr	r1, [r7, #20]
 8004aa2:	6849      	ldr	r1, [r1, #4]
 8004aa4:	0849      	lsrs	r1, r1, #1
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	4605      	mov	r5, r0
 8004aac:	eb12 0804 	adds.w	r8, r2, r4
 8004ab0:	eb43 0905 	adc.w	r9, r3, r5
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	469a      	mov	sl, r3
 8004abc:	4693      	mov	fp, r2
 8004abe:	4652      	mov	r2, sl
 8004ac0:	465b      	mov	r3, fp
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	f7fb fbfb 	bl	80002c0 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4613      	mov	r3, r2
 8004ad0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ad8:	d308      	bcc.n	8004aec <UART_SetConfig+0x430>
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ae0:	d204      	bcs.n	8004aec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a3a      	ldr	r2, [r7, #32]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	e0ce      	b.n	8004c8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004af2:	e0ca      	b.n	8004c8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afc:	d166      	bne.n	8004bcc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004afe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d827      	bhi.n	8004b56 <UART_SetConfig+0x49a>
 8004b06:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x450>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe fb46 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8004b34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b36:	e014      	b.n	8004b62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe fb58 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8004b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b3e:	e010      	b.n	8004b62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b4e      	ldr	r3, [pc, #312]	@ (8004c7c <UART_SetConfig+0x5c0>)
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b44:	e00d      	b.n	8004b62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fe facd 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8004b4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b4c:	e009      	b.n	8004b62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b54:	e005      	b.n	8004b62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8090 	beq.w	8004c8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	4a44      	ldr	r2, [pc, #272]	@ (8004c80 <UART_SetConfig+0x5c4>)
 8004b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b7c:	005a      	lsls	r2, r3, #1
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	441a      	add	r2, r3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	d916      	bls.n	8004bc4 <UART_SetConfig+0x508>
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9c:	d212      	bcs.n	8004bc4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f023 030f 	bic.w	r3, r3, #15
 8004ba6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	8bfb      	ldrh	r3, [r7, #30]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	8bfa      	ldrh	r2, [r7, #30]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	e062      	b.n	8004c8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bca:	e05e      	b.n	8004c8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d828      	bhi.n	8004c26 <UART_SetConfig+0x56a>
 8004bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <UART_SetConfig+0x520>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c11 	.word	0x08004c11
 8004be8:	08004c27 	.word	0x08004c27
 8004bec:	08004c17 	.word	0x08004c17
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c27 	.word	0x08004c27
 8004bf8:	08004c27 	.word	0x08004c27
 8004bfc:	08004c1f 	.word	0x08004c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c00:	f7fe fade 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8004c04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c06:	e014      	b.n	8004c32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c08:	f7fe faf0 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c0e:	e010      	b.n	8004c32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c10:	4b1a      	ldr	r3, [pc, #104]	@ (8004c7c <UART_SetConfig+0x5c0>)
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c14:	e00d      	b.n	8004c32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c16:	f7fe fa65 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8004c1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c1c:	e009      	b.n	8004c32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c24:	e005      	b.n	8004c32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c30:	bf00      	nop
    }

    if (pclk != 0U)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d028      	beq.n	8004c8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	4a10      	ldr	r2, [pc, #64]	@ (8004c80 <UART_SetConfig+0x5c4>)
 8004c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	441a      	add	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	d910      	bls.n	8004c84 <UART_SetConfig+0x5c8>
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c68:	d20c      	bcs.n	8004c84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60da      	str	r2, [r3, #12]
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x5ce>
 8004c76:	bf00      	nop
 8004c78:	40008000 	.word	0x40008000
 8004c7c:	00f42400 	.word	0x00f42400
 8004c80:	0800a524 	.word	0x0800a524
      }
      else
      {
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ca6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3730      	adds	r7, #48	@ 0x30
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01a      	beq.n	8004dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004db2:	d10a      	bne.n	8004dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b098      	sub	sp, #96	@ 0x60
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e08:	f7fc fa78 	bl	80012fc <HAL_GetTick>
 8004e0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d12f      	bne.n	8004e7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e24:	2200      	movs	r2, #0
 8004e26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f88e 	bl	8004f4c <UART_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d022      	beq.n	8004e7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e6      	bne.n	8004e36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e063      	b.n	8004f44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d149      	bne.n	8004f1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e92:	2200      	movs	r2, #0
 8004e94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f857 	bl	8004f4c <UART_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d03c      	beq.n	8004f1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ef6:	61fa      	str	r2, [r7, #28]
 8004ef8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	69b9      	ldr	r1, [r7, #24]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	617b      	str	r3, [r7, #20]
   return(result);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e012      	b.n	8004f44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3758      	adds	r7, #88	@ 0x58
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5c:	e04f      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f64:	d04b      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fc f9c9 	bl	80012fc <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e04e      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d037      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b80      	cmp	r3, #128	@ 0x80
 8004f92:	d034      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b40      	cmp	r3, #64	@ 0x40
 8004f98:	d031      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d110      	bne.n	8004fca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2208      	movs	r2, #8
 8004fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f838 	bl	8005026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e029      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fd8:	d111      	bne.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f81e 	bl	8005026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e00f      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	429a      	cmp	r2, r3
 800501a:	d0a0      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005026:	b480      	push	{r7}
 8005028:	b095      	sub	sp, #84	@ 0x54
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800503c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800504c:	643b      	str	r3, [r7, #64]	@ 0x40
 800504e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005052:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e6      	bne.n	800502e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3308      	adds	r3, #8
 8005066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3308      	adds	r3, #8
 8005082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800508a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e3      	bne.n	8005060 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d118      	bne.n	80050d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0310 	bic.w	r3, r3, #16
 80050b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6979      	ldr	r1, [r7, #20]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	613b      	str	r3, [r7, #16]
   return(result);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050e6:	bf00      	nop
 80050e8:	3754      	adds	r7, #84	@ 0x54
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fac1 	bl	8004690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b088      	sub	sp, #32
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	60bb      	str	r3, [r7, #8]
   return(result);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	6979      	ldr	r1, [r7, #20]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	613b      	str	r3, [r7, #16]
   return(result);
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e6      	bne.n	800511e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff fa8c 	bl	800467c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005164:	bf00      	nop
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_UARTEx_DisableFifoMode+0x16>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e027      	b.n	800520e <HAL_UARTEx_DisableFifoMode+0x66>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2224      	movs	r2, #36	@ 0x24
 80051ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80051ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800522e:	2302      	movs	r3, #2
 8005230:	e02d      	b.n	800528e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2224      	movs	r2, #36	@ 0x24
 800523e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0201 	bic.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f850 	bl	8005314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e02d      	b.n	800530a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2224      	movs	r2, #36	@ 0x24
 80052ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f812 	bl	8005314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005320:	2b00      	cmp	r3, #0
 8005322:	d108      	bne.n	8005336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005334:	e031      	b.n	800539a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005336:	2308      	movs	r3, #8
 8005338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800533a:	2308      	movs	r3, #8
 800533c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	0e5b      	lsrs	r3, r3, #25
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	0f5b      	lsrs	r3, r3, #29
 8005356:	b2db      	uxtb	r3, r3
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800535e:	7bbb      	ldrb	r3, [r7, #14]
 8005360:	7b3a      	ldrb	r2, [r7, #12]
 8005362:	4911      	ldr	r1, [pc, #68]	@ (80053a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005364:	5c8a      	ldrb	r2, [r1, r2]
 8005366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800536a:	7b3a      	ldrb	r2, [r7, #12]
 800536c:	490f      	ldr	r1, [pc, #60]	@ (80053ac <UARTEx_SetNbDataToProcess+0x98>)
 800536e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005370:	fb93 f3f2 	sdiv	r3, r3, r2
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	7b7a      	ldrb	r2, [r7, #13]
 8005380:	4909      	ldr	r1, [pc, #36]	@ (80053a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005382:	5c8a      	ldrb	r2, [r1, r2]
 8005384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005388:	7b7a      	ldrb	r2, [r7, #13]
 800538a:	4908      	ldr	r1, [pc, #32]	@ (80053ac <UARTEx_SetNbDataToProcess+0x98>)
 800538c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800538e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	0800a53c 	.word	0x0800a53c
 80053ac:	0800a544 	.word	0x0800a544

080053b0 <__NVIC_SetPriority>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	6039      	str	r1, [r7, #0]
 80053ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	db0a      	blt.n	80053da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	490c      	ldr	r1, [pc, #48]	@ (80053fc <__NVIC_SetPriority+0x4c>)
 80053ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ce:	0112      	lsls	r2, r2, #4
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	440b      	add	r3, r1
 80053d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80053d8:	e00a      	b.n	80053f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	4908      	ldr	r1, [pc, #32]	@ (8005400 <__NVIC_SetPriority+0x50>)
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	3b04      	subs	r3, #4
 80053e8:	0112      	lsls	r2, r2, #4
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	440b      	add	r3, r1
 80053ee:	761a      	strb	r2, [r3, #24]
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	e000e100 	.word	0xe000e100
 8005400:	e000ed00 	.word	0xe000ed00

08005404 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005408:	4b05      	ldr	r3, [pc, #20]	@ (8005420 <SysTick_Handler+0x1c>)
 800540a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800540c:	f002 fc70 	bl	8007cf0 <xTaskGetSchedulerState>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d001      	beq.n	800541a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005416:	f003 fb67 	bl	8008ae8 <xPortSysTickHandler>
  }
}
 800541a:	bf00      	nop
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	e000e010 	.word	0xe000e010

08005424 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005428:	2100      	movs	r1, #0
 800542a:	f06f 0004 	mvn.w	r0, #4
 800542e:	f7ff ffbf 	bl	80053b0 <__NVIC_SetPriority>
#endif
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800543e:	f3ef 8305 	mrs	r3, IPSR
 8005442:	603b      	str	r3, [r7, #0]
  return(result);
 8005444:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800544a:	f06f 0305 	mvn.w	r3, #5
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	e00c      	b.n	800546c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005452:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <osKernelInitialize+0x44>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800545a:	4b08      	ldr	r3, [pc, #32]	@ (800547c <osKernelInitialize+0x44>)
 800545c:	2201      	movs	r2, #1
 800545e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005460:	2300      	movs	r3, #0
 8005462:	607b      	str	r3, [r7, #4]
 8005464:	e002      	b.n	800546c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800546a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800546c:	687b      	ldr	r3, [r7, #4]
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	2000020c 	.word	0x2000020c

08005480 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005486:	f3ef 8305 	mrs	r3, IPSR
 800548a:	603b      	str	r3, [r7, #0]
  return(result);
 800548c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005492:	f06f 0305 	mvn.w	r3, #5
 8005496:	607b      	str	r3, [r7, #4]
 8005498:	e010      	b.n	80054bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800549a:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <osKernelStart+0x48>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d109      	bne.n	80054b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054a2:	f7ff ffbf 	bl	8005424 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054a6:	4b08      	ldr	r3, [pc, #32]	@ (80054c8 <osKernelStart+0x48>)
 80054a8:	2202      	movs	r2, #2
 80054aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054ac:	f001 ffc2 	bl	8007434 <vTaskStartScheduler>
      stat = osOK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	e002      	b.n	80054bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80054b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054bc:	687b      	ldr	r3, [r7, #4]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000020c 	.word	0x2000020c

080054cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	@ 0x38
 80054d0:	af04      	add	r7, sp, #16
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054dc:	f3ef 8305 	mrs	r3, IPSR
 80054e0:	617b      	str	r3, [r7, #20]
  return(result);
 80054e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d17e      	bne.n	80055e6 <osThreadNew+0x11a>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d07b      	beq.n	80055e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80054ee:	2380      	movs	r3, #128	@ 0x80
 80054f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80054f2:	2318      	movs	r3, #24
 80054f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80054fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d045      	beq.n	8005592 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <osThreadNew+0x48>
        name = attr->name;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <osThreadNew+0x6e>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b38      	cmp	r3, #56	@ 0x38
 800552c:	d805      	bhi.n	800553a <osThreadNew+0x6e>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <osThreadNew+0x72>
        return (NULL);
 800553a:	2300      	movs	r3, #0
 800553c:	e054      	b.n	80055e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00e      	beq.n	8005574 <osThreadNew+0xa8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b5b      	cmp	r3, #91	@ 0x5b
 800555c:	d90a      	bls.n	8005574 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005562:	2b00      	cmp	r3, #0
 8005564:	d006      	beq.n	8005574 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <osThreadNew+0xa8>
        mem = 1;
 800556e:	2301      	movs	r3, #1
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e010      	b.n	8005596 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10c      	bne.n	8005596 <osThreadNew+0xca>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <osThreadNew+0xca>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <osThreadNew+0xca>
          mem = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	e001      	b.n	8005596 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d110      	bne.n	80055be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055a4:	9202      	str	r2, [sp, #8]
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f001 fd62 	bl	800707c <xTaskCreateStatic>
 80055b8:	4603      	mov	r3, r0
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	e013      	b.n	80055e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d110      	bne.n	80055e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	f107 0310 	add.w	r3, r7, #16
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f001 fdb0 	bl	800713c <xTaskCreate>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d001      	beq.n	80055e6 <osThreadNew+0x11a>
            hTask = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055e6:	693b      	ldr	r3, [r7, #16]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3728      	adds	r7, #40	@ 0x28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f8:	f3ef 8305 	mrs	r3, IPSR
 80055fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80055fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <osDelay+0x1c>
    stat = osErrorISR;
 8005604:	f06f 0305 	mvn.w	r3, #5
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e007      	b.n	800561c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 fed6 	bl	80073c8 <vTaskDelay>
    }
  }

  return (stat);
 800561c:	68fb      	ldr	r3, [r7, #12]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005626:	b580      	push	{r7, lr}
 8005628:	b088      	sub	sp, #32
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005632:	f3ef 8305 	mrs	r3, IPSR
 8005636:	60bb      	str	r3, [r7, #8]
  return(result);
 8005638:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800563a:	2b00      	cmp	r3, #0
 800563c:	d174      	bne.n	8005728 <osMutexNew+0x102>
    if (attr != NULL) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <osMutexNew+0x26>
      type = attr->attr_bits;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e001      	b.n	8005650 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <osMutexNew+0x3a>
      rmtx = 1U;
 800565a:	2301      	movs	r3, #1
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e001      	b.n	8005664 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d15c      	bne.n	8005728 <osMutexNew+0x102>
      mem = -1;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005672:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d015      	beq.n	80056a6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d006      	beq.n	8005690 <osMutexNew+0x6a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2b4f      	cmp	r3, #79	@ 0x4f
 8005688:	d902      	bls.n	8005690 <osMutexNew+0x6a>
          mem = 1;
 800568a:	2301      	movs	r3, #1
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	e00c      	b.n	80056aa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d108      	bne.n	80056aa <osMutexNew+0x84>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <osMutexNew+0x84>
            mem = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	e001      	b.n	80056aa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d112      	bne.n	80056d6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	4619      	mov	r1, r3
 80056bc:	2004      	movs	r0, #4
 80056be:	f000 fd70 	bl	80061a2 <xQueueCreateMutexStatic>
 80056c2:	61f8      	str	r0, [r7, #28]
 80056c4:	e016      	b.n	80056f4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4619      	mov	r1, r3
 80056cc:	2001      	movs	r0, #1
 80056ce:	f000 fd68 	bl	80061a2 <xQueueCreateMutexStatic>
 80056d2:	61f8      	str	r0, [r7, #28]
 80056d4:	e00e      	b.n	80056f4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80056e2:	2004      	movs	r0, #4
 80056e4:	f000 fd45 	bl	8006172 <xQueueCreateMutex>
 80056e8:	61f8      	str	r0, [r7, #28]
 80056ea:	e003      	b.n	80056f4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80056ec:	2001      	movs	r0, #1
 80056ee:	f000 fd40 	bl	8006172 <xQueueCreateMutex>
 80056f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <osMutexNew+0xee>
        if (attr != NULL) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <osMutexNew+0xe2>
          name = attr->name;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	e001      	b.n	800570c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	69f8      	ldr	r0, [r7, #28]
 8005710:	f001 fc2c 	bl	8006f6c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <osMutexNew+0x102>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005728:	69fb      	ldr	r3, [r7, #28]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f023 0301 	bic.w	r3, r3, #1
 8005742:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005750:	f3ef 8305 	mrs	r3, IPSR
 8005754:	60bb      	str	r3, [r7, #8]
  return(result);
 8005756:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800575c:	f06f 0305 	mvn.w	r3, #5
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e02c      	b.n	80057be <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800576a:	f06f 0303 	mvn.w	r3, #3
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e025      	b.n	80057be <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d011      	beq.n	800579c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6938      	ldr	r0, [r7, #16]
 800577c:	f000 fd61 	bl	8006242 <xQueueTakeMutexRecursive>
 8005780:	4603      	mov	r3, r0
 8005782:	2b01      	cmp	r3, #1
 8005784:	d01b      	beq.n	80057be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800578c:	f06f 0301 	mvn.w	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e014      	b.n	80057be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005794:	f06f 0302 	mvn.w	r3, #2
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e010      	b.n	80057be <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f001 f906 	bl	80069b0 <xQueueSemaphoreTake>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d009      	beq.n	80057be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80057b0:	f06f 0301 	mvn.w	r3, #1
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e002      	b.n	80057be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057b8:	f06f 0302 	mvn.w	r3, #2
 80057bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80057be:	697b      	ldr	r3, [r7, #20]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e4:	f3ef 8305 	mrs	r3, IPSR
 80057e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80057ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80057f0:	f06f 0305 	mvn.w	r3, #5
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e01f      	b.n	8005838 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80057fe:	f06f 0303 	mvn.w	r3, #3
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e018      	b.n	8005838 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800580c:	6938      	ldr	r0, [r7, #16]
 800580e:	f000 fce3 	bl	80061d8 <xQueueGiveMutexRecursive>
 8005812:	4603      	mov	r3, r0
 8005814:	2b01      	cmp	r3, #1
 8005816:	d00f      	beq.n	8005838 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005818:	f06f 0302 	mvn.w	r3, #2
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e00b      	b.n	8005838 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005820:	2300      	movs	r3, #0
 8005822:	2200      	movs	r2, #0
 8005824:	2100      	movs	r1, #0
 8005826:	6938      	ldr	r0, [r7, #16]
 8005828:	f000 fdb0 	bl	800638c <xQueueGenericSend>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d002      	beq.n	8005838 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005832:	f06f 0302 	mvn.w	r3, #2
 8005836:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005838:	697b      	ldr	r3, [r7, #20]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005842:	b580      	push	{r7, lr}
 8005844:	b08a      	sub	sp, #40	@ 0x28
 8005846:	af02      	add	r7, sp, #8
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005852:	f3ef 8305 	mrs	r3, IPSR
 8005856:	613b      	str	r3, [r7, #16]
  return(result);
 8005858:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800585a:	2b00      	cmp	r3, #0
 800585c:	d175      	bne.n	800594a <osSemaphoreNew+0x108>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d072      	beq.n	800594a <osSemaphoreNew+0x108>
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	d86e      	bhi.n	800594a <osSemaphoreNew+0x108>
    mem = -1;
 800586c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005870:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d015      	beq.n	80058a4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <osSemaphoreNew+0x4c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	2b4f      	cmp	r3, #79	@ 0x4f
 8005886:	d902      	bls.n	800588e <osSemaphoreNew+0x4c>
        mem = 1;
 8005888:	2301      	movs	r3, #1
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	e00c      	b.n	80058a8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d108      	bne.n	80058a8 <osSemaphoreNew+0x66>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <osSemaphoreNew+0x66>
          mem = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	e001      	b.n	80058a8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058ae:	d04c      	beq.n	800594a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d128      	bne.n	8005908 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10a      	bne.n	80058d2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2203      	movs	r2, #3
 80058c2:	9200      	str	r2, [sp, #0]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2100      	movs	r1, #0
 80058c8:	2001      	movs	r0, #1
 80058ca:	f000 fb5d 	bl	8005f88 <xQueueGenericCreateStatic>
 80058ce:	61f8      	str	r0, [r7, #28]
 80058d0:	e005      	b.n	80058de <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80058d2:	2203      	movs	r2, #3
 80058d4:	2100      	movs	r1, #0
 80058d6:	2001      	movs	r0, #1
 80058d8:	f000 fbd3 	bl	8006082 <xQueueGenericCreate>
 80058dc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d022      	beq.n	800592a <osSemaphoreNew+0xe8>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01f      	beq.n	800592a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80058ea:	2300      	movs	r3, #0
 80058ec:	2200      	movs	r2, #0
 80058ee:	2100      	movs	r1, #0
 80058f0:	69f8      	ldr	r0, [r7, #28]
 80058f2:	f000 fd4b 	bl	800638c <xQueueGenericSend>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d016      	beq.n	800592a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80058fc:	69f8      	ldr	r0, [r7, #28]
 80058fe:	f001 f9e9 	bl	8006cd4 <vQueueDelete>
            hSemaphore = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	e010      	b.n	800592a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d108      	bne.n	8005920 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	461a      	mov	r2, r3
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fcca 	bl	80062b0 <xQueueCreateCountingSemaphoreStatic>
 800591c:	61f8      	str	r0, [r7, #28]
 800591e:	e004      	b.n	800592a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fcfd 	bl	8006322 <xQueueCreateCountingSemaphore>
 8005928:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00c      	beq.n	800594a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e001      	b.n	8005942 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005942:	6979      	ldr	r1, [r7, #20]
 8005944:	69f8      	ldr	r0, [r7, #28]
 8005946:	f001 fb11 	bl	8006f6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800594a:	69fb      	ldr	r3, [r7, #28]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800596c:	f06f 0303 	mvn.w	r3, #3
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e039      	b.n	80059e8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005974:	f3ef 8305 	mrs	r3, IPSR
 8005978:	60fb      	str	r3, [r7, #12]
  return(result);
 800597a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800597c:	2b00      	cmp	r3, #0
 800597e:	d022      	beq.n	80059c6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005986:	f06f 0303 	mvn.w	r3, #3
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e02c      	b.n	80059e8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005992:	f107 0308 	add.w	r3, r7, #8
 8005996:	461a      	mov	r2, r3
 8005998:	2100      	movs	r1, #0
 800599a:	6938      	ldr	r0, [r7, #16]
 800599c:	f001 f918 	bl	8006bd0 <xQueueReceiveFromISR>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d003      	beq.n	80059ae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80059a6:	f06f 0302 	mvn.w	r3, #2
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e01c      	b.n	80059e8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d019      	beq.n	80059e8 <osSemaphoreAcquire+0x94>
 80059b4:	4b0f      	ldr	r3, [pc, #60]	@ (80059f4 <osSemaphoreAcquire+0xa0>)
 80059b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	e010      	b.n	80059e8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6938      	ldr	r0, [r7, #16]
 80059ca:	f000 fff1 	bl	80069b0 <xQueueSemaphoreTake>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d009      	beq.n	80059e8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80059da:	f06f 0301 	mvn.w	r3, #1
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e002      	b.n	80059e8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80059e2:	f06f 0302 	mvn.w	r3, #2
 80059e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80059e8:	697b      	ldr	r3, [r7, #20]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a0e:	f06f 0303 	mvn.w	r3, #3
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e02c      	b.n	8005a70 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a16:	f3ef 8305 	mrs	r3, IPSR
 8005a1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01a      	beq.n	8005a58 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005a26:	f107 0308 	add.w	r3, r7, #8
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6938      	ldr	r0, [r7, #16]
 8005a2e:	f000 fe4d 	bl	80066cc <xQueueGiveFromISR>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d003      	beq.n	8005a40 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005a38:	f06f 0302 	mvn.w	r3, #2
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	e017      	b.n	8005a70 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d014      	beq.n	8005a70 <osSemaphoreRelease+0x78>
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <osSemaphoreRelease+0x84>)
 8005a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	e00b      	b.n	8005a70 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6938      	ldr	r0, [r7, #16]
 8005a60:	f000 fc94 	bl	800638c <xQueueGenericSend>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d002      	beq.n	8005a70 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a6a:	f06f 0302 	mvn.w	r3, #2
 8005a6e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a70:	697b      	ldr	r3, [r7, #20]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	@ 0x28
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a90:	f3ef 8305 	mrs	r3, IPSR
 8005a94:	613b      	str	r3, [r7, #16]
  return(result);
 8005a96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d15f      	bne.n	8005b5c <osMessageQueueNew+0xdc>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d05c      	beq.n	8005b5c <osMessageQueueNew+0xdc>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d059      	beq.n	8005b5c <osMessageQueueNew+0xdc>
    mem = -1;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005aac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d029      	beq.n	8005b08 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d012      	beq.n	8005ae2 <osMessageQueueNew+0x62>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ac2:	d90e      	bls.n	8005ae2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d302      	bcc.n	8005ae2 <osMessageQueueNew+0x62>
        mem = 1;
 8005adc:	2301      	movs	r3, #1
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	e014      	b.n	8005b0c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d110      	bne.n	8005b0c <osMessageQueueNew+0x8c>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <osMessageQueueNew+0x8c>
          mem = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e001      	b.n	8005b0c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10b      	bne.n	8005b2a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	9100      	str	r1, [sp, #0]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fa31 	bl	8005f88 <xQueueGenericCreateStatic>
 8005b26:	61f8      	str	r0, [r7, #28]
 8005b28:	e008      	b.n	8005b3c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b30:	2200      	movs	r2, #0
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 faa4 	bl	8006082 <xQueueGenericCreate>
 8005b3a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00c      	beq.n	8005b5c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e001      	b.n	8005b54 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b54:	6979      	ldr	r1, [r7, #20]
 8005b56:	69f8      	ldr	r0, [r7, #28]
 8005b58:	f001 fa08 	bl	8006f6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b5c:	69fb      	ldr	r3, [r7, #28]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b80:	f3ef 8305 	mrs	r3, IPSR
 8005b84:	617b      	str	r3, [r7, #20]
  return(result);
 8005b86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d028      	beq.n	8005bde <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <osMessageQueuePut+0x36>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <osMessageQueuePut+0x36>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b9e:	f06f 0303 	mvn.w	r3, #3
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	e038      	b.n	8005c18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005baa:	f107 0210 	add.w	r2, r7, #16
 8005bae:	2300      	movs	r3, #0
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	69b8      	ldr	r0, [r7, #24]
 8005bb4:	f000 fcec 	bl	8006590 <xQueueGenericSendFromISR>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d003      	beq.n	8005bc6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005bbe:	f06f 0302 	mvn.w	r3, #2
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e028      	b.n	8005c18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d025      	beq.n	8005c18 <osMessageQueuePut+0xb0>
 8005bcc:	4b15      	ldr	r3, [pc, #84]	@ (8005c24 <osMessageQueuePut+0xbc>)
 8005bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	e01c      	b.n	8005c18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <osMessageQueuePut+0x82>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005bea:	f06f 0303 	mvn.w	r3, #3
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	e012      	b.n	8005c18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	69b8      	ldr	r0, [r7, #24]
 8005bfa:	f000 fbc7 	bl	800638c <xQueueGenericSend>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d009      	beq.n	8005c18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005c0a:	f06f 0301 	mvn.w	r3, #1
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	e002      	b.n	8005c18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005c12:	f06f 0302 	mvn.w	r3, #2
 8005c16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c18:	69fb      	ldr	r3, [r7, #28]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c3e:	f3ef 8305 	mrs	r3, IPSR
 8005c42:	617b      	str	r3, [r7, #20]
  return(result);
 8005c44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d028      	beq.n	8005c9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <osMessageQueueGet+0x34>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <osMessageQueueGet+0x34>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c5c:	f06f 0303 	mvn.w	r3, #3
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e037      	b.n	8005cd4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005c68:	f107 0310 	add.w	r3, r7, #16
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	69b8      	ldr	r0, [r7, #24]
 8005c72:	f000 ffad 	bl	8006bd0 <xQueueReceiveFromISR>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d003      	beq.n	8005c84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005c7c:	f06f 0302 	mvn.w	r3, #2
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	e027      	b.n	8005cd4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d024      	beq.n	8005cd4 <osMessageQueueGet+0xac>
 8005c8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ce0 <osMessageQueueGet+0xb8>)
 8005c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	e01b      	b.n	8005cd4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <osMessageQueueGet+0x80>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d103      	bne.n	8005cb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ca8:	f06f 0303 	mvn.w	r3, #3
 8005cac:	61fb      	str	r3, [r7, #28]
 8005cae:	e011      	b.n	8005cd4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	69b8      	ldr	r0, [r7, #24]
 8005cb6:	f000 fd99 	bl	80067ec <xQueueReceive>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d009      	beq.n	8005cd4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005cc6:	f06f 0301 	mvn.w	r3, #1
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e002      	b.n	8005cd4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005cce:	f06f 0302 	mvn.w	r3, #2
 8005cd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005cd4:	69fb      	ldr	r3, [r7, #28]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a07      	ldr	r2, [pc, #28]	@ (8005d10 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4a06      	ldr	r2, [pc, #24]	@ (8005d14 <vApplicationGetIdleTaskMemory+0x30>)
 8005cfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2280      	movs	r2, #128	@ 0x80
 8005d00:	601a      	str	r2, [r3, #0]
}
 8005d02:	bf00      	nop
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000210 	.word	0x20000210
 8005d14:	2000026c 	.word	0x2000026c

08005d18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a07      	ldr	r2, [pc, #28]	@ (8005d44 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4a06      	ldr	r2, [pc, #24]	@ (8005d48 <vApplicationGetTimerTaskMemory+0x30>)
 8005d2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d36:	601a      	str	r2, [r3, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	2000046c 	.word	0x2000046c
 8005d48:	200004c8 	.word	0x200004c8

08005d4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f103 0208 	add.w	r2, r3, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f103 0208 	add.w	r2, r3, #8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0208 	add.w	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e04:	d103      	bne.n	8005e0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e00c      	b.n	8005e28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3308      	adds	r3, #8
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e002      	b.n	8005e1c <vListInsert+0x2e>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d2f6      	bcs.n	8005e16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	601a      	str	r2, [r3, #0]
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6892      	ldr	r2, [r2, #8]
 8005e76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6852      	ldr	r2, [r2, #4]
 8005e80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d103      	bne.n	8005e94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	1e5a      	subs	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10b      	bne.n	8005ee0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	e7fd      	b.n	8005edc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ee0:	f002 fd72 	bl	80089c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eec:	68f9      	ldr	r1, [r7, #12]
 8005eee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f10:	3b01      	subs	r3, #1
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	441a      	add	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	22ff      	movs	r2, #255	@ 0xff
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	22ff      	movs	r2, #255	@ 0xff
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d114      	bne.n	8005f60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d01a      	beq.n	8005f74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3310      	adds	r3, #16
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fd04 	bl	8007950 <xTaskRemoveFromEventList>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d012      	beq.n	8005f74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <xQueueGenericReset+0xd0>)
 8005f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	e009      	b.n	8005f74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3310      	adds	r3, #16
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fef1 	bl	8005d4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3324      	adds	r3, #36	@ 0x24
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff feec 	bl	8005d4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f74:	f002 fd5a 	bl	8008a2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f78:	2301      	movs	r3, #1
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08e      	sub	sp, #56	@ 0x38
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10b      	bne.n	8005fb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <xQueueGenericCreateStatic+0x56>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <xQueueGenericCreateStatic+0x5a>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <xQueueGenericCreateStatic+0x5c>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	623b      	str	r3, [r7, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	e7fd      	b.n	8005ffc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <xQueueGenericCreateStatic+0x84>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <xQueueGenericCreateStatic+0x88>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <xQueueGenericCreateStatic+0x8a>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	61fb      	str	r3, [r7, #28]
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800602e:	2350      	movs	r3, #80	@ 0x50
 8006030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b50      	cmp	r3, #80	@ 0x50
 8006036:	d00b      	beq.n	8006050 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	61bb      	str	r3, [r7, #24]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006050:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800605c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006064:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4613      	mov	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f840 	bl	80060f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800607a:	4618      	mov	r0, r3
 800607c:	3730      	adds	r7, #48	@ 0x30
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006082:	b580      	push	{r7, lr}
 8006084:	b08a      	sub	sp, #40	@ 0x28
 8006086:	af02      	add	r7, sp, #8
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	4613      	mov	r3, r2
 800608e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <xQueueGenericCreate+0x2c>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	613b      	str	r3, [r7, #16]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	fb02 f303 	mul.w	r3, r2, r3
 80060b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3350      	adds	r3, #80	@ 0x50
 80060bc:	4618      	mov	r0, r3
 80060be:	f002 fda5 	bl	8008c0c <pvPortMalloc>
 80060c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d011      	beq.n	80060ee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	3350      	adds	r3, #80	@ 0x50
 80060d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060dc:	79fa      	ldrb	r2, [r7, #7]
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f805 	bl	80060f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060ee:	69bb      	ldr	r3, [r7, #24]
	}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e002      	b.n	800611a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006126:	2101      	movs	r1, #1
 8006128:	69b8      	ldr	r0, [r7, #24]
 800612a:	f7ff fec3 	bl	8005eb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800615e:	2300      	movs	r3, #0
 8006160:	2200      	movs	r2, #0
 8006162:	2100      	movs	r1, #0
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f911 	bl	800638c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	4603      	mov	r3, r0
 800617a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	461a      	mov	r2, r3
 8006188:	6939      	ldr	r1, [r7, #16]
 800618a:	6978      	ldr	r0, [r7, #20]
 800618c:	f7ff ff79 	bl	8006082 <xQueueGenericCreate>
 8006190:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff ffd3 	bl	800613e <prvInitialiseMutex>

		return xNewQueue;
 8006198:	68fb      	ldr	r3, [r7, #12]
	}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b088      	sub	sp, #32
 80061a6:	af02      	add	r7, sp, #8
 80061a8:	4603      	mov	r3, r0
 80061aa:	6039      	str	r1, [r7, #0]
 80061ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061ae:	2301      	movs	r3, #1
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80061b6:	79fb      	ldrb	r3, [r7, #7]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	6939      	ldr	r1, [r7, #16]
 80061c0:	6978      	ldr	r0, [r7, #20]
 80061c2:	f7ff fee1 	bl	8005f88 <xQueueGenericCreateStatic>
 80061c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f7ff ffb8 	bl	800613e <prvInitialiseMutex>

		return xNewQueue;
 80061ce:	68fb      	ldr	r3, [r7, #12]
	}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80061d8:	b590      	push	{r4, r7, lr}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10b      	bne.n	8006202 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	60fb      	str	r3, [r7, #12]
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	689c      	ldr	r4, [r3, #8]
 8006206:	f001 fd63 	bl	8007cd0 <xTaskGetCurrentTaskHandle>
 800620a:	4603      	mov	r3, r0
 800620c:	429c      	cmp	r4, r3
 800620e:	d111      	bne.n	8006234 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	1e5a      	subs	r2, r3, #1
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d105      	bne.n	800622e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006222:	2300      	movs	r3, #0
 8006224:	2200      	movs	r2, #0
 8006226:	2100      	movs	r1, #0
 8006228:	6938      	ldr	r0, [r7, #16]
 800622a:	f000 f8af 	bl	800638c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800622e:	2301      	movs	r3, #1
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e001      	b.n	8006238 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006238:	697b      	ldr	r3, [r7, #20]
	}
 800623a:	4618      	mov	r0, r3
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd90      	pop	{r4, r7, pc}

08006242 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006242:	b590      	push	{r4, r7, lr}
 8006244:	b087      	sub	sp, #28
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	60fb      	str	r3, [r7, #12]
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	e7fd      	b.n	800626a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	689c      	ldr	r4, [r3, #8]
 8006272:	f001 fd2d 	bl	8007cd0 <xTaskGetCurrentTaskHandle>
 8006276:	4603      	mov	r3, r0
 8006278:	429c      	cmp	r4, r3
 800627a:	d107      	bne.n	800628c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006286:	2301      	movs	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	e00c      	b.n	80062a6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6938      	ldr	r0, [r7, #16]
 8006290:	f000 fb8e 	bl	80069b0 <xQueueSemaphoreTake>
 8006294:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80062a6:	697b      	ldr	r3, [r7, #20]
	}
 80062a8:	4618      	mov	r0, r3
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd90      	pop	{r4, r7, pc}

080062b0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	@ 0x28
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10b      	bne.n	80062da <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	61bb      	str	r3, [r7, #24]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d90b      	bls.n	80062fa <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	617b      	str	r3, [r7, #20]
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	e7fd      	b.n	80062f6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80062fa:	2302      	movs	r3, #2
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	2100      	movs	r1, #0
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff fe3f 	bl	8005f88 <xQueueGenericCreateStatic>
 800630a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006318:	69fb      	ldr	r3, [r7, #28]
	}
 800631a:	4618      	mov	r0, r3
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006322:	b580      	push	{r7, lr}
 8006324:	b086      	sub	sp, #24
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	613b      	str	r3, [r7, #16]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d90b      	bls.n	800636a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60fb      	str	r3, [r7, #12]
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	e7fd      	b.n	8006366 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800636a:	2202      	movs	r2, #2
 800636c:	2100      	movs	r1, #0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fe87 	bl	8006082 <xQueueGenericCreate>
 8006374:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006382:	697b      	ldr	r3, [r7, #20]
	}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08e      	sub	sp, #56	@ 0x38
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800639a:	2300      	movs	r3, #0
 800639c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10b      	bne.n	80063c0 <xQueueGenericSend+0x34>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <xQueueGenericSend+0x42>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueGenericSend+0x46>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueGenericSend+0x48>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <xQueueGenericSend+0x64>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	e7fd      	b.n	80063ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSend+0x72>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <xQueueGenericSend+0x76>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueGenericSend+0x78>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <xQueueGenericSend+0x94>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	623b      	str	r3, [r7, #32]
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006420:	f001 fc66 	bl	8007cf0 <xTaskGetSchedulerState>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <xQueueGenericSend+0xa4>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <xQueueGenericSend+0xa8>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <xQueueGenericSend+0xaa>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <xQueueGenericSend+0xc6>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	61fb      	str	r3, [r7, #28]
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	e7fd      	b.n	800644e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006452:	f002 fab9 	bl	80089c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <xQueueGenericSend+0xdc>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d129      	bne.n	80064bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	68b9      	ldr	r1, [r7, #8]
 800646c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800646e:	f000 fc6d 	bl	8006d4c <prvCopyDataToQueue>
 8006472:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d010      	beq.n	800649e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	3324      	adds	r3, #36	@ 0x24
 8006480:	4618      	mov	r0, r3
 8006482:	f001 fa65 	bl	8007950 <xTaskRemoveFromEventList>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d013      	beq.n	80064b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800648c:	4b3f      	ldr	r3, [pc, #252]	@ (800658c <xQueueGenericSend+0x200>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	e00a      	b.n	80064b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064a4:	4b39      	ldr	r3, [pc, #228]	@ (800658c <xQueueGenericSend+0x200>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064b4:	f002 faba 	bl	8008a2c <vPortExitCritical>
				return pdPASS;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e063      	b.n	8006584 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d103      	bne.n	80064ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064c2:	f002 fab3 	bl	8008a2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e05c      	b.n	8006584 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d106      	bne.n	80064de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064d0:	f107 0314 	add.w	r3, r7, #20
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fa9f 	bl	8007a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064da:	2301      	movs	r3, #1
 80064dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064de:	f002 faa5 	bl	8008a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064e2:	f001 f80f 	bl	8007504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064e6:	f002 fa6f 	bl	80089c8 <vPortEnterCritical>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064f0:	b25b      	sxtb	r3, r3
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064f6:	d103      	bne.n	8006500 <xQueueGenericSend+0x174>
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006502:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006506:	b25b      	sxtb	r3, r3
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800650c:	d103      	bne.n	8006516 <xQueueGenericSend+0x18a>
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006516:	f002 fa89 	bl	8008a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800651a:	1d3a      	adds	r2, r7, #4
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	4611      	mov	r1, r2
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fa8e 	bl	8007a44 <xTaskCheckForTimeOut>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d124      	bne.n	8006578 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800652e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006530:	f000 fd04 	bl	8006f3c <prvIsQueueFull>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	3310      	adds	r3, #16
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	4611      	mov	r1, r2
 8006542:	4618      	mov	r0, r3
 8006544:	f001 f9b2 	bl	80078ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800654a:	f000 fc8f 	bl	8006e6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800654e:	f000 ffe7 	bl	8007520 <xTaskResumeAll>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	f47f af7c 	bne.w	8006452 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800655a:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <xQueueGenericSend+0x200>)
 800655c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	e772      	b.n	8006452 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800656c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800656e:	f000 fc7d 	bl	8006e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006572:	f000 ffd5 	bl	8007520 <xTaskResumeAll>
 8006576:	e76c      	b.n	8006452 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006578:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800657a:	f000 fc77 	bl	8006e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800657e:	f000 ffcf 	bl	8007520 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006582:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006584:	4618      	mov	r0, r3
 8006586:	3738      	adds	r7, #56	@ 0x38
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	e000ed04 	.word	0xe000ed04

08006590 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b090      	sub	sp, #64	@ 0x40
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d103      	bne.n	80065ce <xQueueGenericSendFromISR+0x3e>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <xQueueGenericSendFromISR+0x42>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <xQueueGenericSendFromISR+0x44>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d103      	bne.n	80065fe <xQueueGenericSendFromISR+0x6e>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <xQueueGenericSendFromISR+0x72>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <xQueueGenericSendFromISR+0x74>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	623b      	str	r3, [r7, #32]
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	e7fd      	b.n	800661c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006620:	f002 fab2 	bl	8008b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006624:	f3ef 8211 	mrs	r2, BASEPRI
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	61fa      	str	r2, [r7, #28]
 800663a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800663c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800663e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006648:	429a      	cmp	r2, r3
 800664a:	d302      	bcc.n	8006652 <xQueueGenericSendFromISR+0xc2>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d12f      	bne.n	80066b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006658:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006660:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006668:	f000 fb70 	bl	8006d4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800666c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006674:	d112      	bne.n	800669c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d016      	beq.n	80066ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800667e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006680:	3324      	adds	r3, #36	@ 0x24
 8006682:	4618      	mov	r0, r3
 8006684:	f001 f964 	bl	8007950 <xTaskRemoveFromEventList>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e007      	b.n	80066ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800669c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066a0:	3301      	adds	r3, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	b25a      	sxtb	r2, r3
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066ac:	2301      	movs	r3, #1
 80066ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066b0:	e001      	b.n	80066b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3740      	adds	r7, #64	@ 0x40
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08e      	sub	sp, #56	@ 0x38
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10b      	bne.n	80066f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	61fb      	str	r3, [r7, #28]
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	e7fd      	b.n	8006714 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <xQueueGiveFromISR+0x5c>
 8006720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <xQueueGiveFromISR+0x60>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <xQueueGiveFromISR+0x62>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	61bb      	str	r3, [r7, #24]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800674a:	f002 fa1d 	bl	8008b88 <vPortValidateInterruptPriority>
	__asm volatile
 800674e:	f3ef 8211 	mrs	r2, BASEPRI
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	617a      	str	r2, [r7, #20]
 8006764:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006766:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006768:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006776:	429a      	cmp	r2, r3
 8006778:	d22b      	bcs.n	80067d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800678c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006794:	d112      	bne.n	80067bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d016      	beq.n	80067cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	3324      	adds	r3, #36	@ 0x24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 f8d4 	bl	8007950 <xTaskRemoveFromEventList>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e007      	b.n	80067cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067c0:	3301      	adds	r3, #1
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	b25a      	sxtb	r2, r3
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067cc:	2301      	movs	r3, #1
 80067ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d0:	e001      	b.n	80067d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f383 8811 	msr	BASEPRI, r3
}
 80067e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3738      	adds	r7, #56	@ 0x38
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08c      	sub	sp, #48	@ 0x30
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <xQueueReceive+0x32>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	623b      	str	r3, [r7, #32]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d103      	bne.n	800682c <xQueueReceive+0x40>
 8006824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <xQueueReceive+0x44>
 800682c:	2301      	movs	r3, #1
 800682e:	e000      	b.n	8006832 <xQueueReceive+0x46>
 8006830:	2300      	movs	r3, #0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <xQueueReceive+0x62>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	61fb      	str	r3, [r7, #28]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800684e:	f001 fa4f 	bl	8007cf0 <xTaskGetSchedulerState>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <xQueueReceive+0x72>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <xQueueReceive+0x76>
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <xQueueReceive+0x78>
 8006862:	2300      	movs	r3, #0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <xQueueReceive+0x94>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	61bb      	str	r3, [r7, #24]
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006880:	f002 f8a2 	bl	80089c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01f      	beq.n	80068d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006894:	f000 fac4 	bl	8006e20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	1e5a      	subs	r2, r3, #1
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00f      	beq.n	80068c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068aa:	3310      	adds	r3, #16
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 f84f 	bl	8007950 <xTaskRemoveFromEventList>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d007      	beq.n	80068c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068b8:	4b3c      	ldr	r3, [pc, #240]	@ (80069ac <xQueueReceive+0x1c0>)
 80068ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068c8:	f002 f8b0 	bl	8008a2c <vPortExitCritical>
				return pdPASS;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e069      	b.n	80069a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068d6:	f002 f8a9 	bl	8008a2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068da:	2300      	movs	r3, #0
 80068dc:	e062      	b.n	80069a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068e4:	f107 0310 	add.w	r3, r7, #16
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f895 	bl	8007a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ee:	2301      	movs	r3, #1
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068f2:	f002 f89b 	bl	8008a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068f6:	f000 fe05 	bl	8007504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068fa:	f002 f865 	bl	80089c8 <vPortEnterCritical>
 80068fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006904:	b25b      	sxtb	r3, r3
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800690a:	d103      	bne.n	8006914 <xQueueReceive+0x128>
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006916:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800691a:	b25b      	sxtb	r3, r3
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006920:	d103      	bne.n	800692a <xQueueReceive+0x13e>
 8006922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800692a:	f002 f87f 	bl	8008a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800692e:	1d3a      	adds	r2, r7, #4
 8006930:	f107 0310 	add.w	r3, r7, #16
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f001 f884 	bl	8007a44 <xTaskCheckForTimeOut>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d123      	bne.n	800698a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006944:	f000 fae4 	bl	8006f10 <prvIsQueueEmpty>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d017      	beq.n	800697e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	3324      	adds	r3, #36	@ 0x24
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f000 ffa8 	bl	80078ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800695c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800695e:	f000 fa85 	bl	8006e6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006962:	f000 fddd 	bl	8007520 <xTaskResumeAll>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d189      	bne.n	8006880 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800696c:	4b0f      	ldr	r3, [pc, #60]	@ (80069ac <xQueueReceive+0x1c0>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	e780      	b.n	8006880 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800697e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006980:	f000 fa74 	bl	8006e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006984:	f000 fdcc 	bl	8007520 <xTaskResumeAll>
 8006988:	e77a      	b.n	8006880 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800698a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800698c:	f000 fa6e 	bl	8006e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006990:	f000 fdc6 	bl	8007520 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006996:	f000 fabb 	bl	8006f10 <prvIsQueueEmpty>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	f43f af6f 	beq.w	8006880 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3730      	adds	r7, #48	@ 0x30
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08e      	sub	sp, #56	@ 0x38
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069ba:	2300      	movs	r3, #0
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	623b      	str	r3, [r7, #32]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	61fb      	str	r3, [r7, #28]
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	e7fd      	b.n	8006a00 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a04:	f001 f974 	bl	8007cf0 <xTaskGetSchedulerState>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <xQueueSemaphoreTake+0x64>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <xQueueSemaphoreTake+0x68>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <xQueueSemaphoreTake+0x6a>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	61bb      	str	r3, [r7, #24]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a36:	f001 ffc7 	bl	80089c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d024      	beq.n	8006a90 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a48:	1e5a      	subs	r2, r3, #1
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a56:	f001 fac5 	bl	8007fe4 <pvTaskIncrementMutexHeldCount>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00f      	beq.n	8006a88 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6a:	3310      	adds	r3, #16
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 ff6f 	bl	8007950 <xTaskRemoveFromEventList>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d007      	beq.n	8006a88 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a78:	4b54      	ldr	r3, [pc, #336]	@ (8006bcc <xQueueSemaphoreTake+0x21c>)
 8006a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a88:	f001 ffd0 	bl	8008a2c <vPortExitCritical>
				return pdPASS;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e098      	b.n	8006bc2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d112      	bne.n	8006abc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00b      	beq.n	8006ab4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	617b      	str	r3, [r7, #20]
}
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
 8006ab2:	e7fd      	b.n	8006ab0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ab4:	f001 ffba 	bl	8008a2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e082      	b.n	8006bc2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ac2:	f107 030c 	add.w	r3, r7, #12
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 ffa6 	bl	8007a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006acc:	2301      	movs	r3, #1
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ad0:	f001 ffac 	bl	8008a2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ad4:	f000 fd16 	bl	8007504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ad8:	f001 ff76 	bl	80089c8 <vPortEnterCritical>
 8006adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ade:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ae8:	d103      	bne.n	8006af2 <xQueueSemaphoreTake+0x142>
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006af8:	b25b      	sxtb	r3, r3
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006afe:	d103      	bne.n	8006b08 <xQueueSemaphoreTake+0x158>
 8006b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b08:	f001 ff90 	bl	8008a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b0c:	463a      	mov	r2, r7
 8006b0e:	f107 030c 	add.w	r3, r7, #12
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ff95 	bl	8007a44 <xTaskCheckForTimeOut>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d132      	bne.n	8006b86 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b22:	f000 f9f5 	bl	8006f10 <prvIsQueueEmpty>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d026      	beq.n	8006b7a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d109      	bne.n	8006b48 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b34:	f001 ff48 	bl	80089c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 f8f5 	bl	8007d2c <xTaskPriorityInherit>
 8006b42:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b44:	f001 ff72 	bl	8008a2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4a:	3324      	adds	r3, #36	@ 0x24
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	4611      	mov	r1, r2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 feab 	bl	80078ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b58:	f000 f988 	bl	8006e6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b5c:	f000 fce0 	bl	8007520 <xTaskResumeAll>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f af67 	bne.w	8006a36 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b68:	4b18      	ldr	r3, [pc, #96]	@ (8006bcc <xQueueSemaphoreTake+0x21c>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	e75d      	b.n	8006a36 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b7c:	f000 f976 	bl	8006e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b80:	f000 fcce 	bl	8007520 <xTaskResumeAll>
 8006b84:	e757      	b.n	8006a36 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b88:	f000 f970 	bl	8006e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b8c:	f000 fcc8 	bl	8007520 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b92:	f000 f9bd 	bl	8006f10 <prvIsQueueEmpty>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f43f af4c 	beq.w	8006a36 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00d      	beq.n	8006bc0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006ba4:	f001 ff10 	bl	80089c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006baa:	f000 f8b7 	bl	8006d1c <prvGetDisinheritPriorityAfterTimeout>
 8006bae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 f990 	bl	8007edc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006bbc:	f001 ff36 	bl	8008a2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3738      	adds	r7, #56	@ 0x38
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08e      	sub	sp, #56	@ 0x38
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10b      	bne.n	8006bfe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	623b      	str	r3, [r7, #32]
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	e7fd      	b.n	8006bfa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <xQueueReceiveFromISR+0x3c>
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <xQueueReceiveFromISR+0x40>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <xQueueReceiveFromISR+0x42>
 8006c10:	2300      	movs	r3, #0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	61fb      	str	r3, [r7, #28]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c2e:	f001 ffab 	bl	8008b88 <vPortValidateInterruptPriority>
	__asm volatile
 8006c32:	f3ef 8211 	mrs	r2, BASEPRI
 8006c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	61ba      	str	r2, [r7, #24]
 8006c48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d02f      	beq.n	8006cba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c68:	f000 f8da 	bl	8006e20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c7c:	d112      	bne.n	8006ca4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	3310      	adds	r3, #16
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fe60 	bl	8007950 <xTaskRemoveFromEventList>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	e007      	b.n	8006cb4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ca8:	3301      	adds	r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	b25a      	sxtb	r2, r3
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb8:	e001      	b.n	8006cbe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f383 8811 	msr	BASEPRI, r3
}
 8006cc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3738      	adds	r7, #56	@ 0x38
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10b      	bne.n	8006cfe <vQueueDelete+0x2a>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60bb      	str	r3, [r7, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f95e 	bl	8006fc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f002 f84a 	bl	8008da8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e001      	b.n	8006d3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
	}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10d      	bne.n	8006d86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d14d      	bne.n	8006e0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 f840 	bl	8007dfc <xTaskPriorityDisinherit>
 8006d7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	e043      	b.n	8006e0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d119      	bne.n	8006dc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6858      	ldr	r0, [r3, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d94:	461a      	mov	r2, r3
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	f002 fe8b 	bl	8009ab2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da4:	441a      	add	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d32b      	bcc.n	8006e0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	e026      	b.n	8006e0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	68d8      	ldr	r0, [r3, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	f002 fe71 	bl	8009ab2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd8:	425b      	negs	r3, r3
 8006dda:	441a      	add	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d207      	bcs.n	8006dfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	425b      	negs	r3, r3
 8006df6:	441a      	add	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d105      	bne.n	8006e0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e16:	697b      	ldr	r3, [r7, #20]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d018      	beq.n	8006e64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3a:	441a      	add	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d303      	bcc.n	8006e54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68d9      	ldr	r1, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6838      	ldr	r0, [r7, #0]
 8006e60:	f002 fe27 	bl	8009ab2 <memcpy>
	}
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e74:	f001 fda8 	bl	80089c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e80:	e011      	b.n	8006ea6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d012      	beq.n	8006eb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3324      	adds	r3, #36	@ 0x24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fd5e 	bl	8007950 <xTaskRemoveFromEventList>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e9a:	f000 fe37 	bl	8007b0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	dce9      	bgt.n	8006e82 <prvUnlockQueue+0x16>
 8006eae:	e000      	b.n	8006eb2 <prvUnlockQueue+0x46>
					break;
 8006eb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	22ff      	movs	r2, #255	@ 0xff
 8006eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006eba:	f001 fdb7 	bl	8008a2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ebe:	f001 fd83 	bl	80089c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ec8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eca:	e011      	b.n	8006ef0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d012      	beq.n	8006efa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3310      	adds	r3, #16
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fd39 	bl	8007950 <xTaskRemoveFromEventList>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ee4:	f000 fe12 	bl	8007b0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dce9      	bgt.n	8006ecc <prvUnlockQueue+0x60>
 8006ef8:	e000      	b.n	8006efc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006efa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	22ff      	movs	r2, #255	@ 0xff
 8006f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f04:	f001 fd92 	bl	8008a2c <vPortExitCritical>
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f18:	f001 fd56 	bl	80089c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	e001      	b.n	8006f2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f2e:	f001 fd7d 	bl	8008a2c <vPortExitCritical>

	return xReturn;
 8006f32:	68fb      	ldr	r3, [r7, #12]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f44:	f001 fd40 	bl	80089c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d102      	bne.n	8006f5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	e001      	b.n	8006f5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f5e:	f001 fd65 	bl	8008a2c <vPortExitCritical>

	return xReturn;
 8006f62:	68fb      	ldr	r3, [r7, #12]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e014      	b.n	8006fa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8006fbc <vQueueAddToRegistry+0x50>)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10b      	bne.n	8006fa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f88:	490c      	ldr	r1, [pc, #48]	@ (8006fbc <vQueueAddToRegistry+0x50>)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f92:	4a0a      	ldr	r2, [pc, #40]	@ (8006fbc <vQueueAddToRegistry+0x50>)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	4413      	add	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f9e:	e006      	b.n	8006fae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b07      	cmp	r3, #7
 8006faa:	d9e7      	bls.n	8006f7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	200008c8 	.word	0x200008c8

08006fc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e016      	b.n	8006ffc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fce:	4a10      	ldr	r2, [pc, #64]	@ (8007010 <vQueueUnregisterQueue+0x50>)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d10b      	bne.n	8006ff6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006fde:	4a0c      	ldr	r2, [pc, #48]	@ (8007010 <vQueueUnregisterQueue+0x50>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006fe8:	4a09      	ldr	r2, [pc, #36]	@ (8007010 <vQueueUnregisterQueue+0x50>)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	605a      	str	r2, [r3, #4]
				break;
 8006ff4:	e006      	b.n	8007004 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b07      	cmp	r3, #7
 8007000:	d9e5      	bls.n	8006fce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	200008c8 	.word	0x200008c8

08007014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007024:	f001 fcd0 	bl	80089c8 <vPortEnterCritical>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800702e:	b25b      	sxtb	r3, r3
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007034:	d103      	bne.n	800703e <vQueueWaitForMessageRestricted+0x2a>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007044:	b25b      	sxtb	r3, r3
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800704a:	d103      	bne.n	8007054 <vQueueWaitForMessageRestricted+0x40>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007054:	f001 fcea 	bl	8008a2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d106      	bne.n	800706e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	3324      	adds	r3, #36	@ 0x24
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fc45 	bl	80078f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800706e:	6978      	ldr	r0, [r7, #20]
 8007070:	f7ff fefc 	bl	8006e6c <prvUnlockQueue>
	}
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08e      	sub	sp, #56	@ 0x38
 8007080:	af04      	add	r7, sp, #16
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800708a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	623b      	str	r3, [r7, #32]
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	61fb      	str	r3, [r7, #28]
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop
 80070c4:	e7fd      	b.n	80070c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070c6:	235c      	movs	r3, #92	@ 0x5c
 80070c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80070ce:	d00b      	beq.n	80070e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	61bb      	str	r3, [r7, #24]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01e      	beq.n	800712e <xTaskCreateStatic+0xb2>
 80070f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01b      	beq.n	800712e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007108:	2300      	movs	r3, #0
 800710a:	9303      	str	r3, [sp, #12]
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	9302      	str	r3, [sp, #8]
 8007110:	f107 0314 	add.w	r3, r7, #20
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f850 	bl	80071c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007126:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007128:	f000 f8de 	bl	80072e8 <prvAddNewTaskToReadyList>
 800712c:	e001      	b.n	8007132 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007132:	697b      	ldr	r3, [r7, #20]
	}
 8007134:	4618      	mov	r0, r3
 8007136:	3728      	adds	r7, #40	@ 0x28
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08c      	sub	sp, #48	@ 0x30
 8007140:	af04      	add	r7, sp, #16
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	4613      	mov	r3, r2
 800714a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800714c:	88fb      	ldrh	r3, [r7, #6]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4618      	mov	r0, r3
 8007152:	f001 fd5b 	bl	8008c0c <pvPortMalloc>
 8007156:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00e      	beq.n	800717c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800715e:	205c      	movs	r0, #92	@ 0x5c
 8007160:	f001 fd54 	bl	8008c0c <pvPortMalloc>
 8007164:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	631a      	str	r2, [r3, #48]	@ 0x30
 8007172:	e005      	b.n	8007180 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007174:	6978      	ldr	r0, [r7, #20]
 8007176:	f001 fe17 	bl	8008da8 <vPortFree>
 800717a:	e001      	b.n	8007180 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800717c:	2300      	movs	r3, #0
 800717e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d017      	beq.n	80071b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	2300      	movs	r3, #0
 8007192:	9303      	str	r3, [sp, #12]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	9302      	str	r3, [sp, #8]
 8007198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719a:	9301      	str	r3, [sp, #4]
 800719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f80e 	bl	80071c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071aa:	69f8      	ldr	r0, [r7, #28]
 80071ac:	f000 f89c 	bl	80072e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071b0:	2301      	movs	r3, #1
 80071b2:	61bb      	str	r3, [r7, #24]
 80071b4:	e002      	b.n	80071bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071bc:	69bb      	ldr	r3, [r7, #24]
	}
 80071be:	4618      	mov	r0, r3
 80071c0:	3720      	adds	r7, #32
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b088      	sub	sp, #32
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
 80071d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	461a      	mov	r2, r3
 80071de:	21a5      	movs	r1, #165	@ 0xa5
 80071e0:	f002 fbdc 	bl	800999c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071ee:	3b01      	subs	r3, #1
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	f023 0307 	bic.w	r3, r3, #7
 80071fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	617b      	str	r3, [r7, #20]
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	e7fd      	b.n	800721c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01f      	beq.n	8007266 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e012      	b.n	8007252 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	7819      	ldrb	r1, [r3, #0]
 8007234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	3334      	adds	r3, #52	@ 0x34
 800723c:	460a      	mov	r2, r1
 800723e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d006      	beq.n	800725a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	3301      	adds	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b0f      	cmp	r3, #15
 8007256:	d9e9      	bls.n	800722c <prvInitialiseNewTask+0x66>
 8007258:	e000      	b.n	800725c <prvInitialiseNewTask+0x96>
			{
				break;
 800725a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800725c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007264:	e003      	b.n	800726e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	2b37      	cmp	r3, #55	@ 0x37
 8007272:	d901      	bls.n	8007278 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007274:	2337      	movs	r3, #55	@ 0x37
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800727c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007282:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	2200      	movs	r2, #0
 8007288:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800728a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fd7c 	bl	8005d8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007296:	3318      	adds	r3, #24
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fd77 	bl	8005d8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	2200      	movs	r2, #0
 80072b8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	69b8      	ldr	r0, [r7, #24]
 80072c8:	f001 fa4e 	bl	8008768 <pxPortInitialiseStack>
 80072cc:	4602      	mov	r2, r0
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072de:	bf00      	nop
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072f0:	f001 fb6a 	bl	80089c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072f4:	4b2d      	ldr	r3, [pc, #180]	@ (80073ac <prvAddNewTaskToReadyList+0xc4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a2c      	ldr	r2, [pc, #176]	@ (80073ac <prvAddNewTaskToReadyList+0xc4>)
 80072fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072fe:	4b2c      	ldr	r3, [pc, #176]	@ (80073b0 <prvAddNewTaskToReadyList+0xc8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007306:	4a2a      	ldr	r2, [pc, #168]	@ (80073b0 <prvAddNewTaskToReadyList+0xc8>)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800730c:	4b27      	ldr	r3, [pc, #156]	@ (80073ac <prvAddNewTaskToReadyList+0xc4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d110      	bne.n	8007336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007314:	f000 fc1e 	bl	8007b54 <prvInitialiseTaskLists>
 8007318:	e00d      	b.n	8007336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800731a:	4b26      	ldr	r3, [pc, #152]	@ (80073b4 <prvAddNewTaskToReadyList+0xcc>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d109      	bne.n	8007336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007322:	4b23      	ldr	r3, [pc, #140]	@ (80073b0 <prvAddNewTaskToReadyList+0xc8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732c:	429a      	cmp	r2, r3
 800732e:	d802      	bhi.n	8007336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007330:	4a1f      	ldr	r2, [pc, #124]	@ (80073b0 <prvAddNewTaskToReadyList+0xc8>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007336:	4b20      	ldr	r3, [pc, #128]	@ (80073b8 <prvAddNewTaskToReadyList+0xd0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	4a1e      	ldr	r2, [pc, #120]	@ (80073b8 <prvAddNewTaskToReadyList+0xd0>)
 800733e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007340:	4b1d      	ldr	r3, [pc, #116]	@ (80073b8 <prvAddNewTaskToReadyList+0xd0>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734c:	4b1b      	ldr	r3, [pc, #108]	@ (80073bc <prvAddNewTaskToReadyList+0xd4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d903      	bls.n	800735c <prvAddNewTaskToReadyList+0x74>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	4a18      	ldr	r2, [pc, #96]	@ (80073bc <prvAddNewTaskToReadyList+0xd4>)
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4a15      	ldr	r2, [pc, #84]	@ (80073c0 <prvAddNewTaskToReadyList+0xd8>)
 800736a:	441a      	add	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f7fe fd17 	bl	8005da6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007378:	f001 fb58 	bl	8008a2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800737c:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <prvAddNewTaskToReadyList+0xcc>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00e      	beq.n	80073a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007384:	4b0a      	ldr	r3, [pc, #40]	@ (80073b0 <prvAddNewTaskToReadyList+0xc8>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	429a      	cmp	r2, r3
 8007390:	d207      	bcs.n	80073a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007392:	4b0c      	ldr	r3, [pc, #48]	@ (80073c4 <prvAddNewTaskToReadyList+0xdc>)
 8007394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000ddc 	.word	0x20000ddc
 80073b0:	20000908 	.word	0x20000908
 80073b4:	20000de8 	.word	0x20000de8
 80073b8:	20000df8 	.word	0x20000df8
 80073bc:	20000de4 	.word	0x20000de4
 80073c0:	2000090c 	.word	0x2000090c
 80073c4:	e000ed04 	.word	0xe000ed04

080073c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d018      	beq.n	800740c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073da:	4b14      	ldr	r3, [pc, #80]	@ (800742c <vTaskDelay+0x64>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <vTaskDelay+0x32>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073fa:	f000 f883 	bl	8007504 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073fe:	2100      	movs	r1, #0
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fe03 	bl	800800c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007406:	f000 f88b 	bl	8007520 <xTaskResumeAll>
 800740a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d107      	bne.n	8007422 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007412:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <vTaskDelay+0x68>)
 8007414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000e04 	.word	0x20000e04
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	@ 0x28
 8007438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007442:	463a      	mov	r2, r7
 8007444:	1d39      	adds	r1, r7, #4
 8007446:	f107 0308 	add.w	r3, r7, #8
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fc4a 	bl	8005ce4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	9202      	str	r2, [sp, #8]
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	2300      	movs	r3, #0
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	2300      	movs	r3, #0
 8007460:	460a      	mov	r2, r1
 8007462:	4922      	ldr	r1, [pc, #136]	@ (80074ec <vTaskStartScheduler+0xb8>)
 8007464:	4822      	ldr	r0, [pc, #136]	@ (80074f0 <vTaskStartScheduler+0xbc>)
 8007466:	f7ff fe09 	bl	800707c <xTaskCreateStatic>
 800746a:	4603      	mov	r3, r0
 800746c:	4a21      	ldr	r2, [pc, #132]	@ (80074f4 <vTaskStartScheduler+0xc0>)
 800746e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007470:	4b20      	ldr	r3, [pc, #128]	@ (80074f4 <vTaskStartScheduler+0xc0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007478:	2301      	movs	r3, #1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	e001      	b.n	8007482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d102      	bne.n	800748e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007488:	f000 fe14 	bl	80080b4 <xTimerCreateTimerTask>
 800748c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d116      	bne.n	80074c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	613b      	str	r3, [r7, #16]
}
 80074a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074a8:	4b13      	ldr	r3, [pc, #76]	@ (80074f8 <vTaskStartScheduler+0xc4>)
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074b0:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <vTaskStartScheduler+0xc8>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074b6:	4b12      	ldr	r3, [pc, #72]	@ (8007500 <vTaskStartScheduler+0xcc>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074bc:	f001 f9e0 	bl	8008880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074c0:	e00f      	b.n	80074e2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074c8:	d10b      	bne.n	80074e2 <vTaskStartScheduler+0xae>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	60fb      	str	r3, [r7, #12]
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <vTaskStartScheduler+0xaa>
}
 80074e2:	bf00      	nop
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	0800a404 	.word	0x0800a404
 80074f0:	08007b25 	.word	0x08007b25
 80074f4:	20000e00 	.word	0x20000e00
 80074f8:	20000dfc 	.word	0x20000dfc
 80074fc:	20000de8 	.word	0x20000de8
 8007500:	20000de0 	.word	0x20000de0

08007504 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007508:	4b04      	ldr	r3, [pc, #16]	@ (800751c <vTaskSuspendAll+0x18>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	4a03      	ldr	r2, [pc, #12]	@ (800751c <vTaskSuspendAll+0x18>)
 8007510:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007512:	bf00      	nop
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	20000e04 	.word	0x20000e04

08007520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800752a:	2300      	movs	r3, #0
 800752c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800752e:	4b42      	ldr	r3, [pc, #264]	@ (8007638 <xTaskResumeAll+0x118>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <xTaskResumeAll+0x2e>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	603b      	str	r3, [r7, #0]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800754e:	f001 fa3b 	bl	80089c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007552:	4b39      	ldr	r3, [pc, #228]	@ (8007638 <xTaskResumeAll+0x118>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3b01      	subs	r3, #1
 8007558:	4a37      	ldr	r2, [pc, #220]	@ (8007638 <xTaskResumeAll+0x118>)
 800755a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800755c:	4b36      	ldr	r3, [pc, #216]	@ (8007638 <xTaskResumeAll+0x118>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d162      	bne.n	800762a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007564:	4b35      	ldr	r3, [pc, #212]	@ (800763c <xTaskResumeAll+0x11c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d05e      	beq.n	800762a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800756c:	e02f      	b.n	80075ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756e:	4b34      	ldr	r3, [pc, #208]	@ (8007640 <xTaskResumeAll+0x120>)
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3318      	adds	r3, #24
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fc70 	bl	8005e60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3304      	adds	r3, #4
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe fc6b 	bl	8005e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800758e:	4b2d      	ldr	r3, [pc, #180]	@ (8007644 <xTaskResumeAll+0x124>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d903      	bls.n	800759e <xTaskResumeAll+0x7e>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	4a2a      	ldr	r2, [pc, #168]	@ (8007644 <xTaskResumeAll+0x124>)
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4a27      	ldr	r2, [pc, #156]	@ (8007648 <xTaskResumeAll+0x128>)
 80075ac:	441a      	add	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fe fbf6 	bl	8005da6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075be:	4b23      	ldr	r3, [pc, #140]	@ (800764c <xTaskResumeAll+0x12c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d302      	bcc.n	80075ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80075c8:	4b21      	ldr	r3, [pc, #132]	@ (8007650 <xTaskResumeAll+0x130>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007640 <xTaskResumeAll+0x120>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1cb      	bne.n	800756e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075dc:	f000 fb58 	bl	8007c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007654 <xTaskResumeAll+0x134>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d010      	beq.n	800760e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075ec:	f000 f846 	bl	800767c <xTaskIncrementTick>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80075f6:	4b16      	ldr	r3, [pc, #88]	@ (8007650 <xTaskResumeAll+0x130>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3b01      	subs	r3, #1
 8007600:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f1      	bne.n	80075ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007608:	4b12      	ldr	r3, [pc, #72]	@ (8007654 <xTaskResumeAll+0x134>)
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800760e:	4b10      	ldr	r3, [pc, #64]	@ (8007650 <xTaskResumeAll+0x130>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d009      	beq.n	800762a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007616:	2301      	movs	r3, #1
 8007618:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800761a:	4b0f      	ldr	r3, [pc, #60]	@ (8007658 <xTaskResumeAll+0x138>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800762a:	f001 f9ff 	bl	8008a2c <vPortExitCritical>

	return xAlreadyYielded;
 800762e:	68bb      	ldr	r3, [r7, #8]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20000e04 	.word	0x20000e04
 800763c:	20000ddc 	.word	0x20000ddc
 8007640:	20000d9c 	.word	0x20000d9c
 8007644:	20000de4 	.word	0x20000de4
 8007648:	2000090c 	.word	0x2000090c
 800764c:	20000908 	.word	0x20000908
 8007650:	20000df0 	.word	0x20000df0
 8007654:	20000dec 	.word	0x20000dec
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007662:	4b05      	ldr	r3, [pc, #20]	@ (8007678 <xTaskGetTickCount+0x1c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007668:	687b      	ldr	r3, [r7, #4]
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20000de0 	.word	0x20000de0

0800767c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007686:	4b4f      	ldr	r3, [pc, #316]	@ (80077c4 <xTaskIncrementTick+0x148>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f040 8090 	bne.w	80077b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007690:	4b4d      	ldr	r3, [pc, #308]	@ (80077c8 <xTaskIncrementTick+0x14c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3301      	adds	r3, #1
 8007696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007698:	4a4b      	ldr	r2, [pc, #300]	@ (80077c8 <xTaskIncrementTick+0x14c>)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d121      	bne.n	80076e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076a4:	4b49      	ldr	r3, [pc, #292]	@ (80077cc <xTaskIncrementTick+0x150>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	603b      	str	r3, [r7, #0]
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <xTaskIncrementTick+0x46>
 80076c6:	4b41      	ldr	r3, [pc, #260]	@ (80077cc <xTaskIncrementTick+0x150>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	4b40      	ldr	r3, [pc, #256]	@ (80077d0 <xTaskIncrementTick+0x154>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a3e      	ldr	r2, [pc, #248]	@ (80077cc <xTaskIncrementTick+0x150>)
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	4a3e      	ldr	r2, [pc, #248]	@ (80077d0 <xTaskIncrementTick+0x154>)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	4b3e      	ldr	r3, [pc, #248]	@ (80077d4 <xTaskIncrementTick+0x158>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	4a3c      	ldr	r2, [pc, #240]	@ (80077d4 <xTaskIncrementTick+0x158>)
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	f000 fad4 	bl	8007c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076e8:	4b3b      	ldr	r3, [pc, #236]	@ (80077d8 <xTaskIncrementTick+0x15c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d349      	bcc.n	8007786 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076f2:	4b36      	ldr	r3, [pc, #216]	@ (80077cc <xTaskIncrementTick+0x150>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d104      	bne.n	8007706 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076fc:	4b36      	ldr	r3, [pc, #216]	@ (80077d8 <xTaskIncrementTick+0x15c>)
 80076fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007702:	601a      	str	r2, [r3, #0]
					break;
 8007704:	e03f      	b.n	8007786 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007706:	4b31      	ldr	r3, [pc, #196]	@ (80077cc <xTaskIncrementTick+0x150>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d203      	bcs.n	8007726 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800771e:	4a2e      	ldr	r2, [pc, #184]	@ (80077d8 <xTaskIncrementTick+0x15c>)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007724:	e02f      	b.n	8007786 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	3304      	adds	r3, #4
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fb98 	bl	8005e60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007734:	2b00      	cmp	r3, #0
 8007736:	d004      	beq.n	8007742 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	3318      	adds	r3, #24
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fb8f 	bl	8005e60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007746:	4b25      	ldr	r3, [pc, #148]	@ (80077dc <xTaskIncrementTick+0x160>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d903      	bls.n	8007756 <xTaskIncrementTick+0xda>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007752:	4a22      	ldr	r2, [pc, #136]	@ (80077dc <xTaskIncrementTick+0x160>)
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4a1f      	ldr	r2, [pc, #124]	@ (80077e0 <xTaskIncrementTick+0x164>)
 8007764:	441a      	add	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3304      	adds	r3, #4
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f7fe fb1a 	bl	8005da6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007776:	4b1b      	ldr	r3, [pc, #108]	@ (80077e4 <xTaskIncrementTick+0x168>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777c:	429a      	cmp	r2, r3
 800777e:	d3b8      	bcc.n	80076f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007780:	2301      	movs	r3, #1
 8007782:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007784:	e7b5      	b.n	80076f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007786:	4b17      	ldr	r3, [pc, #92]	@ (80077e4 <xTaskIncrementTick+0x168>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778c:	4914      	ldr	r1, [pc, #80]	@ (80077e0 <xTaskIncrementTick+0x164>)
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d901      	bls.n	80077a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800779e:	2301      	movs	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077a2:	4b11      	ldr	r3, [pc, #68]	@ (80077e8 <xTaskIncrementTick+0x16c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d007      	beq.n	80077ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80077aa:	2301      	movs	r3, #1
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	e004      	b.n	80077ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077b0:	4b0e      	ldr	r3, [pc, #56]	@ (80077ec <xTaskIncrementTick+0x170>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	4a0d      	ldr	r2, [pc, #52]	@ (80077ec <xTaskIncrementTick+0x170>)
 80077b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077ba:	697b      	ldr	r3, [r7, #20]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000e04 	.word	0x20000e04
 80077c8:	20000de0 	.word	0x20000de0
 80077cc:	20000d94 	.word	0x20000d94
 80077d0:	20000d98 	.word	0x20000d98
 80077d4:	20000df4 	.word	0x20000df4
 80077d8:	20000dfc 	.word	0x20000dfc
 80077dc:	20000de4 	.word	0x20000de4
 80077e0:	2000090c 	.word	0x2000090c
 80077e4:	20000908 	.word	0x20000908
 80077e8:	20000df0 	.word	0x20000df0
 80077ec:	20000dec 	.word	0x20000dec

080077f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077f6:	4b28      	ldr	r3, [pc, #160]	@ (8007898 <vTaskSwitchContext+0xa8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077fe:	4b27      	ldr	r3, [pc, #156]	@ (800789c <vTaskSwitchContext+0xac>)
 8007800:	2201      	movs	r2, #1
 8007802:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007804:	e042      	b.n	800788c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007806:	4b25      	ldr	r3, [pc, #148]	@ (800789c <vTaskSwitchContext+0xac>)
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800780c:	4b24      	ldr	r3, [pc, #144]	@ (80078a0 <vTaskSwitchContext+0xb0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e011      	b.n	8007838 <vTaskSwitchContext+0x48>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <vTaskSwitchContext+0x42>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <vTaskSwitchContext+0x3e>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3b01      	subs	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	491a      	ldr	r1, [pc, #104]	@ (80078a4 <vTaskSwitchContext+0xb4>)
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0e3      	beq.n	8007814 <vTaskSwitchContext+0x24>
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4a13      	ldr	r2, [pc, #76]	@ (80078a4 <vTaskSwitchContext+0xb4>)
 8007858:	4413      	add	r3, r2
 800785a:	60bb      	str	r3, [r7, #8]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	605a      	str	r2, [r3, #4]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	3308      	adds	r3, #8
 800786e:	429a      	cmp	r2, r3
 8007870:	d104      	bne.n	800787c <vTaskSwitchContext+0x8c>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	605a      	str	r2, [r3, #4]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	4a09      	ldr	r2, [pc, #36]	@ (80078a8 <vTaskSwitchContext+0xb8>)
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	4a06      	ldr	r2, [pc, #24]	@ (80078a0 <vTaskSwitchContext+0xb0>)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6013      	str	r3, [r2, #0]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	20000e04 	.word	0x20000e04
 800789c:	20000df0 	.word	0x20000df0
 80078a0:	20000de4 	.word	0x20000de4
 80078a4:	2000090c 	.word	0x2000090c
 80078a8:	20000908 	.word	0x20000908

080078ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10b      	bne.n	80078d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	60fb      	str	r3, [r7, #12]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078d4:	4b07      	ldr	r3, [pc, #28]	@ (80078f4 <vTaskPlaceOnEventList+0x48>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3318      	adds	r3, #24
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fe fa86 	bl	8005dee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078e2:	2101      	movs	r1, #1
 80078e4:	6838      	ldr	r0, [r7, #0]
 80078e6:	f000 fb91 	bl	800800c <prvAddCurrentTaskToDelayedList>
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000908 	.word	0x20000908

080078f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	617b      	str	r3, [r7, #20]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007922:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <vTaskPlaceOnEventListRestricted+0x54>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3318      	adds	r3, #24
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7fe fa3b 	bl	8005da6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800793a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	68b8      	ldr	r0, [r7, #8]
 8007940:	f000 fb64 	bl	800800c <prvAddCurrentTaskToDelayedList>
	}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000908 	.word	0x20000908

08007950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10b      	bne.n	800797e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60fb      	str	r3, [r7, #12]
}
 8007978:	bf00      	nop
 800797a:	bf00      	nop
 800797c:	e7fd      	b.n	800797a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3318      	adds	r3, #24
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fa6c 	bl	8005e60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007988:	4b1d      	ldr	r3, [pc, #116]	@ (8007a00 <xTaskRemoveFromEventList+0xb0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d11d      	bne.n	80079cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	3304      	adds	r3, #4
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe fa63 	bl	8005e60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799e:	4b19      	ldr	r3, [pc, #100]	@ (8007a04 <xTaskRemoveFromEventList+0xb4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d903      	bls.n	80079ae <xTaskRemoveFromEventList+0x5e>
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079aa:	4a16      	ldr	r2, [pc, #88]	@ (8007a04 <xTaskRemoveFromEventList+0xb4>)
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4a13      	ldr	r2, [pc, #76]	@ (8007a08 <xTaskRemoveFromEventList+0xb8>)
 80079bc:	441a      	add	r2, r3
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f7fe f9ee 	bl	8005da6 <vListInsertEnd>
 80079ca:	e005      	b.n	80079d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	3318      	adds	r3, #24
 80079d0:	4619      	mov	r1, r3
 80079d2:	480e      	ldr	r0, [pc, #56]	@ (8007a0c <xTaskRemoveFromEventList+0xbc>)
 80079d4:	f7fe f9e7 	bl	8005da6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007a10 <xTaskRemoveFromEventList+0xc0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d905      	bls.n	80079f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079e6:	2301      	movs	r3, #1
 80079e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007a14 <xTaskRemoveFromEventList+0xc4>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e001      	b.n	80079f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80079f6:	697b      	ldr	r3, [r7, #20]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000e04 	.word	0x20000e04
 8007a04:	20000de4 	.word	0x20000de4
 8007a08:	2000090c 	.word	0x2000090c
 8007a0c:	20000d9c 	.word	0x20000d9c
 8007a10:	20000908 	.word	0x20000908
 8007a14:	20000df0 	.word	0x20000df0

08007a18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a20:	4b06      	ldr	r3, [pc, #24]	@ (8007a3c <vTaskInternalSetTimeOutState+0x24>)
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <vTaskInternalSetTimeOutState+0x28>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	605a      	str	r2, [r3, #4]
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	20000df4 	.word	0x20000df4
 8007a40:	20000de0 	.word	0x20000de0

08007a44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10b      	bne.n	8007a6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	613b      	str	r3, [r7, #16]
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	e7fd      	b.n	8007a68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10b      	bne.n	8007a8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60fb      	str	r3, [r7, #12]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a8a:	f000 ff9d 	bl	80089c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8007b04 <xTaskCheckForTimeOut+0xc0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aa6:	d102      	bne.n	8007aae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61fb      	str	r3, [r7, #28]
 8007aac:	e023      	b.n	8007af6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b15      	ldr	r3, [pc, #84]	@ (8007b08 <xTaskCheckForTimeOut+0xc4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d007      	beq.n	8007aca <xTaskCheckForTimeOut+0x86>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d302      	bcc.n	8007aca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	61fb      	str	r3, [r7, #28]
 8007ac8:	e015      	b.n	8007af6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d20b      	bcs.n	8007aec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff ff99 	bl	8007a18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	e004      	b.n	8007af6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007af2:	2301      	movs	r3, #1
 8007af4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007af6:	f000 ff99 	bl	8008a2c <vPortExitCritical>

	return xReturn;
 8007afa:	69fb      	ldr	r3, [r7, #28]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000de0 	.word	0x20000de0
 8007b08:	20000df4 	.word	0x20000df4

08007b0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b10:	4b03      	ldr	r3, [pc, #12]	@ (8007b20 <vTaskMissedYield+0x14>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
}
 8007b16:	bf00      	nop
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	20000df0 	.word	0x20000df0

08007b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b2c:	f000 f852 	bl	8007bd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b30:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <prvIdleTask+0x28>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d9f9      	bls.n	8007b2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b38:	4b05      	ldr	r3, [pc, #20]	@ (8007b50 <prvIdleTask+0x2c>)
 8007b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b48:	e7f0      	b.n	8007b2c <prvIdleTask+0x8>
 8007b4a:	bf00      	nop
 8007b4c:	2000090c 	.word	0x2000090c
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	607b      	str	r3, [r7, #4]
 8007b5e:	e00c      	b.n	8007b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4a12      	ldr	r2, [pc, #72]	@ (8007bb4 <prvInitialiseTaskLists+0x60>)
 8007b6c:	4413      	add	r3, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe f8ec 	bl	8005d4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3301      	adds	r3, #1
 8007b78:	607b      	str	r3, [r7, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b37      	cmp	r3, #55	@ 0x37
 8007b7e:	d9ef      	bls.n	8007b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b80:	480d      	ldr	r0, [pc, #52]	@ (8007bb8 <prvInitialiseTaskLists+0x64>)
 8007b82:	f7fe f8e3 	bl	8005d4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b86:	480d      	ldr	r0, [pc, #52]	@ (8007bbc <prvInitialiseTaskLists+0x68>)
 8007b88:	f7fe f8e0 	bl	8005d4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b8c:	480c      	ldr	r0, [pc, #48]	@ (8007bc0 <prvInitialiseTaskLists+0x6c>)
 8007b8e:	f7fe f8dd 	bl	8005d4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b92:	480c      	ldr	r0, [pc, #48]	@ (8007bc4 <prvInitialiseTaskLists+0x70>)
 8007b94:	f7fe f8da 	bl	8005d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b98:	480b      	ldr	r0, [pc, #44]	@ (8007bc8 <prvInitialiseTaskLists+0x74>)
 8007b9a:	f7fe f8d7 	bl	8005d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <prvInitialiseTaskLists+0x78>)
 8007ba0:	4a05      	ldr	r2, [pc, #20]	@ (8007bb8 <prvInitialiseTaskLists+0x64>)
 8007ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd0 <prvInitialiseTaskLists+0x7c>)
 8007ba6:	4a05      	ldr	r2, [pc, #20]	@ (8007bbc <prvInitialiseTaskLists+0x68>)
 8007ba8:	601a      	str	r2, [r3, #0]
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	2000090c 	.word	0x2000090c
 8007bb8:	20000d6c 	.word	0x20000d6c
 8007bbc:	20000d80 	.word	0x20000d80
 8007bc0:	20000d9c 	.word	0x20000d9c
 8007bc4:	20000db0 	.word	0x20000db0
 8007bc8:	20000dc8 	.word	0x20000dc8
 8007bcc:	20000d94 	.word	0x20000d94
 8007bd0:	20000d98 	.word	0x20000d98

08007bd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bda:	e019      	b.n	8007c10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bdc:	f000 fef4 	bl	80089c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be0:	4b10      	ldr	r3, [pc, #64]	@ (8007c24 <prvCheckTasksWaitingTermination+0x50>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3304      	adds	r3, #4
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe f937 	bl	8005e60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c28 <prvCheckTasksWaitingTermination+0x54>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8007c28 <prvCheckTasksWaitingTermination+0x54>)
 8007bfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c2c <prvCheckTasksWaitingTermination+0x58>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	4a0a      	ldr	r2, [pc, #40]	@ (8007c2c <prvCheckTasksWaitingTermination+0x58>)
 8007c04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c06:	f000 ff11 	bl	8008a2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f810 	bl	8007c30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c10:	4b06      	ldr	r3, [pc, #24]	@ (8007c2c <prvCheckTasksWaitingTermination+0x58>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e1      	bne.n	8007bdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000db0 	.word	0x20000db0
 8007c28:	20000ddc 	.word	0x20000ddc
 8007c2c:	20000dc4 	.word	0x20000dc4

08007c30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d108      	bne.n	8007c54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 f8ae 	bl	8008da8 <vPortFree>
				vPortFree( pxTCB );
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f8ab 	bl	8008da8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c52:	e019      	b.n	8007c88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d103      	bne.n	8007c66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 f8a2 	bl	8008da8 <vPortFree>
	}
 8007c64:	e010      	b.n	8007c88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d00b      	beq.n	8007c88 <prvDeleteTCB+0x58>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	60fb      	str	r3, [r7, #12]
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	e7fd      	b.n	8007c84 <prvDeleteTCB+0x54>
	}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c96:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc8 <prvResetNextTaskUnblockTime+0x38>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <prvResetNextTaskUnblockTime+0x3c>)
 8007ca2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ca6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ca8:	e008      	b.n	8007cbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007caa:	4b07      	ldr	r3, [pc, #28]	@ (8007cc8 <prvResetNextTaskUnblockTime+0x38>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a04      	ldr	r2, [pc, #16]	@ (8007ccc <prvResetNextTaskUnblockTime+0x3c>)
 8007cba:	6013      	str	r3, [r2, #0]
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	20000d94 	.word	0x20000d94
 8007ccc:	20000dfc 	.word	0x20000dfc

08007cd0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007cd6:	4b05      	ldr	r3, [pc, #20]	@ (8007cec <xTaskGetCurrentTaskHandle+0x1c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007cdc:	687b      	ldr	r3, [r7, #4]
	}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	20000908 	.word	0x20000908

08007cf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d24 <xTaskGetSchedulerState+0x34>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	607b      	str	r3, [r7, #4]
 8007d02:	e008      	b.n	8007d16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d04:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <xTaskGetSchedulerState+0x38>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	607b      	str	r3, [r7, #4]
 8007d10:	e001      	b.n	8007d16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d12:	2300      	movs	r3, #0
 8007d14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d16:	687b      	ldr	r3, [r7, #4]
	}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	20000de8 	.word	0x20000de8
 8007d28:	20000e04 	.word	0x20000e04

08007d2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d051      	beq.n	8007de6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d46:	4b2a      	ldr	r3, [pc, #168]	@ (8007df0 <xTaskPriorityInherit+0xc4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d241      	bcs.n	8007dd4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	db06      	blt.n	8007d66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d58:	4b25      	ldr	r3, [pc, #148]	@ (8007df0 <xTaskPriorityInherit+0xc4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6959      	ldr	r1, [r3, #20]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4a1f      	ldr	r2, [pc, #124]	@ (8007df4 <xTaskPriorityInherit+0xc8>)
 8007d78:	4413      	add	r3, r2
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	d122      	bne.n	8007dc4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe f86c 	bl	8005e60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d88:	4b19      	ldr	r3, [pc, #100]	@ (8007df0 <xTaskPriorityInherit+0xc4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d96:	4b18      	ldr	r3, [pc, #96]	@ (8007df8 <xTaskPriorityInherit+0xcc>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d903      	bls.n	8007da6 <xTaskPriorityInherit+0x7a>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da2:	4a15      	ldr	r2, [pc, #84]	@ (8007df8 <xTaskPriorityInherit+0xcc>)
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4a10      	ldr	r2, [pc, #64]	@ (8007df4 <xTaskPriorityInherit+0xc8>)
 8007db4:	441a      	add	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	3304      	adds	r3, #4
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	f7fd fff2 	bl	8005da6 <vListInsertEnd>
 8007dc2:	e004      	b.n	8007dce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8007df0 <xTaskPriorityInherit+0xc4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e008      	b.n	8007de6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dd8:	4b05      	ldr	r3, [pc, #20]	@ (8007df0 <xTaskPriorityInherit+0xc4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d201      	bcs.n	8007de6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007de2:	2301      	movs	r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007de6:	68fb      	ldr	r3, [r7, #12]
	}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20000908 	.word	0x20000908
 8007df4:	2000090c 	.word	0x2000090c
 8007df8:	20000de4 	.word	0x20000de4

08007dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d058      	beq.n	8007ec4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e12:	4b2f      	ldr	r3, [pc, #188]	@ (8007ed0 <xTaskPriorityDisinherit+0xd4>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d00b      	beq.n	8007e34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60fb      	str	r3, [r7, #12]
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	e7fd      	b.n	8007e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10b      	bne.n	8007e54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	60bb      	str	r3, [r7, #8]
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	e7fd      	b.n	8007e50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e58:	1e5a      	subs	r2, r3, #1
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d02c      	beq.n	8007ec4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d128      	bne.n	8007ec4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fd fff2 	bl	8005e60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e94:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed4 <xTaskPriorityDisinherit+0xd8>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d903      	bls.n	8007ea4 <xTaskPriorityDisinherit+0xa8>
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ed4 <xTaskPriorityDisinherit+0xd8>)
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4a09      	ldr	r2, [pc, #36]	@ (8007ed8 <xTaskPriorityDisinherit+0xdc>)
 8007eb2:	441a      	add	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fd ff73 	bl	8005da6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ec4:	697b      	ldr	r3, [r7, #20]
	}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000908 	.word	0x20000908
 8007ed4:	20000de4 	.word	0x20000de4
 8007ed8:	2000090c 	.word	0x2000090c

08007edc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d06c      	beq.n	8007fce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	e7fd      	b.n	8007f10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d902      	bls.n	8007f24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	61fb      	str	r3, [r7, #28]
 8007f22:	e002      	b.n	8007f2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d04c      	beq.n	8007fce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d147      	bne.n	8007fce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f3e:	4b26      	ldr	r3, [pc, #152]	@ (8007fd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d10b      	bne.n	8007f60 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	60bb      	str	r3, [r7, #8]
}
 8007f5a:	bf00      	nop
 8007f5c:	bf00      	nop
 8007f5e:	e7fd      	b.n	8007f5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db04      	blt.n	8007f7e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	6959      	ldr	r1, [r3, #20]
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4a13      	ldr	r2, [pc, #76]	@ (8007fdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007f8e:	4413      	add	r3, r2
 8007f90:	4299      	cmp	r1, r3
 8007f92:	d11c      	bne.n	8007fce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fd ff61 	bl	8005e60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d903      	bls.n	8007fb2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fae:	4a0c      	ldr	r2, [pc, #48]	@ (8007fe0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4a07      	ldr	r2, [pc, #28]	@ (8007fdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007fc0:	441a      	add	r2, r3
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f7fd feec 	bl	8005da6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fce:	bf00      	nop
 8007fd0:	3720      	adds	r7, #32
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000908 	.word	0x20000908
 8007fdc:	2000090c 	.word	0x2000090c
 8007fe0:	20000de4 	.word	0x20000de4

08007fe4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fe8:	4b07      	ldr	r3, [pc, #28]	@ (8008008 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ff6:	3201      	adds	r2, #1
 8007ff8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007ffa:	4b03      	ldr	r3, [pc, #12]	@ (8008008 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
	}
 8007ffe:	4618      	mov	r0, r3
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20000908 	.word	0x20000908

0800800c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008016:	4b21      	ldr	r3, [pc, #132]	@ (800809c <prvAddCurrentTaskToDelayedList+0x90>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800801c:	4b20      	ldr	r3, [pc, #128]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3304      	adds	r3, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f7fd ff1c 	bl	8005e60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800802e:	d10a      	bne.n	8008046 <prvAddCurrentTaskToDelayedList+0x3a>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008036:	4b1a      	ldr	r3, [pc, #104]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4819      	ldr	r0, [pc, #100]	@ (80080a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008040:	f7fd feb1 	bl	8005da6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008044:	e026      	b.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800804e:	4b14      	ldr	r3, [pc, #80]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d209      	bcs.n	8008072 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805e:	4b12      	ldr	r3, [pc, #72]	@ (80080a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b0f      	ldr	r3, [pc, #60]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f7fd febf 	bl	8005dee <vListInsert>
}
 8008070:	e010      	b.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008072:	4b0e      	ldr	r3, [pc, #56]	@ (80080ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b0a      	ldr	r3, [pc, #40]	@ (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f7fd feb5 	bl	8005dee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008084:	4b0a      	ldr	r3, [pc, #40]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	429a      	cmp	r2, r3
 800808c:	d202      	bcs.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800808e:	4a08      	ldr	r2, [pc, #32]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	6013      	str	r3, [r2, #0]
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000de0 	.word	0x20000de0
 80080a0:	20000908 	.word	0x20000908
 80080a4:	20000dc8 	.word	0x20000dc8
 80080a8:	20000d98 	.word	0x20000d98
 80080ac:	20000d94 	.word	0x20000d94
 80080b0:	20000dfc 	.word	0x20000dfc

080080b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08a      	sub	sp, #40	@ 0x28
 80080b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080be:	f000 fb13 	bl	80086e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008138 <xTimerCreateTimerTask+0x84>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d021      	beq.n	800810e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080d2:	1d3a      	adds	r2, r7, #4
 80080d4:	f107 0108 	add.w	r1, r7, #8
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fd fe1b 	bl	8005d18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	9202      	str	r2, [sp, #8]
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	2302      	movs	r3, #2
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	460a      	mov	r2, r1
 80080f4:	4911      	ldr	r1, [pc, #68]	@ (800813c <xTimerCreateTimerTask+0x88>)
 80080f6:	4812      	ldr	r0, [pc, #72]	@ (8008140 <xTimerCreateTimerTask+0x8c>)
 80080f8:	f7fe ffc0 	bl	800707c <xTaskCreateStatic>
 80080fc:	4603      	mov	r3, r0
 80080fe:	4a11      	ldr	r2, [pc, #68]	@ (8008144 <xTimerCreateTimerTask+0x90>)
 8008100:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008102:	4b10      	ldr	r3, [pc, #64]	@ (8008144 <xTimerCreateTimerTask+0x90>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800810a:	2301      	movs	r3, #1
 800810c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	613b      	str	r3, [r7, #16]
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	e7fd      	b.n	8008128 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800812c:	697b      	ldr	r3, [r7, #20]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000e38 	.word	0x20000e38
 800813c:	0800a40c 	.word	0x0800a40c
 8008140:	08008281 	.word	0x08008281
 8008144:	20000e3c 	.word	0x20000e3c

08008148 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08a      	sub	sp, #40	@ 0x28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008156:	2300      	movs	r3, #0
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <xTimerGenericCommand+0x30>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	623b      	str	r3, [r7, #32]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008178:	4b19      	ldr	r3, [pc, #100]	@ (80081e0 <xTimerGenericCommand+0x98>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d02a      	beq.n	80081d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b05      	cmp	r3, #5
 8008190:	dc18      	bgt.n	80081c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008192:	f7ff fdad 	bl	8007cf0 <xTaskGetSchedulerState>
 8008196:	4603      	mov	r3, r0
 8008198:	2b02      	cmp	r3, #2
 800819a:	d109      	bne.n	80081b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800819c:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <xTimerGenericCommand+0x98>)
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	f107 0110 	add.w	r1, r7, #16
 80081a4:	2300      	movs	r3, #0
 80081a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a8:	f7fe f8f0 	bl	800638c <xQueueGenericSend>
 80081ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80081ae:	e012      	b.n	80081d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081b0:	4b0b      	ldr	r3, [pc, #44]	@ (80081e0 <xTimerGenericCommand+0x98>)
 80081b2:	6818      	ldr	r0, [r3, #0]
 80081b4:	f107 0110 	add.w	r1, r7, #16
 80081b8:	2300      	movs	r3, #0
 80081ba:	2200      	movs	r2, #0
 80081bc:	f7fe f8e6 	bl	800638c <xQueueGenericSend>
 80081c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80081c2:	e008      	b.n	80081d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081c4:	4b06      	ldr	r3, [pc, #24]	@ (80081e0 <xTimerGenericCommand+0x98>)
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	f107 0110 	add.w	r1, r7, #16
 80081cc:	2300      	movs	r3, #0
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	f7fe f9de 	bl	8006590 <xQueueGenericSendFromISR>
 80081d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3728      	adds	r7, #40	@ 0x28
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000e38 	.word	0x20000e38

080081e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ee:	4b23      	ldr	r3, [pc, #140]	@ (800827c <prvProcessExpiredTimer+0x98>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fd fe2f 	bl	8005e60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d023      	beq.n	8008258 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	18d1      	adds	r1, r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	6978      	ldr	r0, [r7, #20]
 800821e:	f000 f8d5 	bl	80083cc <prvInsertTimerInActiveList>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d020      	beq.n	800826a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008228:	2300      	movs	r3, #0
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	2300      	movs	r3, #0
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	2100      	movs	r1, #0
 8008232:	6978      	ldr	r0, [r7, #20]
 8008234:	f7ff ff88 	bl	8008148 <xTimerGenericCommand>
 8008238:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d114      	bne.n	800826a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	b2da      	uxtb	r2, r3
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	6978      	ldr	r0, [r7, #20]
 8008270:	4798      	blx	r3
}
 8008272:	bf00      	nop
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000e30 	.word	0x20000e30

08008280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f859 	bl	8008344 <prvGetNextExpireTime>
 8008292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4619      	mov	r1, r3
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 f805 	bl	80082a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800829e:	f000 f8d7 	bl	8008450 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082a2:	bf00      	nop
 80082a4:	e7f0      	b.n	8008288 <prvTimerTask+0x8>
	...

080082a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082b2:	f7ff f927 	bl	8007504 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f866 	bl	800838c <prvSampleTimeNow>
 80082c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d130      	bne.n	800832a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <prvProcessTimerOrBlockTask+0x3c>
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d806      	bhi.n	80082e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082d6:	f7ff f923 	bl	8007520 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082da:	68f9      	ldr	r1, [r7, #12]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff ff81 	bl	80081e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082e2:	e024      	b.n	800832e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082ea:	4b13      	ldr	r3, [pc, #76]	@ (8008338 <prvProcessTimerOrBlockTask+0x90>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <prvProcessTimerOrBlockTask+0x50>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e000      	b.n	80082fa <prvProcessTimerOrBlockTask+0x52>
 80082f8:	2300      	movs	r3, #0
 80082fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082fc:	4b0f      	ldr	r3, [pc, #60]	@ (800833c <prvProcessTimerOrBlockTask+0x94>)
 80082fe:	6818      	ldr	r0, [r3, #0]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4619      	mov	r1, r3
 800830a:	f7fe fe83 	bl	8007014 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800830e:	f7ff f907 	bl	8007520 <xTaskResumeAll>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008318:	4b09      	ldr	r3, [pc, #36]	@ (8008340 <prvProcessTimerOrBlockTask+0x98>)
 800831a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	f3bf 8f6f 	isb	sy
}
 8008328:	e001      	b.n	800832e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800832a:	f7ff f8f9 	bl	8007520 <xTaskResumeAll>
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000e34 	.word	0x20000e34
 800833c:	20000e38 	.word	0x20000e38
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800834c:	4b0e      	ldr	r3, [pc, #56]	@ (8008388 <prvGetNextExpireTime+0x44>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <prvGetNextExpireTime+0x16>
 8008356:	2201      	movs	r2, #1
 8008358:	e000      	b.n	800835c <prvGetNextExpireTime+0x18>
 800835a:	2200      	movs	r2, #0
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d105      	bne.n	8008374 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008368:	4b07      	ldr	r3, [pc, #28]	@ (8008388 <prvGetNextExpireTime+0x44>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e001      	b.n	8008378 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008378:	68fb      	ldr	r3, [r7, #12]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20000e30 	.word	0x20000e30

0800838c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008394:	f7ff f962 	bl	800765c <xTaskGetTickCount>
 8008398:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800839a:	4b0b      	ldr	r3, [pc, #44]	@ (80083c8 <prvSampleTimeNow+0x3c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d205      	bcs.n	80083b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083a4:	f000 f93a 	bl	800861c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083b6:	4a04      	ldr	r2, [pc, #16]	@ (80083c8 <prvSampleTimeNow+0x3c>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20000e40 	.word	0x20000e40

080083cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d812      	bhi.n	8008418 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d302      	bcc.n	8008406 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e01b      	b.n	800843e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008406:	4b10      	ldr	r3, [pc, #64]	@ (8008448 <prvInsertTimerInActiveList+0x7c>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3304      	adds	r3, #4
 800840e:	4619      	mov	r1, r3
 8008410:	4610      	mov	r0, r2
 8008412:	f7fd fcec 	bl	8005dee <vListInsert>
 8008416:	e012      	b.n	800843e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d206      	bcs.n	800842e <prvInsertTimerInActiveList+0x62>
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d302      	bcc.n	800842e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	e007      	b.n	800843e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800842e:	4b07      	ldr	r3, [pc, #28]	@ (800844c <prvInsertTimerInActiveList+0x80>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3304      	adds	r3, #4
 8008436:	4619      	mov	r1, r3
 8008438:	4610      	mov	r0, r2
 800843a:	f7fd fcd8 	bl	8005dee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800843e:	697b      	ldr	r3, [r7, #20]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000e34 	.word	0x20000e34
 800844c:	20000e30 	.word	0x20000e30

08008450 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08e      	sub	sp, #56	@ 0x38
 8008454:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008456:	e0ce      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	da19      	bge.n	8008492 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800845e:	1d3b      	adds	r3, r7, #4
 8008460:	3304      	adds	r3, #4
 8008462:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10b      	bne.n	8008482 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	61fb      	str	r3, [r7, #28]
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	e7fd      	b.n	800847e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008488:	6850      	ldr	r0, [r2, #4]
 800848a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800848c:	6892      	ldr	r2, [r2, #8]
 800848e:	4611      	mov	r1, r2
 8008490:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f2c0 80ae 	blt.w	80085f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a8:	3304      	adds	r3, #4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fd fcd8 	bl	8005e60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084b0:	463b      	mov	r3, r7
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff ff6a 	bl	800838c <prvSampleTimeNow>
 80084b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b09      	cmp	r3, #9
 80084be:	f200 8097 	bhi.w	80085f0 <prvProcessReceivedCommands+0x1a0>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <prvProcessReceivedCommands+0x78>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084f1 	.word	0x080084f1
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	080084f1 	.word	0x080084f1
 80084d4:	08008567 	.word	0x08008567
 80084d8:	0800857b 	.word	0x0800857b
 80084dc:	080085c7 	.word	0x080085c7
 80084e0:	080084f1 	.word	0x080084f1
 80084e4:	080084f1 	.word	0x080084f1
 80084e8:	08008567 	.word	0x08008567
 80084ec:	0800857b 	.word	0x0800857b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	18d1      	adds	r1, r2, r3
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800850e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008510:	f7ff ff5c 	bl	80083cc <prvInsertTimerInActiveList>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d06c      	beq.n	80085f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008520:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d061      	beq.n	80085f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	441a      	add	r2, r3
 8008538:	2300      	movs	r3, #0
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	2300      	movs	r3, #0
 800853e:	2100      	movs	r1, #0
 8008540:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008542:	f7ff fe01 	bl	8008148 <xTimerGenericCommand>
 8008546:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d152      	bne.n	80085f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	61bb      	str	r3, [r7, #24]
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	e7fd      	b.n	8008562 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800856c:	f023 0301 	bic.w	r3, r3, #1
 8008570:	b2da      	uxtb	r2, r3
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008578:	e03d      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800857a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	b2da      	uxtb	r2, r3
 8008586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008588:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008590:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10b      	bne.n	80085b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	617b      	str	r3, [r7, #20]
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	e7fd      	b.n	80085ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	699a      	ldr	r2, [r3, #24]
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	18d1      	adds	r1, r2, r3
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c0:	f7ff ff04 	bl	80083cc <prvInsertTimerInActiveList>
					break;
 80085c4:	e017      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d103      	bne.n	80085dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80085d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d6:	f000 fbe7 	bl	8008da8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085da:	e00c      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085e2:	f023 0301 	bic.w	r3, r3, #1
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80085ee:	e002      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80085f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085f6:	4b08      	ldr	r3, [pc, #32]	@ (8008618 <prvProcessReceivedCommands+0x1c8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	1d39      	adds	r1, r7, #4
 80085fc:	2200      	movs	r2, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe f8f4 	bl	80067ec <xQueueReceive>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	f47f af26 	bne.w	8008458 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	3730      	adds	r7, #48	@ 0x30
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000e38 	.word	0x20000e38

0800861c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008622:	e049      	b.n	80086b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008624:	4b2e      	ldr	r3, [pc, #184]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862e:	4b2c      	ldr	r3, [pc, #176]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3304      	adds	r3, #4
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fc0f 	bl	8005e60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	d02f      	beq.n	80086b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	4413      	add	r3, r2
 8008660:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	429a      	cmp	r2, r3
 8008668:	d90e      	bls.n	8008688 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008676:	4b1a      	ldr	r3, [pc, #104]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3304      	adds	r3, #4
 800867e:	4619      	mov	r1, r3
 8008680:	4610      	mov	r0, r2
 8008682:	f7fd fbb4 	bl	8005dee <vListInsert>
 8008686:	e017      	b.n	80086b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008688:	2300      	movs	r3, #0
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	2100      	movs	r1, #0
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff fd58 	bl	8008148 <xTimerGenericCommand>
 8008698:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10b      	bne.n	80086b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	603b      	str	r3, [r7, #0]
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086b8:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1b0      	bne.n	8008624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086c2:	4b07      	ldr	r3, [pc, #28]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086c8:	4b06      	ldr	r3, [pc, #24]	@ (80086e4 <prvSwitchTimerLists+0xc8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a04      	ldr	r2, [pc, #16]	@ (80086e0 <prvSwitchTimerLists+0xc4>)
 80086ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086d0:	4a04      	ldr	r2, [pc, #16]	@ (80086e4 <prvSwitchTimerLists+0xc8>)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	6013      	str	r3, [r2, #0]
}
 80086d6:	bf00      	nop
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20000e30 	.word	0x20000e30
 80086e4:	20000e34 	.word	0x20000e34

080086e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086ee:	f000 f96b 	bl	80089c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086f2:	4b15      	ldr	r3, [pc, #84]	@ (8008748 <prvCheckForValidListAndQueue+0x60>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d120      	bne.n	800873c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086fa:	4814      	ldr	r0, [pc, #80]	@ (800874c <prvCheckForValidListAndQueue+0x64>)
 80086fc:	f7fd fb26 	bl	8005d4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008700:	4813      	ldr	r0, [pc, #76]	@ (8008750 <prvCheckForValidListAndQueue+0x68>)
 8008702:	f7fd fb23 	bl	8005d4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008706:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <prvCheckForValidListAndQueue+0x6c>)
 8008708:	4a10      	ldr	r2, [pc, #64]	@ (800874c <prvCheckForValidListAndQueue+0x64>)
 800870a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800870c:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <prvCheckForValidListAndQueue+0x70>)
 800870e:	4a10      	ldr	r2, [pc, #64]	@ (8008750 <prvCheckForValidListAndQueue+0x68>)
 8008710:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008712:	2300      	movs	r3, #0
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	4b11      	ldr	r3, [pc, #68]	@ (800875c <prvCheckForValidListAndQueue+0x74>)
 8008718:	4a11      	ldr	r2, [pc, #68]	@ (8008760 <prvCheckForValidListAndQueue+0x78>)
 800871a:	2110      	movs	r1, #16
 800871c:	200a      	movs	r0, #10
 800871e:	f7fd fc33 	bl	8005f88 <xQueueGenericCreateStatic>
 8008722:	4603      	mov	r3, r0
 8008724:	4a08      	ldr	r2, [pc, #32]	@ (8008748 <prvCheckForValidListAndQueue+0x60>)
 8008726:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008728:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <prvCheckForValidListAndQueue+0x60>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008730:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <prvCheckForValidListAndQueue+0x60>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	490b      	ldr	r1, [pc, #44]	@ (8008764 <prvCheckForValidListAndQueue+0x7c>)
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fc18 	bl	8006f6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800873c:	f000 f976 	bl	8008a2c <vPortExitCritical>
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000e38 	.word	0x20000e38
 800874c:	20000e08 	.word	0x20000e08
 8008750:	20000e1c 	.word	0x20000e1c
 8008754:	20000e30 	.word	0x20000e30
 8008758:	20000e34 	.word	0x20000e34
 800875c:	20000ee4 	.word	0x20000ee4
 8008760:	20000e44 	.word	0x20000e44
 8008764:	0800a414 	.word	0x0800a414

08008768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3b04      	subs	r3, #4
 8008778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3b04      	subs	r3, #4
 8008786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f023 0201 	bic.w	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3b04      	subs	r3, #4
 8008796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008798:	4a0c      	ldr	r2, [pc, #48]	@ (80087cc <pxPortInitialiseStack+0x64>)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3b14      	subs	r3, #20
 80087a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3b04      	subs	r3, #4
 80087ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f06f 0202 	mvn.w	r2, #2
 80087b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3b20      	subs	r3, #32
 80087bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087be:	68fb      	ldr	r3, [r7, #12]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	080087d1 	.word	0x080087d1

080087d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087da:	4b13      	ldr	r3, [pc, #76]	@ (8008828 <prvTaskExitError+0x58>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e2:	d00b      	beq.n	80087fc <prvTaskExitError+0x2c>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	60fb      	str	r3, [r7, #12]
}
 80087f6:	bf00      	nop
 80087f8:	bf00      	nop
 80087fa:	e7fd      	b.n	80087f8 <prvTaskExitError+0x28>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	60bb      	str	r3, [r7, #8]
}
 800880e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008810:	bf00      	nop
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0fc      	beq.n	8008812 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008818:	bf00      	nop
 800881a:	bf00      	nop
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	2000000c 	.word	0x2000000c
 800882c:	00000000 	.word	0x00000000

08008830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008830:	4b07      	ldr	r3, [pc, #28]	@ (8008850 <pxCurrentTCBConst2>)
 8008832:	6819      	ldr	r1, [r3, #0]
 8008834:	6808      	ldr	r0, [r1, #0]
 8008836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883a:	f380 8809 	msr	PSP, r0
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f380 8811 	msr	BASEPRI, r0
 800884a:	4770      	bx	lr
 800884c:	f3af 8000 	nop.w

08008850 <pxCurrentTCBConst2>:
 8008850:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008858:	4808      	ldr	r0, [pc, #32]	@ (800887c <prvPortStartFirstTask+0x24>)
 800885a:	6800      	ldr	r0, [r0, #0]
 800885c:	6800      	ldr	r0, [r0, #0]
 800885e:	f380 8808 	msr	MSP, r0
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8814 	msr	CONTROL, r0
 800886a:	b662      	cpsie	i
 800886c:	b661      	cpsie	f
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	df00      	svc	0
 8008878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800887a:	bf00      	nop
 800887c:	e000ed08 	.word	0xe000ed08

08008880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008886:	4b47      	ldr	r3, [pc, #284]	@ (80089a4 <xPortStartScheduler+0x124>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a47      	ldr	r2, [pc, #284]	@ (80089a8 <xPortStartScheduler+0x128>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d10b      	bne.n	80088a8 <xPortStartScheduler+0x28>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	613b      	str	r3, [r7, #16]
}
 80088a2:	bf00      	nop
 80088a4:	bf00      	nop
 80088a6:	e7fd      	b.n	80088a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088a8:	4b3e      	ldr	r3, [pc, #248]	@ (80089a4 <xPortStartScheduler+0x124>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a3f      	ldr	r2, [pc, #252]	@ (80089ac <xPortStartScheduler+0x12c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d10b      	bne.n	80088ca <xPortStartScheduler+0x4a>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60fb      	str	r3, [r7, #12]
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	e7fd      	b.n	80088c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088ca:	4b39      	ldr	r3, [pc, #228]	@ (80089b0 <xPortStartScheduler+0x130>)
 80088cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	22ff      	movs	r2, #255	@ 0xff
 80088da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	4b31      	ldr	r3, [pc, #196]	@ (80089b4 <xPortStartScheduler+0x134>)
 80088f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088f2:	4b31      	ldr	r3, [pc, #196]	@ (80089b8 <xPortStartScheduler+0x138>)
 80088f4:	2207      	movs	r2, #7
 80088f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088f8:	e009      	b.n	800890e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80088fa:	4b2f      	ldr	r3, [pc, #188]	@ (80089b8 <xPortStartScheduler+0x138>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3b01      	subs	r3, #1
 8008900:	4a2d      	ldr	r2, [pc, #180]	@ (80089b8 <xPortStartScheduler+0x138>)
 8008902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	b2db      	uxtb	r3, r3
 800890c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008916:	2b80      	cmp	r3, #128	@ 0x80
 8008918:	d0ef      	beq.n	80088fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800891a:	4b27      	ldr	r3, [pc, #156]	@ (80089b8 <xPortStartScheduler+0x138>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f1c3 0307 	rsb	r3, r3, #7
 8008922:	2b04      	cmp	r3, #4
 8008924:	d00b      	beq.n	800893e <xPortStartScheduler+0xbe>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60bb      	str	r3, [r7, #8]
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	e7fd      	b.n	800893a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800893e:	4b1e      	ldr	r3, [pc, #120]	@ (80089b8 <xPortStartScheduler+0x138>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	4a1c      	ldr	r2, [pc, #112]	@ (80089b8 <xPortStartScheduler+0x138>)
 8008946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008948:	4b1b      	ldr	r3, [pc, #108]	@ (80089b8 <xPortStartScheduler+0x138>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008950:	4a19      	ldr	r2, [pc, #100]	@ (80089b8 <xPortStartScheduler+0x138>)
 8008952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	b2da      	uxtb	r2, r3
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800895c:	4b17      	ldr	r3, [pc, #92]	@ (80089bc <xPortStartScheduler+0x13c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a16      	ldr	r2, [pc, #88]	@ (80089bc <xPortStartScheduler+0x13c>)
 8008962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008968:	4b14      	ldr	r3, [pc, #80]	@ (80089bc <xPortStartScheduler+0x13c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a13      	ldr	r2, [pc, #76]	@ (80089bc <xPortStartScheduler+0x13c>)
 800896e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008974:	f000 f8da 	bl	8008b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008978:	4b11      	ldr	r3, [pc, #68]	@ (80089c0 <xPortStartScheduler+0x140>)
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800897e:	f000 f8f9 	bl	8008b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008982:	4b10      	ldr	r3, [pc, #64]	@ (80089c4 <xPortStartScheduler+0x144>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a0f      	ldr	r2, [pc, #60]	@ (80089c4 <xPortStartScheduler+0x144>)
 8008988:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800898c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800898e:	f7ff ff63 	bl	8008858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008992:	f7fe ff2d 	bl	80077f0 <vTaskSwitchContext>
	prvTaskExitError();
 8008996:	f7ff ff1b 	bl	80087d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed00 	.word	0xe000ed00
 80089a8:	410fc271 	.word	0x410fc271
 80089ac:	410fc270 	.word	0x410fc270
 80089b0:	e000e400 	.word	0xe000e400
 80089b4:	20000f34 	.word	0x20000f34
 80089b8:	20000f38 	.word	0x20000f38
 80089bc:	e000ed20 	.word	0xe000ed20
 80089c0:	2000000c 	.word	0x2000000c
 80089c4:	e000ef34 	.word	0xe000ef34

080089c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	607b      	str	r3, [r7, #4]
}
 80089e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089e2:	4b10      	ldr	r3, [pc, #64]	@ (8008a24 <vPortEnterCritical+0x5c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3301      	adds	r3, #1
 80089e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008a24 <vPortEnterCritical+0x5c>)
 80089ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <vPortEnterCritical+0x5c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d110      	bne.n	8008a16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008a28 <vPortEnterCritical+0x60>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00b      	beq.n	8008a16 <vPortEnterCritical+0x4e>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	603b      	str	r3, [r7, #0]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <vPortEnterCritical+0x4a>
	}
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	2000000c 	.word	0x2000000c
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a32:	4b12      	ldr	r3, [pc, #72]	@ (8008a7c <vPortExitCritical+0x50>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10b      	bne.n	8008a52 <vPortExitCritical+0x26>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	607b      	str	r3, [r7, #4]
}
 8008a4c:	bf00      	nop
 8008a4e:	bf00      	nop
 8008a50:	e7fd      	b.n	8008a4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a52:	4b0a      	ldr	r3, [pc, #40]	@ (8008a7c <vPortExitCritical+0x50>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	4a08      	ldr	r2, [pc, #32]	@ (8008a7c <vPortExitCritical+0x50>)
 8008a5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a5c:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <vPortExitCritical+0x50>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d105      	bne.n	8008a70 <vPortExitCritical+0x44>
 8008a64:	2300      	movs	r3, #0
 8008a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f383 8811 	msr	BASEPRI, r3
}
 8008a6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	2000000c 	.word	0x2000000c

08008a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a80:	f3ef 8009 	mrs	r0, PSP
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	4b15      	ldr	r3, [pc, #84]	@ (8008ae0 <pxCurrentTCBConst>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	f01e 0f10 	tst.w	lr, #16
 8008a90:	bf08      	it	eq
 8008a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9a:	6010      	str	r0, [r2, #0]
 8008a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008aa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008aa4:	f380 8811 	msr	BASEPRI, r0
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f7fe fe9e 	bl	80077f0 <vTaskSwitchContext>
 8008ab4:	f04f 0000 	mov.w	r0, #0
 8008ab8:	f380 8811 	msr	BASEPRI, r0
 8008abc:	bc09      	pop	{r0, r3}
 8008abe:	6819      	ldr	r1, [r3, #0]
 8008ac0:	6808      	ldr	r0, [r1, #0]
 8008ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac6:	f01e 0f10 	tst.w	lr, #16
 8008aca:	bf08      	it	eq
 8008acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ad0:	f380 8809 	msr	PSP, r0
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w

08008ae0 <pxCurrentTCBConst>:
 8008ae0:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop

08008ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	607b      	str	r3, [r7, #4]
}
 8008b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b02:	f7fe fdbb 	bl	800767c <xTaskIncrementTick>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b0c:	4b06      	ldr	r3, [pc, #24]	@ (8008b28 <xPortSysTickHandler+0x40>)
 8008b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	2300      	movs	r3, #0
 8008b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f383 8811 	msr	BASEPRI, r3
}
 8008b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b30:	4b0b      	ldr	r3, [pc, #44]	@ (8008b60 <vPortSetupTimerInterrupt+0x34>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b36:	4b0b      	ldr	r3, [pc, #44]	@ (8008b64 <vPortSetupTimerInterrupt+0x38>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b68 <vPortSetupTimerInterrupt+0x3c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0a      	ldr	r2, [pc, #40]	@ (8008b6c <vPortSetupTimerInterrupt+0x40>)
 8008b42:	fba2 2303 	umull	r2, r3, r2, r3
 8008b46:	099b      	lsrs	r3, r3, #6
 8008b48:	4a09      	ldr	r2, [pc, #36]	@ (8008b70 <vPortSetupTimerInterrupt+0x44>)
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b4e:	4b04      	ldr	r3, [pc, #16]	@ (8008b60 <vPortSetupTimerInterrupt+0x34>)
 8008b50:	2207      	movs	r2, #7
 8008b52:	601a      	str	r2, [r3, #0]
}
 8008b54:	bf00      	nop
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	e000e010 	.word	0xe000e010
 8008b64:	e000e018 	.word	0xe000e018
 8008b68:	20000000 	.word	0x20000000
 8008b6c:	10624dd3 	.word	0x10624dd3
 8008b70:	e000e014 	.word	0xe000e014

08008b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b84 <vPortEnableVFP+0x10>
 8008b78:	6801      	ldr	r1, [r0, #0]
 8008b7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b7e:	6001      	str	r1, [r0, #0]
 8008b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b82:	bf00      	nop
 8008b84:	e000ed88 	.word	0xe000ed88

08008b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b8e:	f3ef 8305 	mrs	r3, IPSR
 8008b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b0f      	cmp	r3, #15
 8008b98:	d915      	bls.n	8008bc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b9a:	4a18      	ldr	r2, [pc, #96]	@ (8008bfc <vPortValidateInterruptPriority+0x74>)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ba4:	4b16      	ldr	r3, [pc, #88]	@ (8008c00 <vPortValidateInterruptPriority+0x78>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	7afa      	ldrb	r2, [r7, #11]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d20b      	bcs.n	8008bc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c04 <vPortValidateInterruptPriority+0x7c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008bce:	4b0e      	ldr	r3, [pc, #56]	@ (8008c08 <vPortValidateInterruptPriority+0x80>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d90b      	bls.n	8008bee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	603b      	str	r3, [r7, #0]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <vPortValidateInterruptPriority+0x62>
	}
 8008bee:	bf00      	nop
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	e000e3f0 	.word	0xe000e3f0
 8008c00:	20000f34 	.word	0x20000f34
 8008c04:	e000ed0c 	.word	0xe000ed0c
 8008c08:	20000f38 	.word	0x20000f38

08008c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08a      	sub	sp, #40	@ 0x28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c14:	2300      	movs	r3, #0
 8008c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c18:	f7fe fc74 	bl	8007504 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8008d90 <pvPortMalloc+0x184>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c24:	f000 f924 	bl	8008e70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c28:	4b5a      	ldr	r3, [pc, #360]	@ (8008d94 <pvPortMalloc+0x188>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f040 8095 	bne.w	8008d60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01e      	beq.n	8008c7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c3c:	2208      	movs	r2, #8
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4413      	add	r3, r2
 8008c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d015      	beq.n	8008c7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f023 0307 	bic.w	r3, r3, #7
 8008c54:	3308      	adds	r3, #8
 8008c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <pvPortMalloc+0x6e>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	617b      	str	r3, [r7, #20]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d06f      	beq.n	8008d60 <pvPortMalloc+0x154>
 8008c80:	4b45      	ldr	r3, [pc, #276]	@ (8008d98 <pvPortMalloc+0x18c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d86a      	bhi.n	8008d60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c8a:	4b44      	ldr	r3, [pc, #272]	@ (8008d9c <pvPortMalloc+0x190>)
 8008c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c8e:	4b43      	ldr	r3, [pc, #268]	@ (8008d9c <pvPortMalloc+0x190>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c94:	e004      	b.n	8008ca0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d903      	bls.n	8008cb2 <pvPortMalloc+0xa6>
 8008caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1f1      	bne.n	8008c96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cb2:	4b37      	ldr	r3, [pc, #220]	@ (8008d90 <pvPortMalloc+0x184>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d051      	beq.n	8008d60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	4413      	add	r3, r2
 8008cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	1ad2      	subs	r2, r2, r3
 8008cd6:	2308      	movs	r3, #8
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d920      	bls.n	8008d20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <pvPortMalloc+0xfc>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	613b      	str	r3, [r7, #16]
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	e7fd      	b.n	8008d04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d1a:	69b8      	ldr	r0, [r7, #24]
 8008d1c:	f000 f90a 	bl	8008f34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d20:	4b1d      	ldr	r3, [pc, #116]	@ (8008d98 <pvPortMalloc+0x18c>)
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008d98 <pvPortMalloc+0x18c>)
 8008d2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8008d98 <pvPortMalloc+0x18c>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4b1b      	ldr	r3, [pc, #108]	@ (8008da0 <pvPortMalloc+0x194>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d203      	bcs.n	8008d42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d3a:	4b17      	ldr	r3, [pc, #92]	@ (8008d98 <pvPortMalloc+0x18c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a18      	ldr	r2, [pc, #96]	@ (8008da0 <pvPortMalloc+0x194>)
 8008d40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	4b13      	ldr	r3, [pc, #76]	@ (8008d94 <pvPortMalloc+0x188>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d56:	4b13      	ldr	r3, [pc, #76]	@ (8008da4 <pvPortMalloc+0x198>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	4a11      	ldr	r2, [pc, #68]	@ (8008da4 <pvPortMalloc+0x198>)
 8008d5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d60:	f7fe fbde 	bl	8007520 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00b      	beq.n	8008d86 <pvPortMalloc+0x17a>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60fb      	str	r3, [r7, #12]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <pvPortMalloc+0x176>
	return pvReturn;
 8008d86:	69fb      	ldr	r3, [r7, #28]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3728      	adds	r7, #40	@ 0x28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20003684 	.word	0x20003684
 8008d94:	20003698 	.word	0x20003698
 8008d98:	20003688 	.word	0x20003688
 8008d9c:	2000367c 	.word	0x2000367c
 8008da0:	2000368c 	.word	0x2000368c
 8008da4:	20003690 	.word	0x20003690

08008da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d04f      	beq.n	8008e5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dba:	2308      	movs	r3, #8
 8008dbc:	425b      	negs	r3, r3
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	4b25      	ldr	r3, [pc, #148]	@ (8008e64 <vPortFree+0xbc>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <vPortFree+0x46>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	60fb      	str	r3, [r7, #12]
}
 8008de8:	bf00      	nop
 8008dea:	bf00      	nop
 8008dec:	e7fd      	b.n	8008dea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <vPortFree+0x66>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	60bb      	str	r3, [r7, #8]
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	e7fd      	b.n	8008e0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	4b14      	ldr	r3, [pc, #80]	@ (8008e64 <vPortFree+0xbc>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4013      	ands	r3, r2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01e      	beq.n	8008e5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d11a      	bne.n	8008e5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	4b0e      	ldr	r3, [pc, #56]	@ (8008e64 <vPortFree+0xbc>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	43db      	mvns	r3, r3
 8008e2e:	401a      	ands	r2, r3
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e34:	f7fe fb66 	bl	8007504 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e68 <vPortFree+0xc0>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4413      	add	r3, r2
 8008e42:	4a09      	ldr	r2, [pc, #36]	@ (8008e68 <vPortFree+0xc0>)
 8008e44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e46:	6938      	ldr	r0, [r7, #16]
 8008e48:	f000 f874 	bl	8008f34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e4c:	4b07      	ldr	r3, [pc, #28]	@ (8008e6c <vPortFree+0xc4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3301      	adds	r3, #1
 8008e52:	4a06      	ldr	r2, [pc, #24]	@ (8008e6c <vPortFree+0xc4>)
 8008e54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e56:	f7fe fb63 	bl	8007520 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e5a:	bf00      	nop
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20003698 	.word	0x20003698
 8008e68:	20003688 	.word	0x20003688
 8008e6c:	20003694 	.word	0x20003694

08008e70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e76:	f44f 531d 	mov.w	r3, #10048	@ 0x2740
 8008e7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e7c:	4b27      	ldr	r3, [pc, #156]	@ (8008f1c <prvHeapInit+0xac>)
 8008e7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00c      	beq.n	8008ea4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3307      	adds	r3, #7
 8008e8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0307 	bic.w	r3, r3, #7
 8008e96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8008f1c <prvHeapInit+0xac>)
 8008ea0:	4413      	add	r3, r2
 8008ea2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f20 <prvHeapInit+0xb0>)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008eae:	4b1c      	ldr	r3, [pc, #112]	@ (8008f20 <prvHeapInit+0xb0>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4413      	add	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ebc:	2208      	movs	r2, #8
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0307 	bic.w	r3, r3, #7
 8008eca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4a15      	ldr	r2, [pc, #84]	@ (8008f24 <prvHeapInit+0xb4>)
 8008ed0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ed2:	4b14      	ldr	r3, [pc, #80]	@ (8008f24 <prvHeapInit+0xb4>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008eda:	4b12      	ldr	r3, [pc, #72]	@ (8008f24 <prvHeapInit+0xb4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	1ad2      	subs	r2, r2, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8008f24 <prvHeapInit+0xb4>)
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	4a0a      	ldr	r2, [pc, #40]	@ (8008f28 <prvHeapInit+0xb8>)
 8008efe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	4a09      	ldr	r2, [pc, #36]	@ (8008f2c <prvHeapInit+0xbc>)
 8008f06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f08:	4b09      	ldr	r3, [pc, #36]	@ (8008f30 <prvHeapInit+0xc0>)
 8008f0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f0e:	601a      	str	r2, [r3, #0]
}
 8008f10:	bf00      	nop
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	20000f3c 	.word	0x20000f3c
 8008f20:	2000367c 	.word	0x2000367c
 8008f24:	20003684 	.word	0x20003684
 8008f28:	2000368c 	.word	0x2000368c
 8008f2c:	20003688 	.word	0x20003688
 8008f30:	20003698 	.word	0x20003698

08008f34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f3c:	4b28      	ldr	r3, [pc, #160]	@ (8008fe0 <prvInsertBlockIntoFreeList+0xac>)
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	e002      	b.n	8008f48 <prvInsertBlockIntoFreeList+0x14>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d8f7      	bhi.n	8008f42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d108      	bne.n	8008f76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	441a      	add	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	441a      	add	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d118      	bne.n	8008fbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	4b15      	ldr	r3, [pc, #84]	@ (8008fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d00d      	beq.n	8008fb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	441a      	add	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	e008      	b.n	8008fc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	e003      	b.n	8008fc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d002      	beq.n	8008fd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fd2:	bf00      	nop
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	2000367c 	.word	0x2000367c
 8008fe4:	20003684 	.word	0x20003684

08008fe8 <_ZN15FdcanControllerC1Ev>:
 *      Author: knap-linux
 */

#include "fdcan_controller.h"

FdcanController::FdcanController()
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	: m_hfdcan{nullptr}
	, m_queueCanHandleFifo0{nullptr}
	, m_queueCanHandleFifo1{nullptr}
	, m_mutexCanHandle{nullptr}
	, m_semCanHandle{nullptr}
 8008ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8009024 <_ZN15FdcanControllerC1Ev+0x3c>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	601a      	str	r2, [r3, #0]
	: m_hfdcan{nullptr}
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	605a      	str	r2, [r3, #4]
	, m_queueCanHandleFifo0{nullptr}
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	609a      	str	r2, [r3, #8]
	, m_queueCanHandleFifo1{nullptr}
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	60da      	str	r2, [r3, #12]
	, m_mutexCanHandle{nullptr}
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	611a      	str	r2, [r3, #16]
	, m_semCanHandle{nullptr}
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	615a      	str	r2, [r3, #20]
{

}
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	0800a554 	.word	0x0800a554

08009028 <_ZN15FdcanControllerD1Ev>:

FdcanController::~FdcanController()
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	4a04      	ldr	r2, [pc, #16]	@ (8009044 <_ZN15FdcanControllerD1Ev+0x1c>)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
{

}
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	0800a554 	.word	0x0800a554

08009048 <_ZN15FdcanControllerD0Ev>:
FdcanController::~FdcanController()
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
}
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff ffe9 	bl	8009028 <_ZN15FdcanControllerD1Ev>
 8009056:	2118      	movs	r1, #24
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f9db 	bl	8009414 <_ZdlPvj>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <_ZN15FdcanController14setHandleFdcanEP19FDCAN_HandleTypeDef>:

void FdcanController::setHandleFdcan(FDCAN_HandleTypeDef *hfdcan)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	m_hfdcan = hfdcan;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	605a      	str	r2, [r3, #4]
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE>:

void FdcanController::setHandleQueue(osMessageQueueId_t *queueCanHandle, const Buffer bufferType)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
	if (bufferType == Buffer::Fifo0)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d103      	bne.n	800909e <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE+0x1a>
	{
		m_queueCanHandleFifo0 = queueCanHandle;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	609a      	str	r2, [r3, #8]
	}
	else
	{
		; // TODO: implement error
	}
}
 800909c:	e005      	b.n	80090aa <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE+0x26>
	else if (bufferType == Buffer::Fifo1)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d102      	bne.n	80090aa <_ZN15FdcanController14setHandleQueueEPPvNS_6BufferE+0x26>
		m_queueCanHandleFifo1 = queueCanHandle;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	60da      	str	r2, [r3, #12]
}
 80090aa:	bf00      	nop
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <_ZN15FdcanController14setHandleMutexEPPv>:

void FdcanController::setHandleMutex(osMutexId_t *mutexCanHandle)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
	m_mutexCanHandle = mutexCanHandle;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	611a      	str	r2, [r3, #16]
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <_ZN15FdcanController12setHandleSemEPPv>:

void FdcanController::setHandleSem(osSemaphoreId_t *semCanHandle)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
	m_semCanHandle = semCanHandle;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	615a      	str	r2, [r3, #20]
}
 80090e2:	bf00      	nop
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <_ZN15FdcanController4initEv>:

FdcanController::State FdcanController::init()
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
	if (m_hfdcan == nullptr) return State::Error;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <_ZN15FdcanController4initEv+0x14>
 80090fe:	2301      	movs	r3, #1
 8009100:	e036      	b.n	8009170 <_ZN15FdcanController4initEv+0x82>
	if ((m_queueCanHandleFifo0 == nullptr) &&
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <_ZN15FdcanController4initEv+0x28>
		(m_queueCanHandleFifo1 == nullptr)) return State::Error;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68db      	ldr	r3, [r3, #12]
	if ((m_queueCanHandleFifo0 == nullptr) &&
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <_ZN15FdcanController4initEv+0x28>
		(m_queueCanHandleFifo1 == nullptr)) return State::Error;
 8009112:	2301      	movs	r3, #1
 8009114:	e02c      	b.n	8009170 <_ZN15FdcanController4initEv+0x82>
	if (m_mutexCanHandle == nullptr) return State::Error;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <_ZN15FdcanController4initEv+0x34>
 800911e:	2301      	movs	r3, #1
 8009120:	e026      	b.n	8009170 <_ZN15FdcanController4initEv+0x82>
	if (m_semCanHandle == nullptr) return State::Error;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <_ZN15FdcanController4initEv+0x40>
 800912a:	2301      	movs	r3, #1
 800912c:	e020      	b.n	8009170 <_ZN15FdcanController4initEv+0x82>

	if (HAL_FDCAN_Start(m_hfdcan) != HAL_OK)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	4618      	mov	r0, r3
 8009134:	f7f8 fc42 	bl	80019bc <HAL_FDCAN_Start>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	bf14      	ite	ne
 800913e:	2301      	movne	r3, #1
 8009140:	2300      	moveq	r3, #0
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <_ZN15FdcanController4initEv+0x5e>
	{
		return State::ErrorInit;
 8009148:	2302      	movs	r3, #2
 800914a:	e011      	b.n	8009170 <_ZN15FdcanController4initEv+0x82>
	}

	if (HAL_FDCAN_ActivateNotification(m_hfdcan,
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	2207      	movs	r2, #7
 8009152:	2189      	movs	r1, #137	@ 0x89
 8009154:	4618      	mov	r0, r3
 8009156:	f7f8 fda5 	bl	8001ca4 <HAL_FDCAN_ActivateNotification>
 800915a:	4603      	mov	r3, r0
		FDCAN_IT_TX_COMPLETE | FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_RX_FIFO1_NEW_MESSAGE,
		FDCAN_TX_BUFFER0 | FDCAN_TX_BUFFER1 | FDCAN_TX_BUFFER2) != HAL_OK)
 800915c:	2b00      	cmp	r3, #0
 800915e:	bf14      	ite	ne
 8009160:	2301      	movne	r3, #1
 8009162:	2300      	moveq	r3, #0
 8009164:	b2db      	uxtb	r3, r3
	if (HAL_FDCAN_ActivateNotification(m_hfdcan,
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <_ZN15FdcanController4initEv+0x80>
	{
		return State::ErrorInit;
 800916a:	2302      	movs	r3, #2
 800916c:	e000      	b.n	8009170 <_ZN15FdcanController4initEv+0x82>
	}

	return State::Ok;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <_ZN15FdcanController4sendE8FdcanMsg>:

FdcanController::State FdcanController::send(const FdcanMsg msg)
{
 8009178:	b084      	sub	sp, #16
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	f107 0014 	add.w	r0, r7, #20
 8009186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (osMutexAcquire(*m_mutexCanHandle, osWaitForever) != osOK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009194:	4618      	mov	r0, r3
 8009196:	f7fc facc 	bl	8005732 <osMutexAcquire>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	bf14      	ite	ne
 80091a0:	2301      	movne	r3, #1
 80091a2:	2300      	moveq	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <_ZN15FdcanController4sendE8FdcanMsg+0x36>
	{
		return State::ErrorSend;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e044      	b.n	8009238 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (HAL_FDCAN_AddMessageToTxFifoQ(m_hfdcan, &msg.txHeader, msg.data) != HAL_OK)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6858      	ldr	r0, [r3, #4]
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80091ba:	f107 0314 	add.w	r3, r7, #20
 80091be:	3328      	adds	r3, #40	@ 0x28
 80091c0:	4619      	mov	r1, r3
 80091c2:	f7f8 fc23 	bl	8001a0c <HAL_FDCAN_AddMessageToTxFifoQ>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bf14      	ite	ne
 80091cc:	2301      	movne	r3, #1
 80091ce:	2300      	moveq	r3, #0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d007      	beq.n	80091e6 <_ZN15FdcanController4sendE8FdcanMsg+0x6e>
	{
		osMutexRelease(*m_mutexCanHandle);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fc faf3 	bl	80057c8 <osMutexRelease>
		return State::ErrorSend;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e028      	b.n	8009238 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (osSemaphoreAcquire(*m_semCanHandle, osWaitForever) != osOK)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fc fbaf 	bl	8005954 <osSemaphoreAcquire>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bf14      	ite	ne
 80091fc:	2301      	movne	r3, #1
 80091fe:	2300      	moveq	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d007      	beq.n	8009216 <_ZN15FdcanController4sendE8FdcanMsg+0x9e>
	{
		osMutexRelease(*m_mutexCanHandle);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f7fc fadb 	bl	80057c8 <osMutexRelease>
		return State::ErrorSend;
 8009212:	2303      	movs	r3, #3
 8009214:	e010      	b.n	8009238 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}
	if (osMutexRelease(*m_mutexCanHandle) != osOK)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4618      	mov	r0, r3
 800921e:	f7fc fad3 	bl	80057c8 <osMutexRelease>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <_ZN15FdcanController4sendE8FdcanMsg+0xbe>
	{
		return State::ErrorSend;
 8009232:	2303      	movs	r3, #3
 8009234:	e000      	b.n	8009238 <_ZN15FdcanController4sendE8FdcanMsg+0xc0>
	}

	return State::Ok;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009242:	b004      	add	sp, #16
 8009244:	4770      	bx	lr

08009246 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE>:

FdcanController::State FdcanController::receive(FdcanMsg *msg, const Buffer bufferType)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	607a      	str	r2, [r7, #4]
	if (bufferType == Buffer::Fifo0)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d112      	bne.n	800927e <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x38>
	{
		if (osMessageQueueGet(*m_queueCanHandleFifo0, msg, nullptr, osWaitForever) != osOK)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009262:	2200      	movs	r2, #0
 8009264:	68b9      	ldr	r1, [r7, #8]
 8009266:	f7fc fcdf 	bl	8005c28 <osMessageQueueGet>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	bf14      	ite	ne
 8009270:	2301      	movne	r3, #1
 8009272:	2300      	moveq	r3, #0
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d019      	beq.n	80092ae <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x68>
		{
			return State::ErrorReceive;
 800927a:	2304      	movs	r3, #4
 800927c:	e018      	b.n	80092b0 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x6a>
		}
	}
	else if (bufferType == Buffer::Fifo1)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b02      	cmp	r3, #2
 8009282:	d112      	bne.n	80092aa <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x64>
	{
		if (osMessageQueueGet(*m_queueCanHandleFifo1, msg, nullptr, osWaitForever) != osOK)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800928e:	2200      	movs	r2, #0
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	f7fc fcc9 	bl	8005c28 <osMessageQueueGet>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	bf14      	ite	ne
 800929c:	2301      	movne	r3, #1
 800929e:	2300      	moveq	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x68>
		{
			return State::ErrorReceive;
 80092a6:	2304      	movs	r3, #4
 80092a8:	e002      	b.n	80092b0 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x6a>
		}
	}
	else
	{
		return State::ErrorReceive;
 80092aa:	2304      	movs	r3, #4
 80092ac:	e000      	b.n	80092b0 <_ZN15FdcanController7receiveEP8FdcanMsgNS_6BufferE+0x6a>
	}


	return State::Ok;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef>:

FdcanController::State FdcanController::updateInterruptTx(FDCAN_HandleTypeDef *hfdcan)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
	if (hfdcan->Instance == m_hfdcan->Instance)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d10f      	bne.n	80092f0 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x38>
	{
		if (osSemaphoreRelease(*m_semCanHandle) != osOK)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fc fb8e 	bl	80059f8 <osSemaphoreRelease>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bf14      	ite	ne
 80092e2:	2301      	movne	r3, #1
 80092e4:	2300      	moveq	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x38>
		{
			return State::ErrorIsrTx;
 80092ec:	2305      	movs	r3, #5
 80092ee:	e000      	b.n	80092f2 <_ZN15FdcanController17updateInterruptTxEP19FDCAN_HandleTypeDef+0x3a>
		}
	}

	return State::Ok;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm>:

FdcanController::State FdcanController::updateInterruptRx(FDCAN_HandleTypeDef *hfdcan, uint32_t isrType)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b09a      	sub	sp, #104	@ 0x68
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
	if (hfdcan->Instance == m_hfdcan->Instance)
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d157      	bne.n	80093c4 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xca>
	{
		if (isrType & FDCAN_IT_RX_FIFO0_NEW_MESSAGE)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	d026      	beq.n	800936c <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x72>
		{
			FdcanMsg msg;
			if (HAL_FDCAN_GetRxMessage(m_hfdcan, FDCAN_RX_FIFO0, &msg.rxHeader, msg.data) != HAL_OK)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6858      	ldr	r0, [r3, #4]
 8009322:	f107 0314 	add.w	r3, r7, #20
 8009326:	334c      	adds	r3, #76	@ 0x4c
 8009328:	f107 0214 	add.w	r2, r7, #20
 800932c:	2140      	movs	r1, #64	@ 0x40
 800932e:	f7f8 fbb1 	bl	8001a94 <HAL_FDCAN_GetRxMessage>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	bf14      	ite	ne
 8009338:	2301      	movne	r3, #1
 800933a:	2300      	moveq	r3, #0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0x4c>
			{
				return State::ErrorIsrRx;
 8009342:	2306      	movs	r3, #6
 8009344:	e03f      	b.n	80093c6 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xcc>
			}
			if (osMessageQueuePut(*m_queueCanHandleFifo0, &msg, 0, 0) != osOK)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	f107 0114 	add.w	r1, r7, #20
 8009350:	2300      	movs	r3, #0
 8009352:	2200      	movs	r2, #0
 8009354:	f7fc fc08 	bl	8005b68 <osMessageQueuePut>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	bf14      	ite	ne
 800935e:	2301      	movne	r3, #1
 8009360:	2300      	moveq	r3, #0
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	d02d      	beq.n	80093c4 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xca>
			{
				return State::ErrorIsrRx;
 8009368:	2306      	movs	r3, #6
 800936a:	e02c      	b.n	80093c6 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xcc>
			}
		}
		else if (isrType & FDCAN_IT_RX_FIFO1_NEW_MESSAGE)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b00      	cmp	r3, #0
 8009374:	d026      	beq.n	80093c4 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xca>
		{
			FdcanMsg msg;
			if (HAL_FDCAN_GetRxMessage(m_hfdcan, FDCAN_RX_FIFO1, &msg.rxHeader, msg.data) != HAL_OK)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6858      	ldr	r0, [r3, #4]
 800937a:	f107 0314 	add.w	r3, r7, #20
 800937e:	334c      	adds	r3, #76	@ 0x4c
 8009380:	f107 0214 	add.w	r2, r7, #20
 8009384:	2141      	movs	r1, #65	@ 0x41
 8009386:	f7f8 fb85 	bl	8001a94 <HAL_FDCAN_GetRxMessage>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	bf14      	ite	ne
 8009390:	2301      	movne	r3, #1
 8009392:	2300      	moveq	r3, #0
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xa4>
			{
				return State::ErrorIsrRx;
 800939a:	2306      	movs	r3, #6
 800939c:	e013      	b.n	80093c6 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xcc>
			}
			if (osMessageQueuePut(*m_queueCanHandleFifo1, &msg, 0, 0) != osOK)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	f107 0114 	add.w	r1, r7, #20
 80093a8:	2300      	movs	r3, #0
 80093aa:	2200      	movs	r2, #0
 80093ac:	f7fc fbdc 	bl	8005b68 <osMessageQueuePut>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bf14      	ite	ne
 80093b6:	2301      	movne	r3, #1
 80093b8:	2300      	moveq	r3, #0
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xca>
			{
				return State::ErrorIsrRx;
 80093c0:	2306      	movs	r3, #6
 80093c2:	e000      	b.n	80093c6 <_ZN15FdcanController17updateInterruptRxEP19FDCAN_HandleTypeDefm+0xcc>
			}
		}
	}

	return State::Ok;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3768      	adds	r7, #104	@ 0x68
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <_ZN15FdcanController9setFilterE19FDCAN_FilterTypeDef>:

FdcanController::State FdcanController::setFilter(FDCAN_FilterTypeDef filter)
{
 80093ce:	b084      	sub	sp, #16
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	f107 0014 	add.w	r0, r7, #20
 80093dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (HAL_FDCAN_ConfigFilter(m_hfdcan, &filter) != HAL_OK)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f107 0214 	add.w	r2, r7, #20
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f8 fa8c 	bl	8001908 <HAL_FDCAN_ConfigFilter>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bf14      	ite	ne
 80093f6:	2301      	movne	r3, #1
 80093f8:	2300      	moveq	r3, #0
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <_ZN15FdcanController9setFilterE19FDCAN_FilterTypeDef+0x36>
	{
		return State::ErrorFilter;
 8009400:	2307      	movs	r3, #7
 8009402:	e000      	b.n	8009406 <_ZN15FdcanController9setFilterE19FDCAN_FilterTypeDef+0x38>
	}

	return State::Ok;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009410:	b004      	add	sp, #16
 8009412:	4770      	bx	lr

08009414 <_ZdlPvj>:
 8009414:	f000 b800 	b.w	8009418 <_ZdlPv>

08009418 <_ZdlPv>:
 8009418:	f000 b800 	b.w	800941c <free>

0800941c <free>:
 800941c:	4b02      	ldr	r3, [pc, #8]	@ (8009428 <free+0xc>)
 800941e:	4601      	mov	r1, r0
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f000 bb55 	b.w	8009ad0 <_free_r>
 8009426:	bf00      	nop
 8009428:	2000001c 	.word	0x2000001c

0800942c <sbrk_aligned>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	4e0f      	ldr	r6, [pc, #60]	@ (800946c <sbrk_aligned+0x40>)
 8009430:	460c      	mov	r4, r1
 8009432:	6831      	ldr	r1, [r6, #0]
 8009434:	4605      	mov	r5, r0
 8009436:	b911      	cbnz	r1, 800943e <sbrk_aligned+0x12>
 8009438:	f000 faec 	bl	8009a14 <_sbrk_r>
 800943c:	6030      	str	r0, [r6, #0]
 800943e:	4621      	mov	r1, r4
 8009440:	4628      	mov	r0, r5
 8009442:	f000 fae7 	bl	8009a14 <_sbrk_r>
 8009446:	1c43      	adds	r3, r0, #1
 8009448:	d103      	bne.n	8009452 <sbrk_aligned+0x26>
 800944a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800944e:	4620      	mov	r0, r4
 8009450:	bd70      	pop	{r4, r5, r6, pc}
 8009452:	1cc4      	adds	r4, r0, #3
 8009454:	f024 0403 	bic.w	r4, r4, #3
 8009458:	42a0      	cmp	r0, r4
 800945a:	d0f8      	beq.n	800944e <sbrk_aligned+0x22>
 800945c:	1a21      	subs	r1, r4, r0
 800945e:	4628      	mov	r0, r5
 8009460:	f000 fad8 	bl	8009a14 <_sbrk_r>
 8009464:	3001      	adds	r0, #1
 8009466:	d1f2      	bne.n	800944e <sbrk_aligned+0x22>
 8009468:	e7ef      	b.n	800944a <sbrk_aligned+0x1e>
 800946a:	bf00      	nop
 800946c:	2000369c 	.word	0x2000369c

08009470 <_malloc_r>:
 8009470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009474:	1ccd      	adds	r5, r1, #3
 8009476:	f025 0503 	bic.w	r5, r5, #3
 800947a:	3508      	adds	r5, #8
 800947c:	2d0c      	cmp	r5, #12
 800947e:	bf38      	it	cc
 8009480:	250c      	movcc	r5, #12
 8009482:	2d00      	cmp	r5, #0
 8009484:	4606      	mov	r6, r0
 8009486:	db01      	blt.n	800948c <_malloc_r+0x1c>
 8009488:	42a9      	cmp	r1, r5
 800948a:	d904      	bls.n	8009496 <_malloc_r+0x26>
 800948c:	230c      	movs	r3, #12
 800948e:	6033      	str	r3, [r6, #0]
 8009490:	2000      	movs	r0, #0
 8009492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800956c <_malloc_r+0xfc>
 800949a:	f000 f869 	bl	8009570 <__malloc_lock>
 800949e:	f8d8 3000 	ldr.w	r3, [r8]
 80094a2:	461c      	mov	r4, r3
 80094a4:	bb44      	cbnz	r4, 80094f8 <_malloc_r+0x88>
 80094a6:	4629      	mov	r1, r5
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7ff ffbf 	bl	800942c <sbrk_aligned>
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	4604      	mov	r4, r0
 80094b2:	d158      	bne.n	8009566 <_malloc_r+0xf6>
 80094b4:	f8d8 4000 	ldr.w	r4, [r8]
 80094b8:	4627      	mov	r7, r4
 80094ba:	2f00      	cmp	r7, #0
 80094bc:	d143      	bne.n	8009546 <_malloc_r+0xd6>
 80094be:	2c00      	cmp	r4, #0
 80094c0:	d04b      	beq.n	800955a <_malloc_r+0xea>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	4639      	mov	r1, r7
 80094c6:	4630      	mov	r0, r6
 80094c8:	eb04 0903 	add.w	r9, r4, r3
 80094cc:	f000 faa2 	bl	8009a14 <_sbrk_r>
 80094d0:	4581      	cmp	r9, r0
 80094d2:	d142      	bne.n	800955a <_malloc_r+0xea>
 80094d4:	6821      	ldr	r1, [r4, #0]
 80094d6:	1a6d      	subs	r5, r5, r1
 80094d8:	4629      	mov	r1, r5
 80094da:	4630      	mov	r0, r6
 80094dc:	f7ff ffa6 	bl	800942c <sbrk_aligned>
 80094e0:	3001      	adds	r0, #1
 80094e2:	d03a      	beq.n	800955a <_malloc_r+0xea>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	442b      	add	r3, r5
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	f8d8 3000 	ldr.w	r3, [r8]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	bb62      	cbnz	r2, 800954c <_malloc_r+0xdc>
 80094f2:	f8c8 7000 	str.w	r7, [r8]
 80094f6:	e00f      	b.n	8009518 <_malloc_r+0xa8>
 80094f8:	6822      	ldr	r2, [r4, #0]
 80094fa:	1b52      	subs	r2, r2, r5
 80094fc:	d420      	bmi.n	8009540 <_malloc_r+0xd0>
 80094fe:	2a0b      	cmp	r2, #11
 8009500:	d917      	bls.n	8009532 <_malloc_r+0xc2>
 8009502:	1961      	adds	r1, r4, r5
 8009504:	42a3      	cmp	r3, r4
 8009506:	6025      	str	r5, [r4, #0]
 8009508:	bf18      	it	ne
 800950a:	6059      	strne	r1, [r3, #4]
 800950c:	6863      	ldr	r3, [r4, #4]
 800950e:	bf08      	it	eq
 8009510:	f8c8 1000 	streq.w	r1, [r8]
 8009514:	5162      	str	r2, [r4, r5]
 8009516:	604b      	str	r3, [r1, #4]
 8009518:	4630      	mov	r0, r6
 800951a:	f000 f82f 	bl	800957c <__malloc_unlock>
 800951e:	f104 000b 	add.w	r0, r4, #11
 8009522:	1d23      	adds	r3, r4, #4
 8009524:	f020 0007 	bic.w	r0, r0, #7
 8009528:	1ac2      	subs	r2, r0, r3
 800952a:	bf1c      	itt	ne
 800952c:	1a1b      	subne	r3, r3, r0
 800952e:	50a3      	strne	r3, [r4, r2]
 8009530:	e7af      	b.n	8009492 <_malloc_r+0x22>
 8009532:	6862      	ldr	r2, [r4, #4]
 8009534:	42a3      	cmp	r3, r4
 8009536:	bf0c      	ite	eq
 8009538:	f8c8 2000 	streq.w	r2, [r8]
 800953c:	605a      	strne	r2, [r3, #4]
 800953e:	e7eb      	b.n	8009518 <_malloc_r+0xa8>
 8009540:	4623      	mov	r3, r4
 8009542:	6864      	ldr	r4, [r4, #4]
 8009544:	e7ae      	b.n	80094a4 <_malloc_r+0x34>
 8009546:	463c      	mov	r4, r7
 8009548:	687f      	ldr	r7, [r7, #4]
 800954a:	e7b6      	b.n	80094ba <_malloc_r+0x4a>
 800954c:	461a      	mov	r2, r3
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	42a3      	cmp	r3, r4
 8009552:	d1fb      	bne.n	800954c <_malloc_r+0xdc>
 8009554:	2300      	movs	r3, #0
 8009556:	6053      	str	r3, [r2, #4]
 8009558:	e7de      	b.n	8009518 <_malloc_r+0xa8>
 800955a:	230c      	movs	r3, #12
 800955c:	6033      	str	r3, [r6, #0]
 800955e:	4630      	mov	r0, r6
 8009560:	f000 f80c 	bl	800957c <__malloc_unlock>
 8009564:	e794      	b.n	8009490 <_malloc_r+0x20>
 8009566:	6005      	str	r5, [r0, #0]
 8009568:	e7d6      	b.n	8009518 <_malloc_r+0xa8>
 800956a:	bf00      	nop
 800956c:	200036a0 	.word	0x200036a0

08009570 <__malloc_lock>:
 8009570:	4801      	ldr	r0, [pc, #4]	@ (8009578 <__malloc_lock+0x8>)
 8009572:	f000 ba9c 	b.w	8009aae <__retarget_lock_acquire_recursive>
 8009576:	bf00      	nop
 8009578:	200037e4 	.word	0x200037e4

0800957c <__malloc_unlock>:
 800957c:	4801      	ldr	r0, [pc, #4]	@ (8009584 <__malloc_unlock+0x8>)
 800957e:	f000 ba97 	b.w	8009ab0 <__retarget_lock_release_recursive>
 8009582:	bf00      	nop
 8009584:	200037e4 	.word	0x200037e4

08009588 <std>:
 8009588:	2300      	movs	r3, #0
 800958a:	b510      	push	{r4, lr}
 800958c:	4604      	mov	r4, r0
 800958e:	e9c0 3300 	strd	r3, r3, [r0]
 8009592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009596:	6083      	str	r3, [r0, #8]
 8009598:	8181      	strh	r1, [r0, #12]
 800959a:	6643      	str	r3, [r0, #100]	@ 0x64
 800959c:	81c2      	strh	r2, [r0, #14]
 800959e:	6183      	str	r3, [r0, #24]
 80095a0:	4619      	mov	r1, r3
 80095a2:	2208      	movs	r2, #8
 80095a4:	305c      	adds	r0, #92	@ 0x5c
 80095a6:	f000 f9f9 	bl	800999c <memset>
 80095aa:	4b0d      	ldr	r3, [pc, #52]	@ (80095e0 <std+0x58>)
 80095ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80095ae:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <std+0x5c>)
 80095b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095b2:	4b0d      	ldr	r3, [pc, #52]	@ (80095e8 <std+0x60>)
 80095b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095b6:	4b0d      	ldr	r3, [pc, #52]	@ (80095ec <std+0x64>)
 80095b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80095ba:	4b0d      	ldr	r3, [pc, #52]	@ (80095f0 <std+0x68>)
 80095bc:	6224      	str	r4, [r4, #32]
 80095be:	429c      	cmp	r4, r3
 80095c0:	d006      	beq.n	80095d0 <std+0x48>
 80095c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095c6:	4294      	cmp	r4, r2
 80095c8:	d002      	beq.n	80095d0 <std+0x48>
 80095ca:	33d0      	adds	r3, #208	@ 0xd0
 80095cc:	429c      	cmp	r4, r3
 80095ce:	d105      	bne.n	80095dc <std+0x54>
 80095d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d8:	f000 ba68 	b.w	8009aac <__retarget_lock_init_recursive>
 80095dc:	bd10      	pop	{r4, pc}
 80095de:	bf00      	nop
 80095e0:	080097ed 	.word	0x080097ed
 80095e4:	0800980f 	.word	0x0800980f
 80095e8:	08009847 	.word	0x08009847
 80095ec:	0800986b 	.word	0x0800986b
 80095f0:	200036a4 	.word	0x200036a4

080095f4 <stdio_exit_handler>:
 80095f4:	4a02      	ldr	r2, [pc, #8]	@ (8009600 <stdio_exit_handler+0xc>)
 80095f6:	4903      	ldr	r1, [pc, #12]	@ (8009604 <stdio_exit_handler+0x10>)
 80095f8:	4803      	ldr	r0, [pc, #12]	@ (8009608 <stdio_exit_handler+0x14>)
 80095fa:	f000 b869 	b.w	80096d0 <_fwalk_sglue>
 80095fe:	bf00      	nop
 8009600:	20000010 	.word	0x20000010
 8009604:	0800a20d 	.word	0x0800a20d
 8009608:	20000020 	.word	0x20000020

0800960c <cleanup_stdio>:
 800960c:	6841      	ldr	r1, [r0, #4]
 800960e:	4b0c      	ldr	r3, [pc, #48]	@ (8009640 <cleanup_stdio+0x34>)
 8009610:	4299      	cmp	r1, r3
 8009612:	b510      	push	{r4, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	d001      	beq.n	800961c <cleanup_stdio+0x10>
 8009618:	f000 fdf8 	bl	800a20c <_fflush_r>
 800961c:	68a1      	ldr	r1, [r4, #8]
 800961e:	4b09      	ldr	r3, [pc, #36]	@ (8009644 <cleanup_stdio+0x38>)
 8009620:	4299      	cmp	r1, r3
 8009622:	d002      	beq.n	800962a <cleanup_stdio+0x1e>
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fdf1 	bl	800a20c <_fflush_r>
 800962a:	68e1      	ldr	r1, [r4, #12]
 800962c:	4b06      	ldr	r3, [pc, #24]	@ (8009648 <cleanup_stdio+0x3c>)
 800962e:	4299      	cmp	r1, r3
 8009630:	d004      	beq.n	800963c <cleanup_stdio+0x30>
 8009632:	4620      	mov	r0, r4
 8009634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009638:	f000 bde8 	b.w	800a20c <_fflush_r>
 800963c:	bd10      	pop	{r4, pc}
 800963e:	bf00      	nop
 8009640:	200036a4 	.word	0x200036a4
 8009644:	2000370c 	.word	0x2000370c
 8009648:	20003774 	.word	0x20003774

0800964c <global_stdio_init.part.0>:
 800964c:	b510      	push	{r4, lr}
 800964e:	4b0b      	ldr	r3, [pc, #44]	@ (800967c <global_stdio_init.part.0+0x30>)
 8009650:	4c0b      	ldr	r4, [pc, #44]	@ (8009680 <global_stdio_init.part.0+0x34>)
 8009652:	4a0c      	ldr	r2, [pc, #48]	@ (8009684 <global_stdio_init.part.0+0x38>)
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	4620      	mov	r0, r4
 8009658:	2200      	movs	r2, #0
 800965a:	2104      	movs	r1, #4
 800965c:	f7ff ff94 	bl	8009588 <std>
 8009660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009664:	2201      	movs	r2, #1
 8009666:	2109      	movs	r1, #9
 8009668:	f7ff ff8e 	bl	8009588 <std>
 800966c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009670:	2202      	movs	r2, #2
 8009672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009676:	2112      	movs	r1, #18
 8009678:	f7ff bf86 	b.w	8009588 <std>
 800967c:	200037dc 	.word	0x200037dc
 8009680:	200036a4 	.word	0x200036a4
 8009684:	080095f5 	.word	0x080095f5

08009688 <__sfp_lock_acquire>:
 8009688:	4801      	ldr	r0, [pc, #4]	@ (8009690 <__sfp_lock_acquire+0x8>)
 800968a:	f000 ba10 	b.w	8009aae <__retarget_lock_acquire_recursive>
 800968e:	bf00      	nop
 8009690:	200037e5 	.word	0x200037e5

08009694 <__sfp_lock_release>:
 8009694:	4801      	ldr	r0, [pc, #4]	@ (800969c <__sfp_lock_release+0x8>)
 8009696:	f000 ba0b 	b.w	8009ab0 <__retarget_lock_release_recursive>
 800969a:	bf00      	nop
 800969c:	200037e5 	.word	0x200037e5

080096a0 <__sinit>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	4604      	mov	r4, r0
 80096a4:	f7ff fff0 	bl	8009688 <__sfp_lock_acquire>
 80096a8:	6a23      	ldr	r3, [r4, #32]
 80096aa:	b11b      	cbz	r3, 80096b4 <__sinit+0x14>
 80096ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b0:	f7ff bff0 	b.w	8009694 <__sfp_lock_release>
 80096b4:	4b04      	ldr	r3, [pc, #16]	@ (80096c8 <__sinit+0x28>)
 80096b6:	6223      	str	r3, [r4, #32]
 80096b8:	4b04      	ldr	r3, [pc, #16]	@ (80096cc <__sinit+0x2c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1f5      	bne.n	80096ac <__sinit+0xc>
 80096c0:	f7ff ffc4 	bl	800964c <global_stdio_init.part.0>
 80096c4:	e7f2      	b.n	80096ac <__sinit+0xc>
 80096c6:	bf00      	nop
 80096c8:	0800960d 	.word	0x0800960d
 80096cc:	200037dc 	.word	0x200037dc

080096d0 <_fwalk_sglue>:
 80096d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d4:	4607      	mov	r7, r0
 80096d6:	4688      	mov	r8, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	2600      	movs	r6, #0
 80096dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096e0:	f1b9 0901 	subs.w	r9, r9, #1
 80096e4:	d505      	bpl.n	80096f2 <_fwalk_sglue+0x22>
 80096e6:	6824      	ldr	r4, [r4, #0]
 80096e8:	2c00      	cmp	r4, #0
 80096ea:	d1f7      	bne.n	80096dc <_fwalk_sglue+0xc>
 80096ec:	4630      	mov	r0, r6
 80096ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d907      	bls.n	8009708 <_fwalk_sglue+0x38>
 80096f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096fc:	3301      	adds	r3, #1
 80096fe:	d003      	beq.n	8009708 <_fwalk_sglue+0x38>
 8009700:	4629      	mov	r1, r5
 8009702:	4638      	mov	r0, r7
 8009704:	47c0      	blx	r8
 8009706:	4306      	orrs	r6, r0
 8009708:	3568      	adds	r5, #104	@ 0x68
 800970a:	e7e9      	b.n	80096e0 <_fwalk_sglue+0x10>

0800970c <iprintf>:
 800970c:	b40f      	push	{r0, r1, r2, r3}
 800970e:	b507      	push	{r0, r1, r2, lr}
 8009710:	4906      	ldr	r1, [pc, #24]	@ (800972c <iprintf+0x20>)
 8009712:	ab04      	add	r3, sp, #16
 8009714:	6808      	ldr	r0, [r1, #0]
 8009716:	f853 2b04 	ldr.w	r2, [r3], #4
 800971a:	6881      	ldr	r1, [r0, #8]
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	f000 fa4b 	bl	8009bb8 <_vfiprintf_r>
 8009722:	b003      	add	sp, #12
 8009724:	f85d eb04 	ldr.w	lr, [sp], #4
 8009728:	b004      	add	sp, #16
 800972a:	4770      	bx	lr
 800972c:	2000001c 	.word	0x2000001c

08009730 <_puts_r>:
 8009730:	6a03      	ldr	r3, [r0, #32]
 8009732:	b570      	push	{r4, r5, r6, lr}
 8009734:	6884      	ldr	r4, [r0, #8]
 8009736:	4605      	mov	r5, r0
 8009738:	460e      	mov	r6, r1
 800973a:	b90b      	cbnz	r3, 8009740 <_puts_r+0x10>
 800973c:	f7ff ffb0 	bl	80096a0 <__sinit>
 8009740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009742:	07db      	lsls	r3, r3, #31
 8009744:	d405      	bmi.n	8009752 <_puts_r+0x22>
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	0598      	lsls	r0, r3, #22
 800974a:	d402      	bmi.n	8009752 <_puts_r+0x22>
 800974c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800974e:	f000 f9ae 	bl	8009aae <__retarget_lock_acquire_recursive>
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	0719      	lsls	r1, r3, #28
 8009756:	d502      	bpl.n	800975e <_puts_r+0x2e>
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d135      	bne.n	80097ca <_puts_r+0x9a>
 800975e:	4621      	mov	r1, r4
 8009760:	4628      	mov	r0, r5
 8009762:	f000 f8c5 	bl	80098f0 <__swsetup_r>
 8009766:	b380      	cbz	r0, 80097ca <_puts_r+0x9a>
 8009768:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800976c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800976e:	07da      	lsls	r2, r3, #31
 8009770:	d405      	bmi.n	800977e <_puts_r+0x4e>
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	059b      	lsls	r3, r3, #22
 8009776:	d402      	bmi.n	800977e <_puts_r+0x4e>
 8009778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800977a:	f000 f999 	bl	8009ab0 <__retarget_lock_release_recursive>
 800977e:	4628      	mov	r0, r5
 8009780:	bd70      	pop	{r4, r5, r6, pc}
 8009782:	2b00      	cmp	r3, #0
 8009784:	da04      	bge.n	8009790 <_puts_r+0x60>
 8009786:	69a2      	ldr	r2, [r4, #24]
 8009788:	429a      	cmp	r2, r3
 800978a:	dc17      	bgt.n	80097bc <_puts_r+0x8c>
 800978c:	290a      	cmp	r1, #10
 800978e:	d015      	beq.n	80097bc <_puts_r+0x8c>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	6022      	str	r2, [r4, #0]
 8009796:	7019      	strb	r1, [r3, #0]
 8009798:	68a3      	ldr	r3, [r4, #8]
 800979a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800979e:	3b01      	subs	r3, #1
 80097a0:	60a3      	str	r3, [r4, #8]
 80097a2:	2900      	cmp	r1, #0
 80097a4:	d1ed      	bne.n	8009782 <_puts_r+0x52>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	da11      	bge.n	80097ce <_puts_r+0x9e>
 80097aa:	4622      	mov	r2, r4
 80097ac:	210a      	movs	r1, #10
 80097ae:	4628      	mov	r0, r5
 80097b0:	f000 f85f 	bl	8009872 <__swbuf_r>
 80097b4:	3001      	adds	r0, #1
 80097b6:	d0d7      	beq.n	8009768 <_puts_r+0x38>
 80097b8:	250a      	movs	r5, #10
 80097ba:	e7d7      	b.n	800976c <_puts_r+0x3c>
 80097bc:	4622      	mov	r2, r4
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 f857 	bl	8009872 <__swbuf_r>
 80097c4:	3001      	adds	r0, #1
 80097c6:	d1e7      	bne.n	8009798 <_puts_r+0x68>
 80097c8:	e7ce      	b.n	8009768 <_puts_r+0x38>
 80097ca:	3e01      	subs	r6, #1
 80097cc:	e7e4      	b.n	8009798 <_puts_r+0x68>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	6022      	str	r2, [r4, #0]
 80097d4:	220a      	movs	r2, #10
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e7ee      	b.n	80097b8 <_puts_r+0x88>
	...

080097dc <puts>:
 80097dc:	4b02      	ldr	r3, [pc, #8]	@ (80097e8 <puts+0xc>)
 80097de:	4601      	mov	r1, r0
 80097e0:	6818      	ldr	r0, [r3, #0]
 80097e2:	f7ff bfa5 	b.w	8009730 <_puts_r>
 80097e6:	bf00      	nop
 80097e8:	2000001c 	.word	0x2000001c

080097ec <__sread>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	460c      	mov	r4, r1
 80097f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f4:	f000 f8fc 	bl	80099f0 <_read_r>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	bfab      	itete	ge
 80097fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009800:	181b      	addge	r3, r3, r0
 8009802:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009806:	bfac      	ite	ge
 8009808:	6563      	strge	r3, [r4, #84]	@ 0x54
 800980a:	81a3      	strhlt	r3, [r4, #12]
 800980c:	bd10      	pop	{r4, pc}

0800980e <__swrite>:
 800980e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009812:	461f      	mov	r7, r3
 8009814:	898b      	ldrh	r3, [r1, #12]
 8009816:	05db      	lsls	r3, r3, #23
 8009818:	4605      	mov	r5, r0
 800981a:	460c      	mov	r4, r1
 800981c:	4616      	mov	r6, r2
 800981e:	d505      	bpl.n	800982c <__swrite+0x1e>
 8009820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009824:	2302      	movs	r3, #2
 8009826:	2200      	movs	r2, #0
 8009828:	f000 f8d0 	bl	80099cc <_lseek_r>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009832:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	4632      	mov	r2, r6
 800983a:	463b      	mov	r3, r7
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009842:	f000 b8f7 	b.w	8009a34 <_write_r>

08009846 <__sseek>:
 8009846:	b510      	push	{r4, lr}
 8009848:	460c      	mov	r4, r1
 800984a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984e:	f000 f8bd 	bl	80099cc <_lseek_r>
 8009852:	1c43      	adds	r3, r0, #1
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	bf15      	itete	ne
 8009858:	6560      	strne	r0, [r4, #84]	@ 0x54
 800985a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800985e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009862:	81a3      	strheq	r3, [r4, #12]
 8009864:	bf18      	it	ne
 8009866:	81a3      	strhne	r3, [r4, #12]
 8009868:	bd10      	pop	{r4, pc}

0800986a <__sclose>:
 800986a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986e:	f000 b89d 	b.w	80099ac <_close_r>

08009872 <__swbuf_r>:
 8009872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009874:	460e      	mov	r6, r1
 8009876:	4614      	mov	r4, r2
 8009878:	4605      	mov	r5, r0
 800987a:	b118      	cbz	r0, 8009884 <__swbuf_r+0x12>
 800987c:	6a03      	ldr	r3, [r0, #32]
 800987e:	b90b      	cbnz	r3, 8009884 <__swbuf_r+0x12>
 8009880:	f7ff ff0e 	bl	80096a0 <__sinit>
 8009884:	69a3      	ldr	r3, [r4, #24]
 8009886:	60a3      	str	r3, [r4, #8]
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	071a      	lsls	r2, r3, #28
 800988c:	d501      	bpl.n	8009892 <__swbuf_r+0x20>
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	b943      	cbnz	r3, 80098a4 <__swbuf_r+0x32>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f000 f82b 	bl	80098f0 <__swsetup_r>
 800989a:	b118      	cbz	r0, 80098a4 <__swbuf_r+0x32>
 800989c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80098a0:	4638      	mov	r0, r7
 80098a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	6922      	ldr	r2, [r4, #16]
 80098a8:	1a98      	subs	r0, r3, r2
 80098aa:	6963      	ldr	r3, [r4, #20]
 80098ac:	b2f6      	uxtb	r6, r6
 80098ae:	4283      	cmp	r3, r0
 80098b0:	4637      	mov	r7, r6
 80098b2:	dc05      	bgt.n	80098c0 <__swbuf_r+0x4e>
 80098b4:	4621      	mov	r1, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 fca8 	bl	800a20c <_fflush_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1ed      	bne.n	800989c <__swbuf_r+0x2a>
 80098c0:	68a3      	ldr	r3, [r4, #8]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	60a3      	str	r3, [r4, #8]
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	701e      	strb	r6, [r3, #0]
 80098ce:	6962      	ldr	r2, [r4, #20]
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d004      	beq.n	80098e0 <__swbuf_r+0x6e>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	07db      	lsls	r3, r3, #31
 80098da:	d5e1      	bpl.n	80098a0 <__swbuf_r+0x2e>
 80098dc:	2e0a      	cmp	r6, #10
 80098de:	d1df      	bne.n	80098a0 <__swbuf_r+0x2e>
 80098e0:	4621      	mov	r1, r4
 80098e2:	4628      	mov	r0, r5
 80098e4:	f000 fc92 	bl	800a20c <_fflush_r>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d0d9      	beq.n	80098a0 <__swbuf_r+0x2e>
 80098ec:	e7d6      	b.n	800989c <__swbuf_r+0x2a>
	...

080098f0 <__swsetup_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4b29      	ldr	r3, [pc, #164]	@ (8009998 <__swsetup_r+0xa8>)
 80098f4:	4605      	mov	r5, r0
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	460c      	mov	r4, r1
 80098fa:	b118      	cbz	r0, 8009904 <__swsetup_r+0x14>
 80098fc:	6a03      	ldr	r3, [r0, #32]
 80098fe:	b90b      	cbnz	r3, 8009904 <__swsetup_r+0x14>
 8009900:	f7ff fece 	bl	80096a0 <__sinit>
 8009904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009908:	0719      	lsls	r1, r3, #28
 800990a:	d422      	bmi.n	8009952 <__swsetup_r+0x62>
 800990c:	06da      	lsls	r2, r3, #27
 800990e:	d407      	bmi.n	8009920 <__swsetup_r+0x30>
 8009910:	2209      	movs	r2, #9
 8009912:	602a      	str	r2, [r5, #0]
 8009914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800991e:	e033      	b.n	8009988 <__swsetup_r+0x98>
 8009920:	0758      	lsls	r0, r3, #29
 8009922:	d512      	bpl.n	800994a <__swsetup_r+0x5a>
 8009924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009926:	b141      	cbz	r1, 800993a <__swsetup_r+0x4a>
 8009928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800992c:	4299      	cmp	r1, r3
 800992e:	d002      	beq.n	8009936 <__swsetup_r+0x46>
 8009930:	4628      	mov	r0, r5
 8009932:	f000 f8cd 	bl	8009ad0 <_free_r>
 8009936:	2300      	movs	r3, #0
 8009938:	6363      	str	r3, [r4, #52]	@ 0x34
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	2300      	movs	r3, #0
 8009944:	6063      	str	r3, [r4, #4]
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f043 0308 	orr.w	r3, r3, #8
 8009950:	81a3      	strh	r3, [r4, #12]
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	b94b      	cbnz	r3, 800996a <__swsetup_r+0x7a>
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800995c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009960:	d003      	beq.n	800996a <__swsetup_r+0x7a>
 8009962:	4621      	mov	r1, r4
 8009964:	4628      	mov	r0, r5
 8009966:	f000 fc9f 	bl	800a2a8 <__smakebuf_r>
 800996a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800996e:	f013 0201 	ands.w	r2, r3, #1
 8009972:	d00a      	beq.n	800998a <__swsetup_r+0x9a>
 8009974:	2200      	movs	r2, #0
 8009976:	60a2      	str	r2, [r4, #8]
 8009978:	6962      	ldr	r2, [r4, #20]
 800997a:	4252      	negs	r2, r2
 800997c:	61a2      	str	r2, [r4, #24]
 800997e:	6922      	ldr	r2, [r4, #16]
 8009980:	b942      	cbnz	r2, 8009994 <__swsetup_r+0xa4>
 8009982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009986:	d1c5      	bne.n	8009914 <__swsetup_r+0x24>
 8009988:	bd38      	pop	{r3, r4, r5, pc}
 800998a:	0799      	lsls	r1, r3, #30
 800998c:	bf58      	it	pl
 800998e:	6962      	ldrpl	r2, [r4, #20]
 8009990:	60a2      	str	r2, [r4, #8]
 8009992:	e7f4      	b.n	800997e <__swsetup_r+0x8e>
 8009994:	2000      	movs	r0, #0
 8009996:	e7f7      	b.n	8009988 <__swsetup_r+0x98>
 8009998:	2000001c 	.word	0x2000001c

0800999c <memset>:
 800999c:	4402      	add	r2, r0
 800999e:	4603      	mov	r3, r0
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d100      	bne.n	80099a6 <memset+0xa>
 80099a4:	4770      	bx	lr
 80099a6:	f803 1b01 	strb.w	r1, [r3], #1
 80099aa:	e7f9      	b.n	80099a0 <memset+0x4>

080099ac <_close_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d06      	ldr	r5, [pc, #24]	@ (80099c8 <_close_r+0x1c>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4604      	mov	r4, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	602b      	str	r3, [r5, #0]
 80099b8:	f7f7 fbcf 	bl	800115a <_close>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_close_r+0x1a>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_close_r+0x1a>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	200037e0 	.word	0x200037e0

080099cc <_lseek_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d07      	ldr	r5, [pc, #28]	@ (80099ec <_lseek_r+0x20>)
 80099d0:	4604      	mov	r4, r0
 80099d2:	4608      	mov	r0, r1
 80099d4:	4611      	mov	r1, r2
 80099d6:	2200      	movs	r2, #0
 80099d8:	602a      	str	r2, [r5, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	f7f7 fbe4 	bl	80011a8 <_lseek>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d102      	bne.n	80099ea <_lseek_r+0x1e>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	b103      	cbz	r3, 80099ea <_lseek_r+0x1e>
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	200037e0 	.word	0x200037e0

080099f0 <_read_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d07      	ldr	r5, [pc, #28]	@ (8009a10 <_read_r+0x20>)
 80099f4:	4604      	mov	r4, r0
 80099f6:	4608      	mov	r0, r1
 80099f8:	4611      	mov	r1, r2
 80099fa:	2200      	movs	r2, #0
 80099fc:	602a      	str	r2, [r5, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	f7f7 fb8e 	bl	8001120 <_read>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_read_r+0x1e>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_read_r+0x1e>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	200037e0 	.word	0x200037e0

08009a14 <_sbrk_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d06      	ldr	r5, [pc, #24]	@ (8009a30 <_sbrk_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	f7f7 fbd0 	bl	80011c4 <_sbrk>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_sbrk_r+0x1a>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_sbrk_r+0x1a>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	200037e0 	.word	0x200037e0

08009a34 <_write_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d07      	ldr	r5, [pc, #28]	@ (8009a54 <_write_r+0x20>)
 8009a38:	4604      	mov	r4, r0
 8009a3a:	4608      	mov	r0, r1
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	2200      	movs	r2, #0
 8009a40:	602a      	str	r2, [r5, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	f7f6 fde6 	bl	8000614 <_write>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_write_r+0x1e>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_write_r+0x1e>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	200037e0 	.word	0x200037e0

08009a58 <__errno>:
 8009a58:	4b01      	ldr	r3, [pc, #4]	@ (8009a60 <__errno+0x8>)
 8009a5a:	6818      	ldr	r0, [r3, #0]
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	2000001c 	.word	0x2000001c

08009a64 <__libc_init_array>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4d0d      	ldr	r5, [pc, #52]	@ (8009a9c <__libc_init_array+0x38>)
 8009a68:	4c0d      	ldr	r4, [pc, #52]	@ (8009aa0 <__libc_init_array+0x3c>)
 8009a6a:	1b64      	subs	r4, r4, r5
 8009a6c:	10a4      	asrs	r4, r4, #2
 8009a6e:	2600      	movs	r6, #0
 8009a70:	42a6      	cmp	r6, r4
 8009a72:	d109      	bne.n	8009a88 <__libc_init_array+0x24>
 8009a74:	4d0b      	ldr	r5, [pc, #44]	@ (8009aa4 <__libc_init_array+0x40>)
 8009a76:	4c0c      	ldr	r4, [pc, #48]	@ (8009aa8 <__libc_init_array+0x44>)
 8009a78:	f000 fc74 	bl	800a364 <_init>
 8009a7c:	1b64      	subs	r4, r4, r5
 8009a7e:	10a4      	asrs	r4, r4, #2
 8009a80:	2600      	movs	r6, #0
 8009a82:	42a6      	cmp	r6, r4
 8009a84:	d105      	bne.n	8009a92 <__libc_init_array+0x2e>
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a8c:	4798      	blx	r3
 8009a8e:	3601      	adds	r6, #1
 8009a90:	e7ee      	b.n	8009a70 <__libc_init_array+0xc>
 8009a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a96:	4798      	blx	r3
 8009a98:	3601      	adds	r6, #1
 8009a9a:	e7f2      	b.n	8009a82 <__libc_init_array+0x1e>
 8009a9c:	0800a598 	.word	0x0800a598
 8009aa0:	0800a598 	.word	0x0800a598
 8009aa4:	0800a598 	.word	0x0800a598
 8009aa8:	0800a5a0 	.word	0x0800a5a0

08009aac <__retarget_lock_init_recursive>:
 8009aac:	4770      	bx	lr

08009aae <__retarget_lock_acquire_recursive>:
 8009aae:	4770      	bx	lr

08009ab0 <__retarget_lock_release_recursive>:
 8009ab0:	4770      	bx	lr

08009ab2 <memcpy>:
 8009ab2:	440a      	add	r2, r1
 8009ab4:	4291      	cmp	r1, r2
 8009ab6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009aba:	d100      	bne.n	8009abe <memcpy+0xc>
 8009abc:	4770      	bx	lr
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ac8:	4291      	cmp	r1, r2
 8009aca:	d1f9      	bne.n	8009ac0 <memcpy+0xe>
 8009acc:	bd10      	pop	{r4, pc}
	...

08009ad0 <_free_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	d041      	beq.n	8009b5c <_free_r+0x8c>
 8009ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009adc:	1f0c      	subs	r4, r1, #4
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bfb8      	it	lt
 8009ae2:	18e4      	addlt	r4, r4, r3
 8009ae4:	f7ff fd44 	bl	8009570 <__malloc_lock>
 8009ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b60 <_free_r+0x90>)
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	b933      	cbnz	r3, 8009afc <_free_r+0x2c>
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	6014      	str	r4, [r2, #0]
 8009af2:	4628      	mov	r0, r5
 8009af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009af8:	f7ff bd40 	b.w	800957c <__malloc_unlock>
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d908      	bls.n	8009b12 <_free_r+0x42>
 8009b00:	6820      	ldr	r0, [r4, #0]
 8009b02:	1821      	adds	r1, r4, r0
 8009b04:	428b      	cmp	r3, r1
 8009b06:	bf01      	itttt	eq
 8009b08:	6819      	ldreq	r1, [r3, #0]
 8009b0a:	685b      	ldreq	r3, [r3, #4]
 8009b0c:	1809      	addeq	r1, r1, r0
 8009b0e:	6021      	streq	r1, [r4, #0]
 8009b10:	e7ed      	b.n	8009aee <_free_r+0x1e>
 8009b12:	461a      	mov	r2, r3
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	b10b      	cbz	r3, 8009b1c <_free_r+0x4c>
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d9fa      	bls.n	8009b12 <_free_r+0x42>
 8009b1c:	6811      	ldr	r1, [r2, #0]
 8009b1e:	1850      	adds	r0, r2, r1
 8009b20:	42a0      	cmp	r0, r4
 8009b22:	d10b      	bne.n	8009b3c <_free_r+0x6c>
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	4401      	add	r1, r0
 8009b28:	1850      	adds	r0, r2, r1
 8009b2a:	4283      	cmp	r3, r0
 8009b2c:	6011      	str	r1, [r2, #0]
 8009b2e:	d1e0      	bne.n	8009af2 <_free_r+0x22>
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	6053      	str	r3, [r2, #4]
 8009b36:	4408      	add	r0, r1
 8009b38:	6010      	str	r0, [r2, #0]
 8009b3a:	e7da      	b.n	8009af2 <_free_r+0x22>
 8009b3c:	d902      	bls.n	8009b44 <_free_r+0x74>
 8009b3e:	230c      	movs	r3, #12
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	e7d6      	b.n	8009af2 <_free_r+0x22>
 8009b44:	6820      	ldr	r0, [r4, #0]
 8009b46:	1821      	adds	r1, r4, r0
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	bf04      	itt	eq
 8009b4c:	6819      	ldreq	r1, [r3, #0]
 8009b4e:	685b      	ldreq	r3, [r3, #4]
 8009b50:	6063      	str	r3, [r4, #4]
 8009b52:	bf04      	itt	eq
 8009b54:	1809      	addeq	r1, r1, r0
 8009b56:	6021      	streq	r1, [r4, #0]
 8009b58:	6054      	str	r4, [r2, #4]
 8009b5a:	e7ca      	b.n	8009af2 <_free_r+0x22>
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	200036a0 	.word	0x200036a0

08009b64 <__sfputc_r>:
 8009b64:	6893      	ldr	r3, [r2, #8]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	b410      	push	{r4}
 8009b6c:	6093      	str	r3, [r2, #8]
 8009b6e:	da08      	bge.n	8009b82 <__sfputc_r+0x1e>
 8009b70:	6994      	ldr	r4, [r2, #24]
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	db01      	blt.n	8009b7a <__sfputc_r+0x16>
 8009b76:	290a      	cmp	r1, #10
 8009b78:	d103      	bne.n	8009b82 <__sfputc_r+0x1e>
 8009b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b7e:	f7ff be78 	b.w	8009872 <__swbuf_r>
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	1c58      	adds	r0, r3, #1
 8009b86:	6010      	str	r0, [r2, #0]
 8009b88:	7019      	strb	r1, [r3, #0]
 8009b8a:	4608      	mov	r0, r1
 8009b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <__sfputs_r>:
 8009b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b94:	4606      	mov	r6, r0
 8009b96:	460f      	mov	r7, r1
 8009b98:	4614      	mov	r4, r2
 8009b9a:	18d5      	adds	r5, r2, r3
 8009b9c:	42ac      	cmp	r4, r5
 8009b9e:	d101      	bne.n	8009ba4 <__sfputs_r+0x12>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e007      	b.n	8009bb4 <__sfputs_r+0x22>
 8009ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba8:	463a      	mov	r2, r7
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7ff ffda 	bl	8009b64 <__sfputc_r>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d1f3      	bne.n	8009b9c <__sfputs_r+0xa>
 8009bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bb8 <_vfiprintf_r>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	b09d      	sub	sp, #116	@ 0x74
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	4698      	mov	r8, r3
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	b118      	cbz	r0, 8009bd0 <_vfiprintf_r+0x18>
 8009bc8:	6a03      	ldr	r3, [r0, #32]
 8009bca:	b90b      	cbnz	r3, 8009bd0 <_vfiprintf_r+0x18>
 8009bcc:	f7ff fd68 	bl	80096a0 <__sinit>
 8009bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bd2:	07d9      	lsls	r1, r3, #31
 8009bd4:	d405      	bmi.n	8009be2 <_vfiprintf_r+0x2a>
 8009bd6:	89ab      	ldrh	r3, [r5, #12]
 8009bd8:	059a      	lsls	r2, r3, #22
 8009bda:	d402      	bmi.n	8009be2 <_vfiprintf_r+0x2a>
 8009bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bde:	f7ff ff66 	bl	8009aae <__retarget_lock_acquire_recursive>
 8009be2:	89ab      	ldrh	r3, [r5, #12]
 8009be4:	071b      	lsls	r3, r3, #28
 8009be6:	d501      	bpl.n	8009bec <_vfiprintf_r+0x34>
 8009be8:	692b      	ldr	r3, [r5, #16]
 8009bea:	b99b      	cbnz	r3, 8009c14 <_vfiprintf_r+0x5c>
 8009bec:	4629      	mov	r1, r5
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7ff fe7e 	bl	80098f0 <__swsetup_r>
 8009bf4:	b170      	cbz	r0, 8009c14 <_vfiprintf_r+0x5c>
 8009bf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bf8:	07dc      	lsls	r4, r3, #31
 8009bfa:	d504      	bpl.n	8009c06 <_vfiprintf_r+0x4e>
 8009bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c00:	b01d      	add	sp, #116	@ 0x74
 8009c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	0598      	lsls	r0, r3, #22
 8009c0a:	d4f7      	bmi.n	8009bfc <_vfiprintf_r+0x44>
 8009c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c0e:	f7ff ff4f 	bl	8009ab0 <__retarget_lock_release_recursive>
 8009c12:	e7f3      	b.n	8009bfc <_vfiprintf_r+0x44>
 8009c14:	2300      	movs	r3, #0
 8009c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c18:	2320      	movs	r3, #32
 8009c1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c22:	2330      	movs	r3, #48	@ 0x30
 8009c24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009dd4 <_vfiprintf_r+0x21c>
 8009c28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c2c:	f04f 0901 	mov.w	r9, #1
 8009c30:	4623      	mov	r3, r4
 8009c32:	469a      	mov	sl, r3
 8009c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c38:	b10a      	cbz	r2, 8009c3e <_vfiprintf_r+0x86>
 8009c3a:	2a25      	cmp	r2, #37	@ 0x25
 8009c3c:	d1f9      	bne.n	8009c32 <_vfiprintf_r+0x7a>
 8009c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c42:	d00b      	beq.n	8009c5c <_vfiprintf_r+0xa4>
 8009c44:	465b      	mov	r3, fp
 8009c46:	4622      	mov	r2, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7ff ffa1 	bl	8009b92 <__sfputs_r>
 8009c50:	3001      	adds	r0, #1
 8009c52:	f000 80a7 	beq.w	8009da4 <_vfiprintf_r+0x1ec>
 8009c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c58:	445a      	add	r2, fp
 8009c5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 809f 	beq.w	8009da4 <_vfiprintf_r+0x1ec>
 8009c66:	2300      	movs	r3, #0
 8009c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c70:	f10a 0a01 	add.w	sl, sl, #1
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c7e:	4654      	mov	r4, sl
 8009c80:	2205      	movs	r2, #5
 8009c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c86:	4853      	ldr	r0, [pc, #332]	@ (8009dd4 <_vfiprintf_r+0x21c>)
 8009c88:	f7f6 faca 	bl	8000220 <memchr>
 8009c8c:	9a04      	ldr	r2, [sp, #16]
 8009c8e:	b9d8      	cbnz	r0, 8009cc8 <_vfiprintf_r+0x110>
 8009c90:	06d1      	lsls	r1, r2, #27
 8009c92:	bf44      	itt	mi
 8009c94:	2320      	movmi	r3, #32
 8009c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c9a:	0713      	lsls	r3, r2, #28
 8009c9c:	bf44      	itt	mi
 8009c9e:	232b      	movmi	r3, #43	@ 0x2b
 8009ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009caa:	d015      	beq.n	8009cd8 <_vfiprintf_r+0x120>
 8009cac:	9a07      	ldr	r2, [sp, #28]
 8009cae:	4654      	mov	r4, sl
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	f04f 0c0a 	mov.w	ip, #10
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cbc:	3b30      	subs	r3, #48	@ 0x30
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d94b      	bls.n	8009d5a <_vfiprintf_r+0x1a2>
 8009cc2:	b1b0      	cbz	r0, 8009cf2 <_vfiprintf_r+0x13a>
 8009cc4:	9207      	str	r2, [sp, #28]
 8009cc6:	e014      	b.n	8009cf2 <_vfiprintf_r+0x13a>
 8009cc8:	eba0 0308 	sub.w	r3, r0, r8
 8009ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	46a2      	mov	sl, r4
 8009cd6:	e7d2      	b.n	8009c7e <_vfiprintf_r+0xc6>
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	1d19      	adds	r1, r3, #4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	9103      	str	r1, [sp, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bfbb      	ittet	lt
 8009ce4:	425b      	neglt	r3, r3
 8009ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cea:	9307      	strge	r3, [sp, #28]
 8009cec:	9307      	strlt	r3, [sp, #28]
 8009cee:	bfb8      	it	lt
 8009cf0:	9204      	strlt	r2, [sp, #16]
 8009cf2:	7823      	ldrb	r3, [r4, #0]
 8009cf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cf6:	d10a      	bne.n	8009d0e <_vfiprintf_r+0x156>
 8009cf8:	7863      	ldrb	r3, [r4, #1]
 8009cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cfc:	d132      	bne.n	8009d64 <_vfiprintf_r+0x1ac>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	1d1a      	adds	r2, r3, #4
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	9203      	str	r2, [sp, #12]
 8009d06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d0a:	3402      	adds	r4, #2
 8009d0c:	9305      	str	r3, [sp, #20]
 8009d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009de4 <_vfiprintf_r+0x22c>
 8009d12:	7821      	ldrb	r1, [r4, #0]
 8009d14:	2203      	movs	r2, #3
 8009d16:	4650      	mov	r0, sl
 8009d18:	f7f6 fa82 	bl	8000220 <memchr>
 8009d1c:	b138      	cbz	r0, 8009d2e <_vfiprintf_r+0x176>
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	eba0 000a 	sub.w	r0, r0, sl
 8009d24:	2240      	movs	r2, #64	@ 0x40
 8009d26:	4082      	lsls	r2, r0
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	3401      	adds	r4, #1
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	4829      	ldr	r0, [pc, #164]	@ (8009dd8 <_vfiprintf_r+0x220>)
 8009d34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d38:	2206      	movs	r2, #6
 8009d3a:	f7f6 fa71 	bl	8000220 <memchr>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d03f      	beq.n	8009dc2 <_vfiprintf_r+0x20a>
 8009d42:	4b26      	ldr	r3, [pc, #152]	@ (8009ddc <_vfiprintf_r+0x224>)
 8009d44:	bb1b      	cbnz	r3, 8009d8e <_vfiprintf_r+0x1d6>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	3307      	adds	r3, #7
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	3308      	adds	r3, #8
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	443b      	add	r3, r7
 8009d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d58:	e76a      	b.n	8009c30 <_vfiprintf_r+0x78>
 8009d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d5e:	460c      	mov	r4, r1
 8009d60:	2001      	movs	r0, #1
 8009d62:	e7a8      	b.n	8009cb6 <_vfiprintf_r+0xfe>
 8009d64:	2300      	movs	r3, #0
 8009d66:	3401      	adds	r4, #1
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	f04f 0c0a 	mov.w	ip, #10
 8009d70:	4620      	mov	r0, r4
 8009d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d76:	3a30      	subs	r2, #48	@ 0x30
 8009d78:	2a09      	cmp	r2, #9
 8009d7a:	d903      	bls.n	8009d84 <_vfiprintf_r+0x1cc>
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d0c6      	beq.n	8009d0e <_vfiprintf_r+0x156>
 8009d80:	9105      	str	r1, [sp, #20]
 8009d82:	e7c4      	b.n	8009d0e <_vfiprintf_r+0x156>
 8009d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d88:	4604      	mov	r4, r0
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e7f0      	b.n	8009d70 <_vfiprintf_r+0x1b8>
 8009d8e:	ab03      	add	r3, sp, #12
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	462a      	mov	r2, r5
 8009d94:	4b12      	ldr	r3, [pc, #72]	@ (8009de0 <_vfiprintf_r+0x228>)
 8009d96:	a904      	add	r1, sp, #16
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f3af 8000 	nop.w
 8009d9e:	4607      	mov	r7, r0
 8009da0:	1c78      	adds	r0, r7, #1
 8009da2:	d1d6      	bne.n	8009d52 <_vfiprintf_r+0x19a>
 8009da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009da6:	07d9      	lsls	r1, r3, #31
 8009da8:	d405      	bmi.n	8009db6 <_vfiprintf_r+0x1fe>
 8009daa:	89ab      	ldrh	r3, [r5, #12]
 8009dac:	059a      	lsls	r2, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_vfiprintf_r+0x1fe>
 8009db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009db2:	f7ff fe7d 	bl	8009ab0 <__retarget_lock_release_recursive>
 8009db6:	89ab      	ldrh	r3, [r5, #12]
 8009db8:	065b      	lsls	r3, r3, #25
 8009dba:	f53f af1f 	bmi.w	8009bfc <_vfiprintf_r+0x44>
 8009dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dc0:	e71e      	b.n	8009c00 <_vfiprintf_r+0x48>
 8009dc2:	ab03      	add	r3, sp, #12
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4b05      	ldr	r3, [pc, #20]	@ (8009de0 <_vfiprintf_r+0x228>)
 8009dca:	a904      	add	r1, sp, #16
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f000 f879 	bl	8009ec4 <_printf_i>
 8009dd2:	e7e4      	b.n	8009d9e <_vfiprintf_r+0x1e6>
 8009dd4:	0800a55c 	.word	0x0800a55c
 8009dd8:	0800a566 	.word	0x0800a566
 8009ddc:	00000000 	.word	0x00000000
 8009de0:	08009b93 	.word	0x08009b93
 8009de4:	0800a562 	.word	0x0800a562

08009de8 <_printf_common>:
 8009de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	4616      	mov	r6, r2
 8009dee:	4698      	mov	r8, r3
 8009df0:	688a      	ldr	r2, [r1, #8]
 8009df2:	690b      	ldr	r3, [r1, #16]
 8009df4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	bfb8      	it	lt
 8009dfc:	4613      	movlt	r3, r2
 8009dfe:	6033      	str	r3, [r6, #0]
 8009e00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e04:	4607      	mov	r7, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	b10a      	cbz	r2, 8009e0e <_printf_common+0x26>
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	6033      	str	r3, [r6, #0]
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	0699      	lsls	r1, r3, #26
 8009e12:	bf42      	ittt	mi
 8009e14:	6833      	ldrmi	r3, [r6, #0]
 8009e16:	3302      	addmi	r3, #2
 8009e18:	6033      	strmi	r3, [r6, #0]
 8009e1a:	6825      	ldr	r5, [r4, #0]
 8009e1c:	f015 0506 	ands.w	r5, r5, #6
 8009e20:	d106      	bne.n	8009e30 <_printf_common+0x48>
 8009e22:	f104 0a19 	add.w	sl, r4, #25
 8009e26:	68e3      	ldr	r3, [r4, #12]
 8009e28:	6832      	ldr	r2, [r6, #0]
 8009e2a:	1a9b      	subs	r3, r3, r2
 8009e2c:	42ab      	cmp	r3, r5
 8009e2e:	dc26      	bgt.n	8009e7e <_printf_common+0x96>
 8009e30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e34:	6822      	ldr	r2, [r4, #0]
 8009e36:	3b00      	subs	r3, #0
 8009e38:	bf18      	it	ne
 8009e3a:	2301      	movne	r3, #1
 8009e3c:	0692      	lsls	r2, r2, #26
 8009e3e:	d42b      	bmi.n	8009e98 <_printf_common+0xb0>
 8009e40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e44:	4641      	mov	r1, r8
 8009e46:	4638      	mov	r0, r7
 8009e48:	47c8      	blx	r9
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d01e      	beq.n	8009e8c <_printf_common+0xa4>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	6922      	ldr	r2, [r4, #16]
 8009e52:	f003 0306 	and.w	r3, r3, #6
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	bf02      	ittt	eq
 8009e5a:	68e5      	ldreq	r5, [r4, #12]
 8009e5c:	6833      	ldreq	r3, [r6, #0]
 8009e5e:	1aed      	subeq	r5, r5, r3
 8009e60:	68a3      	ldr	r3, [r4, #8]
 8009e62:	bf0c      	ite	eq
 8009e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e68:	2500      	movne	r5, #0
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	bfc4      	itt	gt
 8009e6e:	1a9b      	subgt	r3, r3, r2
 8009e70:	18ed      	addgt	r5, r5, r3
 8009e72:	2600      	movs	r6, #0
 8009e74:	341a      	adds	r4, #26
 8009e76:	42b5      	cmp	r5, r6
 8009e78:	d11a      	bne.n	8009eb0 <_printf_common+0xc8>
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	e008      	b.n	8009e90 <_printf_common+0xa8>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4652      	mov	r2, sl
 8009e82:	4641      	mov	r1, r8
 8009e84:	4638      	mov	r0, r7
 8009e86:	47c8      	blx	r9
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d103      	bne.n	8009e94 <_printf_common+0xac>
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e94:	3501      	adds	r5, #1
 8009e96:	e7c6      	b.n	8009e26 <_printf_common+0x3e>
 8009e98:	18e1      	adds	r1, r4, r3
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	2030      	movs	r0, #48	@ 0x30
 8009e9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ea2:	4422      	add	r2, r4
 8009ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ea8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009eac:	3302      	adds	r3, #2
 8009eae:	e7c7      	b.n	8009e40 <_printf_common+0x58>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	4641      	mov	r1, r8
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	47c8      	blx	r9
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d0e6      	beq.n	8009e8c <_printf_common+0xa4>
 8009ebe:	3601      	adds	r6, #1
 8009ec0:	e7d9      	b.n	8009e76 <_printf_common+0x8e>
	...

08009ec4 <_printf_i>:
 8009ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	7e0f      	ldrb	r7, [r1, #24]
 8009eca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ecc:	2f78      	cmp	r7, #120	@ 0x78
 8009ece:	4691      	mov	r9, r2
 8009ed0:	4680      	mov	r8, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	469a      	mov	sl, r3
 8009ed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009eda:	d807      	bhi.n	8009eec <_printf_i+0x28>
 8009edc:	2f62      	cmp	r7, #98	@ 0x62
 8009ede:	d80a      	bhi.n	8009ef6 <_printf_i+0x32>
 8009ee0:	2f00      	cmp	r7, #0
 8009ee2:	f000 80d2 	beq.w	800a08a <_printf_i+0x1c6>
 8009ee6:	2f58      	cmp	r7, #88	@ 0x58
 8009ee8:	f000 80b9 	beq.w	800a05e <_printf_i+0x19a>
 8009eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ef4:	e03a      	b.n	8009f6c <_printf_i+0xa8>
 8009ef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009efa:	2b15      	cmp	r3, #21
 8009efc:	d8f6      	bhi.n	8009eec <_printf_i+0x28>
 8009efe:	a101      	add	r1, pc, #4	@ (adr r1, 8009f04 <_printf_i+0x40>)
 8009f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f04:	08009f5d 	.word	0x08009f5d
 8009f08:	08009f71 	.word	0x08009f71
 8009f0c:	08009eed 	.word	0x08009eed
 8009f10:	08009eed 	.word	0x08009eed
 8009f14:	08009eed 	.word	0x08009eed
 8009f18:	08009eed 	.word	0x08009eed
 8009f1c:	08009f71 	.word	0x08009f71
 8009f20:	08009eed 	.word	0x08009eed
 8009f24:	08009eed 	.word	0x08009eed
 8009f28:	08009eed 	.word	0x08009eed
 8009f2c:	08009eed 	.word	0x08009eed
 8009f30:	0800a071 	.word	0x0800a071
 8009f34:	08009f9b 	.word	0x08009f9b
 8009f38:	0800a02b 	.word	0x0800a02b
 8009f3c:	08009eed 	.word	0x08009eed
 8009f40:	08009eed 	.word	0x08009eed
 8009f44:	0800a093 	.word	0x0800a093
 8009f48:	08009eed 	.word	0x08009eed
 8009f4c:	08009f9b 	.word	0x08009f9b
 8009f50:	08009eed 	.word	0x08009eed
 8009f54:	08009eed 	.word	0x08009eed
 8009f58:	0800a033 	.word	0x0800a033
 8009f5c:	6833      	ldr	r3, [r6, #0]
 8009f5e:	1d1a      	adds	r2, r3, #4
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6032      	str	r2, [r6, #0]
 8009f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e09d      	b.n	800a0ac <_printf_i+0x1e8>
 8009f70:	6833      	ldr	r3, [r6, #0]
 8009f72:	6820      	ldr	r0, [r4, #0]
 8009f74:	1d19      	adds	r1, r3, #4
 8009f76:	6031      	str	r1, [r6, #0]
 8009f78:	0606      	lsls	r6, r0, #24
 8009f7a:	d501      	bpl.n	8009f80 <_printf_i+0xbc>
 8009f7c:	681d      	ldr	r5, [r3, #0]
 8009f7e:	e003      	b.n	8009f88 <_printf_i+0xc4>
 8009f80:	0645      	lsls	r5, r0, #25
 8009f82:	d5fb      	bpl.n	8009f7c <_printf_i+0xb8>
 8009f84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	da03      	bge.n	8009f94 <_printf_i+0xd0>
 8009f8c:	232d      	movs	r3, #45	@ 0x2d
 8009f8e:	426d      	negs	r5, r5
 8009f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f94:	4859      	ldr	r0, [pc, #356]	@ (800a0fc <_printf_i+0x238>)
 8009f96:	230a      	movs	r3, #10
 8009f98:	e011      	b.n	8009fbe <_printf_i+0xfa>
 8009f9a:	6821      	ldr	r1, [r4, #0]
 8009f9c:	6833      	ldr	r3, [r6, #0]
 8009f9e:	0608      	lsls	r0, r1, #24
 8009fa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fa4:	d402      	bmi.n	8009fac <_printf_i+0xe8>
 8009fa6:	0649      	lsls	r1, r1, #25
 8009fa8:	bf48      	it	mi
 8009faa:	b2ad      	uxthmi	r5, r5
 8009fac:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fae:	4853      	ldr	r0, [pc, #332]	@ (800a0fc <_printf_i+0x238>)
 8009fb0:	6033      	str	r3, [r6, #0]
 8009fb2:	bf14      	ite	ne
 8009fb4:	230a      	movne	r3, #10
 8009fb6:	2308      	moveq	r3, #8
 8009fb8:	2100      	movs	r1, #0
 8009fba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fbe:	6866      	ldr	r6, [r4, #4]
 8009fc0:	60a6      	str	r6, [r4, #8]
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	bfa2      	ittt	ge
 8009fc6:	6821      	ldrge	r1, [r4, #0]
 8009fc8:	f021 0104 	bicge.w	r1, r1, #4
 8009fcc:	6021      	strge	r1, [r4, #0]
 8009fce:	b90d      	cbnz	r5, 8009fd4 <_printf_i+0x110>
 8009fd0:	2e00      	cmp	r6, #0
 8009fd2:	d04b      	beq.n	800a06c <_printf_i+0x1a8>
 8009fd4:	4616      	mov	r6, r2
 8009fd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fda:	fb03 5711 	mls	r7, r3, r1, r5
 8009fde:	5dc7      	ldrb	r7, [r0, r7]
 8009fe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fe4:	462f      	mov	r7, r5
 8009fe6:	42bb      	cmp	r3, r7
 8009fe8:	460d      	mov	r5, r1
 8009fea:	d9f4      	bls.n	8009fd6 <_printf_i+0x112>
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d10b      	bne.n	800a008 <_printf_i+0x144>
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	07df      	lsls	r7, r3, #31
 8009ff4:	d508      	bpl.n	800a008 <_printf_i+0x144>
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	6861      	ldr	r1, [r4, #4]
 8009ffa:	4299      	cmp	r1, r3
 8009ffc:	bfde      	ittt	le
 8009ffe:	2330      	movle	r3, #48	@ 0x30
 800a000:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a004:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a008:	1b92      	subs	r2, r2, r6
 800a00a:	6122      	str	r2, [r4, #16]
 800a00c:	f8cd a000 	str.w	sl, [sp]
 800a010:	464b      	mov	r3, r9
 800a012:	aa03      	add	r2, sp, #12
 800a014:	4621      	mov	r1, r4
 800a016:	4640      	mov	r0, r8
 800a018:	f7ff fee6 	bl	8009de8 <_printf_common>
 800a01c:	3001      	adds	r0, #1
 800a01e:	d14a      	bne.n	800a0b6 <_printf_i+0x1f2>
 800a020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a024:	b004      	add	sp, #16
 800a026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	f043 0320 	orr.w	r3, r3, #32
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	4833      	ldr	r0, [pc, #204]	@ (800a100 <_printf_i+0x23c>)
 800a034:	2778      	movs	r7, #120	@ 0x78
 800a036:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	6831      	ldr	r1, [r6, #0]
 800a03e:	061f      	lsls	r7, r3, #24
 800a040:	f851 5b04 	ldr.w	r5, [r1], #4
 800a044:	d402      	bmi.n	800a04c <_printf_i+0x188>
 800a046:	065f      	lsls	r7, r3, #25
 800a048:	bf48      	it	mi
 800a04a:	b2ad      	uxthmi	r5, r5
 800a04c:	6031      	str	r1, [r6, #0]
 800a04e:	07d9      	lsls	r1, r3, #31
 800a050:	bf44      	itt	mi
 800a052:	f043 0320 	orrmi.w	r3, r3, #32
 800a056:	6023      	strmi	r3, [r4, #0]
 800a058:	b11d      	cbz	r5, 800a062 <_printf_i+0x19e>
 800a05a:	2310      	movs	r3, #16
 800a05c:	e7ac      	b.n	8009fb8 <_printf_i+0xf4>
 800a05e:	4827      	ldr	r0, [pc, #156]	@ (800a0fc <_printf_i+0x238>)
 800a060:	e7e9      	b.n	800a036 <_printf_i+0x172>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	f023 0320 	bic.w	r3, r3, #32
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	e7f6      	b.n	800a05a <_printf_i+0x196>
 800a06c:	4616      	mov	r6, r2
 800a06e:	e7bd      	b.n	8009fec <_printf_i+0x128>
 800a070:	6833      	ldr	r3, [r6, #0]
 800a072:	6825      	ldr	r5, [r4, #0]
 800a074:	6961      	ldr	r1, [r4, #20]
 800a076:	1d18      	adds	r0, r3, #4
 800a078:	6030      	str	r0, [r6, #0]
 800a07a:	062e      	lsls	r6, r5, #24
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	d501      	bpl.n	800a084 <_printf_i+0x1c0>
 800a080:	6019      	str	r1, [r3, #0]
 800a082:	e002      	b.n	800a08a <_printf_i+0x1c6>
 800a084:	0668      	lsls	r0, r5, #25
 800a086:	d5fb      	bpl.n	800a080 <_printf_i+0x1bc>
 800a088:	8019      	strh	r1, [r3, #0]
 800a08a:	2300      	movs	r3, #0
 800a08c:	6123      	str	r3, [r4, #16]
 800a08e:	4616      	mov	r6, r2
 800a090:	e7bc      	b.n	800a00c <_printf_i+0x148>
 800a092:	6833      	ldr	r3, [r6, #0]
 800a094:	1d1a      	adds	r2, r3, #4
 800a096:	6032      	str	r2, [r6, #0]
 800a098:	681e      	ldr	r6, [r3, #0]
 800a09a:	6862      	ldr	r2, [r4, #4]
 800a09c:	2100      	movs	r1, #0
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f7f6 f8be 	bl	8000220 <memchr>
 800a0a4:	b108      	cbz	r0, 800a0aa <_printf_i+0x1e6>
 800a0a6:	1b80      	subs	r0, r0, r6
 800a0a8:	6060      	str	r0, [r4, #4]
 800a0aa:	6863      	ldr	r3, [r4, #4]
 800a0ac:	6123      	str	r3, [r4, #16]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0b4:	e7aa      	b.n	800a00c <_printf_i+0x148>
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	4640      	mov	r0, r8
 800a0be:	47d0      	blx	sl
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d0ad      	beq.n	800a020 <_printf_i+0x15c>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	079b      	lsls	r3, r3, #30
 800a0c8:	d413      	bmi.n	800a0f2 <_printf_i+0x22e>
 800a0ca:	68e0      	ldr	r0, [r4, #12]
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	4298      	cmp	r0, r3
 800a0d0:	bfb8      	it	lt
 800a0d2:	4618      	movlt	r0, r3
 800a0d4:	e7a6      	b.n	800a024 <_printf_i+0x160>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	4632      	mov	r2, r6
 800a0da:	4649      	mov	r1, r9
 800a0dc:	4640      	mov	r0, r8
 800a0de:	47d0      	blx	sl
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d09d      	beq.n	800a020 <_printf_i+0x15c>
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	68e3      	ldr	r3, [r4, #12]
 800a0e8:	9903      	ldr	r1, [sp, #12]
 800a0ea:	1a5b      	subs	r3, r3, r1
 800a0ec:	42ab      	cmp	r3, r5
 800a0ee:	dcf2      	bgt.n	800a0d6 <_printf_i+0x212>
 800a0f0:	e7eb      	b.n	800a0ca <_printf_i+0x206>
 800a0f2:	2500      	movs	r5, #0
 800a0f4:	f104 0619 	add.w	r6, r4, #25
 800a0f8:	e7f5      	b.n	800a0e6 <_printf_i+0x222>
 800a0fa:	bf00      	nop
 800a0fc:	0800a56d 	.word	0x0800a56d
 800a100:	0800a57e 	.word	0x0800a57e

0800a104 <__sflush_r>:
 800a104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a10c:	0716      	lsls	r6, r2, #28
 800a10e:	4605      	mov	r5, r0
 800a110:	460c      	mov	r4, r1
 800a112:	d454      	bmi.n	800a1be <__sflush_r+0xba>
 800a114:	684b      	ldr	r3, [r1, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	dc02      	bgt.n	800a120 <__sflush_r+0x1c>
 800a11a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dd48      	ble.n	800a1b2 <__sflush_r+0xae>
 800a120:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a122:	2e00      	cmp	r6, #0
 800a124:	d045      	beq.n	800a1b2 <__sflush_r+0xae>
 800a126:	2300      	movs	r3, #0
 800a128:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a12c:	682f      	ldr	r7, [r5, #0]
 800a12e:	6a21      	ldr	r1, [r4, #32]
 800a130:	602b      	str	r3, [r5, #0]
 800a132:	d030      	beq.n	800a196 <__sflush_r+0x92>
 800a134:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	0759      	lsls	r1, r3, #29
 800a13a:	d505      	bpl.n	800a148 <__sflush_r+0x44>
 800a13c:	6863      	ldr	r3, [r4, #4]
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a142:	b10b      	cbz	r3, 800a148 <__sflush_r+0x44>
 800a144:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a146:	1ad2      	subs	r2, r2, r3
 800a148:	2300      	movs	r3, #0
 800a14a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a14c:	6a21      	ldr	r1, [r4, #32]
 800a14e:	4628      	mov	r0, r5
 800a150:	47b0      	blx	r6
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	d106      	bne.n	800a166 <__sflush_r+0x62>
 800a158:	6829      	ldr	r1, [r5, #0]
 800a15a:	291d      	cmp	r1, #29
 800a15c:	d82b      	bhi.n	800a1b6 <__sflush_r+0xb2>
 800a15e:	4a2a      	ldr	r2, [pc, #168]	@ (800a208 <__sflush_r+0x104>)
 800a160:	410a      	asrs	r2, r1
 800a162:	07d6      	lsls	r6, r2, #31
 800a164:	d427      	bmi.n	800a1b6 <__sflush_r+0xb2>
 800a166:	2200      	movs	r2, #0
 800a168:	6062      	str	r2, [r4, #4]
 800a16a:	04d9      	lsls	r1, r3, #19
 800a16c:	6922      	ldr	r2, [r4, #16]
 800a16e:	6022      	str	r2, [r4, #0]
 800a170:	d504      	bpl.n	800a17c <__sflush_r+0x78>
 800a172:	1c42      	adds	r2, r0, #1
 800a174:	d101      	bne.n	800a17a <__sflush_r+0x76>
 800a176:	682b      	ldr	r3, [r5, #0]
 800a178:	b903      	cbnz	r3, 800a17c <__sflush_r+0x78>
 800a17a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a17c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a17e:	602f      	str	r7, [r5, #0]
 800a180:	b1b9      	cbz	r1, 800a1b2 <__sflush_r+0xae>
 800a182:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a186:	4299      	cmp	r1, r3
 800a188:	d002      	beq.n	800a190 <__sflush_r+0x8c>
 800a18a:	4628      	mov	r0, r5
 800a18c:	f7ff fca0 	bl	8009ad0 <_free_r>
 800a190:	2300      	movs	r3, #0
 800a192:	6363      	str	r3, [r4, #52]	@ 0x34
 800a194:	e00d      	b.n	800a1b2 <__sflush_r+0xae>
 800a196:	2301      	movs	r3, #1
 800a198:	4628      	mov	r0, r5
 800a19a:	47b0      	blx	r6
 800a19c:	4602      	mov	r2, r0
 800a19e:	1c50      	adds	r0, r2, #1
 800a1a0:	d1c9      	bne.n	800a136 <__sflush_r+0x32>
 800a1a2:	682b      	ldr	r3, [r5, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d0c6      	beq.n	800a136 <__sflush_r+0x32>
 800a1a8:	2b1d      	cmp	r3, #29
 800a1aa:	d001      	beq.n	800a1b0 <__sflush_r+0xac>
 800a1ac:	2b16      	cmp	r3, #22
 800a1ae:	d11e      	bne.n	800a1ee <__sflush_r+0xea>
 800a1b0:	602f      	str	r7, [r5, #0]
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	e022      	b.n	800a1fc <__sflush_r+0xf8>
 800a1b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	e01b      	b.n	800a1f6 <__sflush_r+0xf2>
 800a1be:	690f      	ldr	r7, [r1, #16]
 800a1c0:	2f00      	cmp	r7, #0
 800a1c2:	d0f6      	beq.n	800a1b2 <__sflush_r+0xae>
 800a1c4:	0793      	lsls	r3, r2, #30
 800a1c6:	680e      	ldr	r6, [r1, #0]
 800a1c8:	bf08      	it	eq
 800a1ca:	694b      	ldreq	r3, [r1, #20]
 800a1cc:	600f      	str	r7, [r1, #0]
 800a1ce:	bf18      	it	ne
 800a1d0:	2300      	movne	r3, #0
 800a1d2:	eba6 0807 	sub.w	r8, r6, r7
 800a1d6:	608b      	str	r3, [r1, #8]
 800a1d8:	f1b8 0f00 	cmp.w	r8, #0
 800a1dc:	dde9      	ble.n	800a1b2 <__sflush_r+0xae>
 800a1de:	6a21      	ldr	r1, [r4, #32]
 800a1e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a1e2:	4643      	mov	r3, r8
 800a1e4:	463a      	mov	r2, r7
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b0      	blx	r6
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	dc08      	bgt.n	800a200 <__sflush_r+0xfc>
 800a1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a200:	4407      	add	r7, r0
 800a202:	eba8 0800 	sub.w	r8, r8, r0
 800a206:	e7e7      	b.n	800a1d8 <__sflush_r+0xd4>
 800a208:	dfbffffe 	.word	0xdfbffffe

0800a20c <_fflush_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	690b      	ldr	r3, [r1, #16]
 800a210:	4605      	mov	r5, r0
 800a212:	460c      	mov	r4, r1
 800a214:	b913      	cbnz	r3, 800a21c <_fflush_r+0x10>
 800a216:	2500      	movs	r5, #0
 800a218:	4628      	mov	r0, r5
 800a21a:	bd38      	pop	{r3, r4, r5, pc}
 800a21c:	b118      	cbz	r0, 800a226 <_fflush_r+0x1a>
 800a21e:	6a03      	ldr	r3, [r0, #32]
 800a220:	b90b      	cbnz	r3, 800a226 <_fflush_r+0x1a>
 800a222:	f7ff fa3d 	bl	80096a0 <__sinit>
 800a226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f3      	beq.n	800a216 <_fflush_r+0xa>
 800a22e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a230:	07d0      	lsls	r0, r2, #31
 800a232:	d404      	bmi.n	800a23e <_fflush_r+0x32>
 800a234:	0599      	lsls	r1, r3, #22
 800a236:	d402      	bmi.n	800a23e <_fflush_r+0x32>
 800a238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a23a:	f7ff fc38 	bl	8009aae <__retarget_lock_acquire_recursive>
 800a23e:	4628      	mov	r0, r5
 800a240:	4621      	mov	r1, r4
 800a242:	f7ff ff5f 	bl	800a104 <__sflush_r>
 800a246:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a248:	07da      	lsls	r2, r3, #31
 800a24a:	4605      	mov	r5, r0
 800a24c:	d4e4      	bmi.n	800a218 <_fflush_r+0xc>
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	059b      	lsls	r3, r3, #22
 800a252:	d4e1      	bmi.n	800a218 <_fflush_r+0xc>
 800a254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a256:	f7ff fc2b 	bl	8009ab0 <__retarget_lock_release_recursive>
 800a25a:	e7dd      	b.n	800a218 <_fflush_r+0xc>

0800a25c <__swhatbuf_r>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	460c      	mov	r4, r1
 800a260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a264:	2900      	cmp	r1, #0
 800a266:	b096      	sub	sp, #88	@ 0x58
 800a268:	4615      	mov	r5, r2
 800a26a:	461e      	mov	r6, r3
 800a26c:	da0d      	bge.n	800a28a <__swhatbuf_r+0x2e>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a274:	f04f 0100 	mov.w	r1, #0
 800a278:	bf14      	ite	ne
 800a27a:	2340      	movne	r3, #64	@ 0x40
 800a27c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a280:	2000      	movs	r0, #0
 800a282:	6031      	str	r1, [r6, #0]
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	b016      	add	sp, #88	@ 0x58
 800a288:	bd70      	pop	{r4, r5, r6, pc}
 800a28a:	466a      	mov	r2, sp
 800a28c:	f000 f848 	bl	800a320 <_fstat_r>
 800a290:	2800      	cmp	r0, #0
 800a292:	dbec      	blt.n	800a26e <__swhatbuf_r+0x12>
 800a294:	9901      	ldr	r1, [sp, #4]
 800a296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a29a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a29e:	4259      	negs	r1, r3
 800a2a0:	4159      	adcs	r1, r3
 800a2a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2a6:	e7eb      	b.n	800a280 <__swhatbuf_r+0x24>

0800a2a8 <__smakebuf_r>:
 800a2a8:	898b      	ldrh	r3, [r1, #12]
 800a2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2ac:	079d      	lsls	r5, r3, #30
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	d507      	bpl.n	800a2c4 <__smakebuf_r+0x1c>
 800a2b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	6123      	str	r3, [r4, #16]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	6163      	str	r3, [r4, #20]
 800a2c0:	b003      	add	sp, #12
 800a2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c4:	ab01      	add	r3, sp, #4
 800a2c6:	466a      	mov	r2, sp
 800a2c8:	f7ff ffc8 	bl	800a25c <__swhatbuf_r>
 800a2cc:	9f00      	ldr	r7, [sp, #0]
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff f8cc 	bl	8009470 <_malloc_r>
 800a2d8:	b948      	cbnz	r0, 800a2ee <__smakebuf_r+0x46>
 800a2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2de:	059a      	lsls	r2, r3, #22
 800a2e0:	d4ee      	bmi.n	800a2c0 <__smakebuf_r+0x18>
 800a2e2:	f023 0303 	bic.w	r3, r3, #3
 800a2e6:	f043 0302 	orr.w	r3, r3, #2
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	e7e2      	b.n	800a2b4 <__smakebuf_r+0xc>
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	6020      	str	r0, [r4, #0]
 800a2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	9b01      	ldr	r3, [sp, #4]
 800a2fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2fe:	b15b      	cbz	r3, 800a318 <__smakebuf_r+0x70>
 800a300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a304:	4630      	mov	r0, r6
 800a306:	f000 f81d 	bl	800a344 <_isatty_r>
 800a30a:	b128      	cbz	r0, 800a318 <__smakebuf_r+0x70>
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	f023 0303 	bic.w	r3, r3, #3
 800a312:	f043 0301 	orr.w	r3, r3, #1
 800a316:	81a3      	strh	r3, [r4, #12]
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	431d      	orrs	r5, r3
 800a31c:	81a5      	strh	r5, [r4, #12]
 800a31e:	e7cf      	b.n	800a2c0 <__smakebuf_r+0x18>

0800a320 <_fstat_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4d07      	ldr	r5, [pc, #28]	@ (800a340 <_fstat_r+0x20>)
 800a324:	2300      	movs	r3, #0
 800a326:	4604      	mov	r4, r0
 800a328:	4608      	mov	r0, r1
 800a32a:	4611      	mov	r1, r2
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	f7f6 ff20 	bl	8001172 <_fstat>
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	d102      	bne.n	800a33c <_fstat_r+0x1c>
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	b103      	cbz	r3, 800a33c <_fstat_r+0x1c>
 800a33a:	6023      	str	r3, [r4, #0]
 800a33c:	bd38      	pop	{r3, r4, r5, pc}
 800a33e:	bf00      	nop
 800a340:	200037e0 	.word	0x200037e0

0800a344 <_isatty_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d06      	ldr	r5, [pc, #24]	@ (800a360 <_isatty_r+0x1c>)
 800a348:	2300      	movs	r3, #0
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f6 ff1f 	bl	8001192 <_isatty>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_isatty_r+0x1a>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_isatty_r+0x1a>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	200037e0 	.word	0x200037e0

0800a364 <_init>:
 800a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a366:	bf00      	nop
 800a368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36a:	bc08      	pop	{r3}
 800a36c:	469e      	mov	lr, r3
 800a36e:	4770      	bx	lr

0800a370 <_fini>:
 800a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a372:	bf00      	nop
 800a374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a376:	bc08      	pop	{r3}
 800a378:	469e      	mov	lr, r3
 800a37a:	4770      	bx	lr
